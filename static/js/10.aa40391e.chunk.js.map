{"version":3,"sources":["config/constants/nfts.ts","config/constants/epic.ts","utils/formatBalance.ts","hooks/useBlock.ts","utils/erc20.ts","utils/callHelpers.ts","hooks/useApprove.ts","hooks/useHarvest.ts","components/UnlockButton.tsx","config/index.ts","components/layout/Flex.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/utils/contracts.ts","views/Farms/contexts/NftProvider.tsx","views/Farms/contexts/EpicProvider.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["NftFarm","NFT","AMOUNT_TO_CLAIM","Nfts","name","metadata","description","previewImage","originalImage","fileType","blurImage","sortOrder","nftId","tokenAmount","tokenSupply","nftFarmContract","nftContract","EpicNftFarm","getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","useBlock","useContext","BlockContext","getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","approve","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","useApprove","dispatch","useDispatch","useWallet","useMasterchef","onApprove","useCallback","fetchFarmUserDataAsync","useNftApprove","tokenContract","spenderAddress","useHarvest","farmPid","onReward","txHash","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","UnlockButton","props","TranslateString","useI18n","connect","reset","onPresentConnectModal","useWalletModal","onClick","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","styled","div","Wrapper","theme","colors","primary","ExpandableSectionButton","expanded","aria-label","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","liquidityUrlPathParts","justifyContent","href","external","NoFeeTag","variant","outline","startIcon","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","useStake","onStake","console","info","useUnstake","onUnstake","StyledSpacer","size","Spacer","s","spacing","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledInputWrapper","input","radii","default","StyledInput","Input","endAdornment","onChange","placeholder","startAdornment","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","toLocaleString","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","handleChange","e","currentTarget","handleSelectMax","_maxInput","String","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","HarvestAction","earnings","rawEarningsBalance","marginBottom","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","lpAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","handleApprove","error","textTransform","fontSize","pr","mt","fullWidth","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","getNftContract","contractOptions","nftAbi","nft","getFromWei","v","parseFloat","fromWei","getFromWayArray","array","t","push","getToFloat","parseInt","getToInt","NftProviderContext","createContext","NftProvider","isMounted","useRef","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","state","setState","currentBlock","useEffect","multicall","nftFarm","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","fetchContractData","params","getMinted","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","tokenIdPromises","tokenIdsOwnedByWallet","association","current","canBurnNft","Provider","getTokenIds","reInitialize","EpicProviderContext","EpicProvider","epicHasClaimed","myEpicMints","epicNftFarm","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","vladPrice","mustHaveNft","haveNft","indexOf","undefined","log","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","VLAD","CAKE","Number","maximumFractionDigits","farmAPY","minimumFractionDigits","style","display","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceVladBusd","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","tokenPerBlock","poolWeight","comparedTo","Page","textAlign","exact","responsive"],"mappings":"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","file":"static/js/10.aa40391e.chunk.js","sourcesContent":["import { Nft } from './types'\n\n// export const NftFarm = '0x08d2cBc5EFd1B56034F4628bB32e947C0d86BbB1'\n// export const NFT = '0x3F7C7C24fFA2ceFfaACE11B39D5b8a575A4B0674'\n\n// testnet\nexport const NftFarm = '0xaBa054F1437aEBEa43fB0804b734DdB3F39FB62F'\nexport const NFT = '0xA81Ab2D03b9E3a62BDBb837d417A5E221F754E14'\nexport const AMOUNT_TO_CLAIM = '10'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Count Pepes Chocula',\n    metadata: 'tier-NFT-base-dark-chocolate.json',\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\n    previewImage: 'preview-base-dark-chocolate.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 0,\n    nftId: 0,\n    tokenAmount: 10,\n    tokenSupply: 2222,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Vlad Pepes Drakul',\n    metadata: 'tier-NFT-base-main-nopaint.json',\n    description: 'The legend behind the meme in all his original glory. Part of the base tier of Vlad NFTs',\n    previewImage: 'preview-base-main-nopaint.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWckPrzbjvf8jqUpdQ7jKLzdaSBTyPSV6x6obSUHHipqc?filename=NFT-base-main-nopaint.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 1,\n    nftId: 1,\n    tokenAmount: 10,\n    tokenSupply: 2222,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Pepes in Stone',\n    metadata: 'tier-NFT-base-marble.json',\n    description:\n      'The count has turned into a marble statue ready for display in the halls of Vladhalla. Part of the base tier of Vlad NFTs.',\n    previewImage: 'preview-base-marble.jpg',\n    originalImage: 'https://ipfs.io/ipfs/QmSnz85drLjCD4qNgaMwHFC6PFEkGrmYhM1LpHwZWpEWaQ?filename=NFT-base-marble.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 2,\n    nftId: 2,\n    tokenAmount: 10,\n    tokenSupply: 2222,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'The path to Vladhalla',\n    metadata: '',\n    description: 'All who seek to find the path to Vladhalla must have strong hands along the way to immortality.',\n    previewImage: 'preview-path-to-vladhalla.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmQWAeV3aAWD2Kbvxmtt4H874AEf7M7N5FcBos4iZbkRcj?filename=NFT-rare-path-to-vladhalla.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 3,\n    nftId: 3,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Painted Pepe',\n    metadata: '',\n    description:\n      'As an homage to the original Vlad Pepes Drakul this retains his painted face hang him in your gallery for eternal viewing.',\n    previewImage: 'preview-painted-pepes.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmRqe92vpppkNS2aihmdvswHstAiHAF4jC2KUAiec5LKKk?filename=NFT-rare-painted-pepes.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 4,\n    nftId: 4,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in thier wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 5,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n]\n\nexport default Nfts\n","import { Nft } from './types'\n\n// export const EpicNftFarm = '0x6a63AF63675D3c9D498DF43Aa163F9243E7b4646'\n// export const NFT = '0x3F7C7C24fFA2ceFfaACE11B39D5b8a575A4B0674'\n\n// testnet\nexport const EpicNftFarm = '0x16034F26aD4e187FaBF752976d35395d3d4639F1'\nexport const NFT = '0xA81Ab2D03b9E3a62BDBb837d417A5E221F754E14'\nexport const AMOUNT_TO_CLAIM = '10'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Silver Pepes',\n    metadata: '',\n    description:\n      \"The count has had an epic existence sure, but it has not been without many attempts at his alife. This artist's rendition pays homage to the time he was frozen in Carbonite ...oh wait, wrong story. Our bad, pretty slick tho right?\",\n    previewImage: 'preview-silver-pepe.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmaPP3CqB8iNcB9b9NCZVytNiaxZcJWt7Kk1vnHWwRL7hQ?filename=NFT-epic-silver-pepes.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 0,\n    nftId: 0,\n    tokenAmount: 350,\n    tokenSupply: 66,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Bank of Vladhalla',\n    metadata: '',\n    description:\n      \"They say when you leave this alife you can't take it with you... Well, who's leaving? That's for mortals to worry about.\",\n    previewImage: 'preview-bank-of-vlad.png',\n    originalImage:\n      'https://ipfs.io/ipfs/Qma87NMJAu33nQuCRvoAK4MwP9CBwhGsLkQdTptM6uxoyp?filename=NFT-epic-bank-of-vladhalla.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 1,\n    nftId: 1,\n    tokenAmount: 350,\n    tokenSupply: 66,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Gates of Vladhalla',\n    metadata: '',\n    description:\n      'Tales have been written of the select few who have made it this far. The  sheer majesty of these very gates would make the hairs on their arms stand on end. Only the immortal shall pass through - will you?',\n    previewImage: 'preview-gate-of-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmW1az8XriRqdx2zXY7w71XFxXUEfH5hUsyZTzwGBe7gfh?filename=NFT-epic-gates-of-vladhalla.png',\n    fileType: 'png',\n    blurImage: '',\n    sortOrder: 2,\n    nftId: 2,\n    tokenAmount: 350,\n    tokenSupply: 66,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n]\n\nexport default Nfts\n","import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n\n// Approve an NFT\nexport const useNftApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal\n          href={\n            isTokenOnly\n              ? `https://exchange.pancakeswap.finance/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`\n          }\n        >\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link color=\"#9f0d0d\" external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {depositFeeBP > 0 ? (\n        <StyledMaxText>\n          {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP / 10000).toString()}{' '}\n          {symbol}\n        </StyledMaxText>\n      ) : null}\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', depositFeeBP = 0 }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    const _maxInput = String(fullBalance)\n    setVal(_maxInput)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP }) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {pid === 12 ? (\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size=\"sm\"\n            variant=\"secondary\"\n            marginBottom=\"15px\"\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n        ) : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if (isTokenOnly) {\n      return getContract(ethereum as provider, tokenAddress)\n    }\n    return getContract(ethereum as provider, lpAddress)\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        depositFeeBP={depositFeeBP}\n      />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          ALIFE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ALIFE per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import { AbiItem, fromWei } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport { NftFarm, NFT } from 'config/constants/nfts'\nimport BigNumber from 'bignumber.js'\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\n}\n\nexport const getNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = (nft as unknown) as AbiItem\n  return getContract(nftAbi, NFT, contractOptions)\n}\n\nexport const getFromWei = (v: any) => {\n  if (!v) return 0\n  return parseFloat(fromWei(v.toString(), 'ether'))\n}\n\nexport const getFromWayArray = (v: any) => {\n  if (!v) return []\n  const array = []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(fromWei(v[i].toString(), 'ether'))\n    }\n  }\n  return array\n}\n\nexport const getToFloat = (v: any) => {\n  if (!v) return []\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseInt(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport const getToInt = (v: any) => {\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseFloat(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport default getNftMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport { NftFarm } from 'config/constants/nfts'\nimport multicall from 'utils/multicall'\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype BunnyMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  myMints: number[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: BunnyMap\n\n  allowMultipleClaims: boolean\n  rarity: string\n  priceMultiplier: number\n  maxMintPerNft: number\n  tokenPerBurn: number\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    rarity: '',\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n    tokenPerBurn: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n    myMints: [],\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n\n          allowMultipleClaimsArr,\n          rarityArr,\n          priceMultiplierArr,\n          maxMintPerNftArr,\n          tokenPerBurnArr,\n        ] = await multicall(nftFarm, [\n          { address: NftFarm, name: 'startBlockNumber' },\n          { address: NftFarm, name: 'endBlockNumber' },\n          { address: NftFarm, name: 'countBurnt' },\n          { address: NftFarm, name: 'totalSupplyDistributed' },\n          { address: NftFarm, name: 'currentDistributedSupply' },\n          { address: NftFarm, name: 'allowMultipleClaims' },\n          { address: NftFarm, name: 'rarity' },\n          { address: NftFarm, name: 'priceMultiplier' },\n          { address: NftFarm, name: 'maxMintPerNft' },\n          { address: NftFarm, name: 'tokenPerBurn' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBurnt]: [BigNumber] = countBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBurnt: countBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          allowMultipleClaims: allowMultipleClaimsArr[0],\n          rarity: rarityArr[0].toString(),\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const getMinted = await multicall(nftFarm, [{ address: NftFarm, name: 'getMinted', params: [account] }])\n\n        // console.log('getMinted', getMinted)\n\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getToInt(getMinted[0][3])\n        const prices = getFromWayArray(getMinted[0][4])\n        const myMints = getToInt(getMinted[0][5])\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        let nftMap: BunnyMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\n\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n          myMints,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport epicNftFarm from 'config/abi/epicNftFarm.json'\nimport { EpicNftFarm } from 'config/constants/epic'\nimport multicall from 'utils/multicall'\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype BunnyMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  epicHasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  myEpicMints: number[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: BunnyMap\n\n  allowMultipleClaims: boolean\n  rarity: string\n  priceMultiplier: number\n  maxMintPerNft: number\n  tokenPerBurn: number\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const EpicProviderContext = createContext<Context | null>(null)\n\nconst EpicProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    epicHasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    rarity: '',\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n    tokenPerBurn: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n    myEpicMints: [],\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n\n          allowMultipleClaimsArr,\n          rarityArr,\n          priceMultiplierArr,\n          maxMintPerNftArr,\n          tokenPerBurnArr,\n        ] = await multicall(epicNftFarm, [\n          { address: EpicNftFarm, name: 'startBlockNumber' },\n          { address: EpicNftFarm, name: 'endBlockNumber' },\n          { address: EpicNftFarm, name: 'countBurnt' },\n          { address: EpicNftFarm, name: 'totalSupplyDistributed' },\n          { address: EpicNftFarm, name: 'currentDistributedSupply' },\n          { address: EpicNftFarm, name: 'allowMultipleClaims' },\n          { address: EpicNftFarm, name: 'rarity' },\n          { address: EpicNftFarm, name: 'priceMultiplier' },\n          { address: EpicNftFarm, name: 'maxMintPerNft' },\n          { address: EpicNftFarm, name: 'tokenPerBurn' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBurnt]: [BigNumber] = countBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBurnt: countBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          allowMultipleClaims: allowMultipleClaimsArr[0],\n          rarity: rarityArr[0].toString(),\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const getMinted = await multicall(epicNftFarm, [{ address: EpicNftFarm, name: 'getMinted', params: [account] }])\n\n        // console.log('getMinted', getMinted)\n\n        const epicHasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getToInt(getMinted[0][3])\n        const prices = getFromWayArray(getMinted[0][4])\n        const myEpicMints = getToInt(getMinted[0][5])\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        let nftMap: BunnyMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\n\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          epicHasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n          myEpicMints,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <EpicProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </EpicProviderContext.Provider>\n  )\n}\n\nexport default EpicProvider\n","import React, { useMemo, useState, useContext } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport { EpicProviderContext } from '../../contexts/EpicProvider'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  vladPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, vladPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const { myMints, hasClaimed } = useContext(NftProviderContext)\n  const { myEpicMints, epicHasClaimed } = useContext(EpicProviderContext)\n  let mustHaveNft = 0\n\n  if (hasClaimed && farm.mustHaveNft === 1) {\n    for (let index = 0; index < 3; index++) {\n      const haveNft = myMints[hasClaimed.indexOf(index)]\n      if (haveNft !== undefined && haveNft !== 0) {\n        mustHaveNft = haveNft\n      }\n    }\n  } else if (hasClaimed && farm.mustHaveNft === 2) {\n    for (let index = 3; index < 6; index++) {\n      const haveNft = myMints[hasClaimed.indexOf(index)]\n      if (haveNft !== undefined && haveNft !== 0) {\n        mustHaveNft = haveNft\n      }\n    }\n  } else if (epicHasClaimed && farm.mustHaveNft === 3) {\n    for (let index = 0; index < 3; index++) {\n      const haveNft = myEpicMints[epicHasClaimed.indexOf(index)]\n      if (haveNft !== undefined && haveNft !== 0) {\n        console.log(farm.lpSymbol, haveNft)\n        mustHaveNft = haveNft\n      }\n    }\n  } else if (farm.mustHaveNft === 0) {\n    mustHaveNft = 1\n  }\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly\n    ? farm.tokenSymbol.toLowerCase()\n    : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.VLAD) {\n      return vladPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [vladPrice, bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 2 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'ALIFE'\n  const farmAPY =\n    farm.apy &&\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'ALIFE' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text>{farm.depositFeeBP ? farm.depositFeeBP / 100 : '0'}%</Text>\n      </Flex>\n\n      {mustHaveNft > 0 && <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />}\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly\n              ? `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text> {TranslateString(699, 'Staked only')}</Text>\n      </ToggleWrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  @media (max-width: 767px) {\n    margin-right: 0px;\n  }\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React, { useEffect, useCallback, useState, useContext } from 'react'\nimport styled from 'styled-components'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePriceVladBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\nimport NftProvider from './contexts/NftProvider'\nimport EpicProvider from './contexts/EpicProvider'\n\nexport interface FarmsProps {\n  tokenMode?: boolean\n}\n\nconst CustomA = styled.a`\n  color: white;\n`\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const vladPrice = usePriceVladBusd()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { tokenMode } = farmsProps\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter(\n    (farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X' && farm.lpSymbol !== 'BNB-BUSD LP',\n  )\n  const inactiveFarms = farmsLP.filter(\n    (farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X' && farm.lpSymbol !== 'BNB-BUSD LP',\n  )\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.tokenPerBlock || 1)\n          .times(new BigNumber(farm.poolWeight))\n          .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice)\n        }\n\n        if (totalValue.comparedTo(0) > 0) {\n          apy = apy.div(totalValue)\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          vladPrice={vladPrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, vladPrice, ethereum],\n  )\n\n  return (\n    <EpicProvider>\n      <NftProvider>\n        <Page>\n          <Heading as=\"h1\" size=\"xxl\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n            ALIFE FARMING HAS STARTED\n          </Heading>\n\n          <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} />\n          <div>\n            <Divider />\n            <FlexLayout>\n              <Route exact path={`${path}`}>\n                {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n              </Route>\n              <Route exact path={`${path}/history`}>\n                {farmsList(inactiveFarms, true)}\n              </Route>\n            </FlexLayout>\n          </div>\n          <Image src=\"/images/alife/8.png\" alt=\"illustration\" width={1352} height={587} responsive />\n        </Page>\n      </NftProvider>\n    </EpicProvider>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}