{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","hooks/useWeb3.ts","hooks/useContract.ts","hooks/useBlock.ts","config/constants/newnfts.ts","config/constants/index.ts","views/MyNewCollection/utils/contracts.ts","views/MyNewCollection/contexts/NftProvider.tsx","views/MyNewCollection/components/InfoRow.tsx","views/MyNewCollection/components/TransferNftModal.tsx","views/MyNewCollection/components/NftTable.tsx","views/MyNewCollection/components/NftProgressSimple.tsx","views/MyNewCollection/components/NftInfo.tsx","views/MyNewCollection/index.tsx"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","useContract","abi","address","contractOptions","eth","Contract","contract","setContract","useERC20","erc20","useCake","getCakeAddress","useRabbitMintingFarm","nftFarm","usePancakeRabbits","nft","useNFTFarmV2Contract","nftFarmV2","useLottery","lottery","getLotteryAddress","useMasterchef","masterChef","getMasterChefAddress","useSousChef","id","config","poolsConfig","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","process","useBlock","BlockContext","NftFarm","NFT","AMOUNT_TO_CLAIM","Nfts","name","metadata","description","previewImage","originalImage","fileType","blurImage","sortOrder","nftId","tokenAmount","tokenSupply","nftFarmContract","nftContract","rarity","farmsConfig","filter","farm","isCommunity","map","tokenSymbol","getNftContract","nftAbi","getContract","getNewNftContract","getFromWayArray","v","array","t","i","push","fromWei","toString","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","nftTableData","isApproved","state","setState","account","currentBlock","a","prevState","error","console","fetchContractData","newNftContract","multicall","params","getMinted","methods","call","isApprovedForAll","getTokenIdAndNftId","index","tokenOfOwnerByIndex","tokenId","getNftId","getNftData","tradeId","nftDetailLink","nftPreviewImage","nfts","nftName","tokenIdPromises","nftTablePromises","forEach","getTradesByNftIdAndUser","tradeIds","log","isArray","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","canBurnNft","Provider","value","getTokenIds","reInitialize","InfoRow","styled","div","Value","Text","ModalContent","Actions","Label","label","theme","colors","TransferNftModal","tokenIds","onSuccess","onDismiss","isLoading","setIsLoading","values","setValues","setError","TranslateString","NFTFarmV2Contract","handleConfirm","utils","isAddress","transfer","send","from","on","title","color","mb","htmlFor","type","placeholder","onChange","evt","target","inputValue","isWarning","disabled","fullWidth","variant","onClick","NftTable","isOpen","requestedApproval","setRequestedApproval","setIsApprovedStatus","onTransfer","useCallback","isDataFetched","err","handleApprove","setApprovalForAll","handleSuccess","columns","dataIndex","render","record","style","fontWeight","fontSize","src","alt","width","height","objectFit","borderRadius","key","as","Link","to","bunnyId","ModalWrapper","onPresentTransferModal","mt","dataSource","marginTop","NftProgressSimple","NftInfo","mediaQueries","sm","StyledHero","textSubtle","StyledNotFound","CustomButton","Button","GoldenButton","Nft","useHistory","Page","size"],"mappings":"2JAGMA,EAAgB,UASTC,EAAiB,SAACC,EAA0BC,EAAuBC,GAC9E,IAAMC,EAAmBH,EAAaI,MAAK,SAACC,GAC1C,OAAOA,EAAYC,KAAKC,WAAaN,KAEvC,GAAIE,EAAkB,CACpB,IAAMK,EAAmBL,EAAiBG,KAAKG,KAE/C,OADyBD,EAAiBE,SAAS,KAb1B,SAACP,EAA0BD,GACtD,IAAMS,EAAkBb,EAAcc,KAAKT,GAAkB,GAEvDU,EAAuBX,EAASY,MAAM,KAAK,GACjD,OAAOX,EAAiBY,QAAQJ,EAAiBE,GAWtCG,CAAqBR,EAAkBN,GAEzCM,EAET,OAAON,GCNMe,IAdC,WACd,IAAQjB,EAAiBkB,qBAAWC,KAA5BnB,aAER,OAAO,SAACC,EAAuBC,GAC7B,MAAwB,UAApBF,EAAa,GACRE,EAELF,EAAaoB,OAAS,EACjBrB,EAAeC,EAAcC,EAAeC,GAE9CA,K,uWCPLmB,EAAUC,cACVC,EAAe,IAAIC,IAAKC,UAAUC,aAAaL,EAAS,CAAEM,QAAS,MAsB1DC,EAfC,WACd,IAAQC,EAAyCC,cAAzCD,SACFE,EAASC,iBAAOH,GACtB,EAAwBI,mBAAS,IAAIT,IAAKK,GAAYN,IAAtD,mBAAOW,EAAP,KAAaC,EAAb,KASA,OAPAC,qBAAU,WACJP,IAAaE,EAAOM,UACtBF,EAAQ,IAAIX,IAAKK,GAAYN,IAC7BQ,EAAOM,QAAUR,KAElB,CAACA,IAEGK,G,gHCTHI,EAAc,SAACC,EAAcC,EAAiBC,GAClD,IAAMP,EAAON,IACb,EAAgCK,mBAAS,IAAIC,EAAKQ,IAAIC,SAASJ,EAAKC,EAASC,IAA7E,mBAAOG,EAAP,KAAiBC,EAAjB,KAMA,OAJAT,qBAAU,WACRS,EAAY,IAAIX,EAAKQ,IAAIC,SAASJ,EAAKC,EAASC,MAC/C,CAACF,EAAKC,EAASC,EAAiBP,IAE5BU,GAYIE,EAAW,SAACN,GAEvB,OAAOF,EADUS,EACYP,IAGlBQ,EAAU,WACrB,OAAOF,EAASG,gBAGLC,EAAuB,SAACV,GAEnC,OAAOF,EADmBa,EACYX,IAG3BY,EAAoB,SAACZ,GAEhC,OAAOF,EADQe,EACYb,IAQhBc,EAAuB,SAACd,GAEnC,OAAOF,EADYiB,EACYf,IAGpBgB,EAAa,WAExB,OAAOlB,EADKmB,EACYC,gBAQbC,EAAgB,WAE3B,OAAOrB,EADKsB,EACYC,gBAGbC,EAAc,SAACC,GAC1B,IAAMC,EAASC,IAAY7D,MAAK,SAAC8D,GAAD,OAAUA,EAAKC,SAAWJ,KACpDK,EAASJ,EAAOK,eAAiBC,IAAaC,QAAUC,EAAcC,EAE5E,OAAOnC,EADK8B,EACYJ,EAAOU,gBAAgBC,O,iCCtFjD,oBAQeC,IALE,WAEf,OADsB1D,qBAAW2D,O,iCCFnC,sGAAO,IAAMC,EAAU,6CACVC,EAAM,6CACNC,EAAkB,KAkNhBC,IAhNK,CAClB,CACEC,KAAM,sBACNC,SAAU,oCACVC,YAAa,gFACbC,aAAc,kCACdC,cACE,2GACFC,SAAU,MACVC,UAAW,GACXC,UAAW,EACXC,MAAO,IACPC,YAAa,GACbC,YAAa,KACbC,gBAAiB,6CACjBC,YAAa,6CACbC,OAAQ,QAEV,CACEb,KAAM,oBACNC,SAAU,kCACVC,YAAa,2FACbC,aAAc,gCACdC,cACE,yGACFC,SAAU,MACVC,UAAW,GACXC,UAAW,EACXC,MAAO,IACPC,YAAa,GACbC,YAAa,KACbC,gBAAiB,6CACjBC,YAAa,6CACbC,OAAQ,QAEV,CACEb,KAAM,iBACNC,SAAU,4BACVC,YACE,6HACFC,aAAc,0BACdC,cAAe,mGACfC,SAAU,MACVC,UAAW,GACXC,UAAW,EACXC,MAAO,IACPC,YAAa,GACbC,YAAa,KACbC,gBAAiB,6CACjBC,YAAa,6CACbC,OAAQ,QAEV,CACEb,KAAM,wBACNC,SAAU,GACVC,YAAa,kGACbC,aAAc,gCACdC,cACE,8GACFC,SAAU,MACVC,UAAW,GACXC,UAAW,EACXC,MAAO,IACPC,YAAa,IACbC,YAAa,IACbC,gBAAiB,6CACjBC,YAAa,6CACbC,OAAQ,QAEV,CACEb,KAAM,eACNC,SAAU,GACVC,YACE,6HACFC,aAAc,4BACdC,cACE,0GACFC,SAAU,MACVC,UAAW,GACXC,UAAW,EACXC,MAAO,IACPC,YAAa,IACbC,YAAa,IACbC,gBAAiB,6CACjBC,YAAa,6CACbC,OAAQ,QAEV,CACEb,KAAM,gBACNC,SAAU,GACVC,YAAa,uFACbC,aAAc,4BACdC,cACE,0GACFC,SAAU,MACVC,UAAW,GACXC,UAAW,EACXC,MAAO,IACPC,YAAa,IACbC,YAAa,IACbC,gBAAiB,6CACjBC,YAAa,6CACbC,OAAQ,QAEV,CACEb,KAAM,gBACNC,SAAU,GACVC,YAAa,uFACbC,aAAc,4BACdC,cACE,0GACFC,SAAU,MACVC,UAAW,GACXC,UAAW,EACXC,MAAO,IACPC,YAAa,IACbC,YAAa,IACbC,gBAAiB,6CACjBC,YAAa,6CACbC,OAAQ,QAEV,CACEb,KAAM,gBACNC,SAAU,GACVC,YAAa,uFACbC,aAAc,4BACdC,cACE,0GACFC,SAAU,MACVC,UAAW,GACXC,UAAW,EACXC,MAAO,IACPC,YAAa,IACbC,YAAa,IACbC,gBAAiB,6CACjBC,YAAa,6CACbC,OAAQ,QAEV,CACEb,KAAM,gBACNC,SAAU,GACVC,YAAa,uFACbC,aAAc,4BACdC,cACE,0GACFC,SAAU,MACVC,UAAW,GACXC,UAAW,EACXC,MAAO,IACPC,YAAa,IACbC,YAAa,IACbC,gBAAiB,6CACjBC,YAAa,6CACbC,OAAQ,QAEV,CACEb,KAAM,gBACNC,SAAU,GACVC,YAAa,uFACbC,aAAc,4BACdC,cACE,0GACFC,SAAU,MACVC,UAAW,GACXC,UAAW,EACXC,MAAO,IACPC,YAAa,IACbC,YAAa,IACbC,gBAAiB,6CACjBC,YAAa,6CACbC,OAAQ,aAEV,CACEb,KAAM,gBACNC,SAAU,GACVC,YAAa,uFACbC,aAAc,4BACdC,cACE,0GACFC,SAAU,MACVC,UAAW,GACXC,UAAW,EACXC,MAAO,IACPC,YAAa,IACbC,YAAa,IACbC,gBAAiB,6CACjBC,YAAa,6CACbC,OAAQ,aAEV,CACEb,KAAM,gBACNC,SAAU,GACVC,YAAa,uFACbC,aAAc,4BACdC,cACE,0GACFC,SAAU,MACVC,UAAW,GACXC,UAAW,EACXC,MAAO,IACPC,YAAa,IACbC,YAAa,IACbC,gBAAiB,6CACjBC,YAAa,6CACbC,OAAQ,e,w3tCChNWC,IAAYC,QAAO,SAACC,GAAD,OAAUA,EAAKC,eAAaC,KAAI,SAACF,GAAD,OAAUA,EAAKG,gB,sp0BCY5EC,EAAiB,SAAC7D,GAC7B,IAAM8D,EAASlD,EACf,OAAOmD,YAAYD,EAAQxB,IAAKtC,IAGrBgE,EAAoB,SAAChE,GAChC,IAAM8D,EAASpD,EACf,OAAOqD,YAAYD,EAAQzB,IAASrC,IAQzBiE,EAAkB,SAACC,GAC9B,IAAKA,EAAG,MAAO,GAGf,IAFA,IAAMC,EAAQ,GACRC,EAAIF,EAAEvF,OACH0F,EAAI,EAAGA,EAAID,EAAGC,IAChBH,EAAEG,GAGLF,EAAMG,KAAKC,kBAAQL,EAAEG,GAAGG,WAAY,UAFpCL,EAAMG,KAAK,GAKf,OAAOH,GAGIM,EAAa,SAACP,GACzB,IAAKA,EAAG,MAAO,GACf,IAAMC,EAAQ,GACd,IAAKD,EAAG,MAAO,GAEf,IADA,IAAME,EAAIF,EAAEvF,OACH0F,EAAI,EAAGA,EAAID,EAAGC,IAChBH,EAAEG,GAGLF,EAAMG,KAAKI,SAASR,EAAEG,GAAGG,aAFzBL,EAAMG,KAAK,GAKf,OAAOH,GAGIQ,EAAW,SAACT,GACvB,IAAMC,EAAQ,GACd,IAAKD,EAAG,MAAO,GAEf,IADA,IAAME,EAAIF,EAAEvF,OACH0F,EAAI,EAAGA,EAAID,EAAGC,IAChBH,EAAEG,GAGLF,EAAMG,KAAKM,WAAWV,EAAEG,GAAGG,aAF3BL,EAAMG,KAAK,GAKf,OAAOH,G,OClBIU,EAAqBC,wBAA8B,MAuPjDC,EArPiC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3CC,EAAY1F,kBAAO,GACzB,EAA0BC,mBAAgB,CACxC0F,eAAe,EACfC,WAAY,GACZC,UAAW,GACXC,WAAY,EACZC,iBAAkB,EAClBC,eAAgB,EAChBC,uBAAwB,EACxBC,yBAA0B,EAC1BC,UAAW,EACXC,OAAQ,GAERC,qBAAqB,EACrBtC,OAAQ,GACRuC,gBAAiB,EACjBC,cAAe,EACfC,aAAc,EAEdC,QAAS,GACTC,aAAc,GACdC,OAAQ,GACRC,QAAS,GACTC,aAAc,GACdC,YAAY,IAvBd,mBAAOC,EAAP,KAAcC,EAAd,KAyBQC,EAAYnH,cAAZmH,QACFC,EAAetE,cAEb+C,EAAkBoB,EAAlBpB,cAGRvF,qBAAU,YACe,uCAAG,sBAAA+G,EAAA,sDACxB,IAiCEH,GAAS,SAACI,GAAD,mBAAC,eACLA,GADI,IAEPzB,eAAe,OAYjB,MAAO0B,GACPC,QAAQD,MAAM,mBAAoBA,GAjDZ,2CAAH,qDAqDvBE,KACC,CAAC5B,EAAeqB,IAGnB5G,qBAAU,WAwHJ6G,GAvHmB,uCAAG,gEAAAE,EAAA,sEAEhBrD,EAAcQ,IAEdkD,EAAiB/C,IAJD,SAMEgD,YAAUlG,EAAW,CAAC,CAAEf,QAASsC,IAASI,KAAM,YAAawE,OAAQ,CAACT,MANxE,cAMhBU,EANgB,OAQhB/B,EAAa+B,EAAU,GAAG,GAC1BlB,EAAUvB,EAAWyC,EAAU,GAAG,IAClC9B,EAAY8B,EAAU,GAAG,GACzBjB,EAAetB,EAASuC,EAAU,GAAG,IACrChB,EAASjC,EAAgBiD,EAAU,GAAG,IACtCf,EAAUxB,EAASuC,EAAU,GAAG,IAbhB,UAsBE7D,EAAY8D,QAAQzB,UAAUc,GAASY,OAtBzC,eAsBhB1B,EAtBgB,iBAwBGrC,EAAY8D,QAAQE,iBAAiBb,EAASnE,KAAS+E,OAxB1D,WAwBhBf,EAxBgB,OA0BlBV,EAAiB,GAEjBS,EAAe,KAIfV,EAAY,GAhCM,iBAkEpB,IAjCM4B,EAjCc,+BAAAZ,EAAA,MAiCO,WAAOa,GAAP,eAAAb,EAAA,+EAEDrD,EAAY8D,QAAQK,oBAAoBhB,EAASe,GAAOH,OAFvD,cAEjBK,EAFiB,gBAGHpE,EAAY8D,QAAQO,SAASD,GAASL,OAHnC,uCAKhB,CAAC1C,SAAS+C,EAAS,MALH,2DAOhB,MAPgB,0DAjCP,sDA4CdE,EA5Cc,+BAAAjB,EAAA,MA4CD,WAAOkB,EAAiBhH,GAAxB,mBAAA8F,EAAA,sEAEPmB,EAFO,sBAEwBjH,GAC/BkH,EAAkBC,IAAKvE,QAAO,SAAC3F,GAAD,OAAU+C,IAAQ/C,EAAKoF,SAAOU,KAAI,SAAC9F,GAAD,OAAUA,EAAK+E,gBAC/EoF,EAAUD,IAAKvE,QAAO,SAAC3F,GAAD,OAAU+C,IAAQ/C,EAAKoF,SAAOU,KAAI,SAAC9F,GAAD,OAAUA,EAAK4E,QAJhE,kBAMN,CACLmF,UACAI,UACAF,kBACAD,gBACA5E,MAAOrC,IAXI,yDAeR,MAfQ,yDA5CC,wDA+DdqH,EAAkB,GAClBC,EAAmB,GAEhB7D,EAAI,EAAGA,EAAIqB,EAAWrB,IAC7B4D,EAAgB3D,KAAKgD,EAAmBjD,IAnEtB,OAsEpB0D,IAAKI,QAAL,uCAAa,WAAOvH,GAAP,eAAA8F,EAAA,sEACYK,EAAeI,QAAQiB,wBAAwB5B,EAAS5F,EAAIqC,OAAOmE,OAD/E,OACLiB,EADK,OAEXxB,QAAQyB,IAAI,WAAYD,GACrBE,kBAAQF,IAAaA,EAAS1J,OAAS,GACxC0J,EAASF,SAAQ,SAACP,GAChBM,EAAiB5D,KAAKqD,EAAWjD,SAASkD,EAAS,IAAKhH,EAAIqC,WALrD,2CAAb,uDAtEoB,UAgFgBuF,QAAQC,IAAIR,GAhF5B,eAgFdS,EAhFc,iBAiFCF,QAAQC,IAAIP,GAjFb,QAiFpB9B,EAjFoB,OAqFpBT,EAAS+C,EAAsBC,QAAO,SAACC,EAAOC,GAC5C,IAAKA,EACH,OAAOD,EAGT,kBAAyBC,EAAzB,GAAO5F,EAAP,KAAcwE,EAAd,KAEA,OAAO,2BACFmB,GADL,kBAEG3F,EAAQ2F,EAAM3F,GAAN,sBAAmB2F,EAAM3F,IAAzB,CAAiCwE,IAAW,CAACA,OAEvD,IAhGiB,QAmGtBlB,GAAS,SAACI,GAAD,mBAAC,eACLA,GADI,IAEPzB,eAAe,EACfC,aACAC,YACAM,YACAC,SAEAK,UACAC,eACAC,SACAC,UACAC,eACAC,kBAhHoB,kDAmHtBQ,QAAQD,MAAM,mBAAd,MAnHsB,0DAAH,oDAwHrBE,KAED,CAAC5B,EAAesB,EAASD,IAE5B5G,qBAAU,WACR,OAAO,WACLsF,EAAUrF,SAAU,KAErB,CAACqF,IAEJ,IAAM6D,EAAarC,GAAgBH,EAAMf,eAgBzC,OACE,cAACV,EAAmBkE,SAApB,CAA6BC,MAAK,2BAAO1C,GAAP,IAAcwC,aAAYG,YAhB1C,SAAChG,GAAD,OAAmBqD,EAAMX,OAAO1C,IAgBuBiG,aAVtD,WAIfjE,EAAUrF,SACZ2G,GAAS,SAACI,GAAD,mBAAC,eAAoBA,GAArB,IAAgCzB,eAAe,UAK1D,SACGF,K,kBC7RQmE,EANCC,IAAOC,IAAV,yGCgBPC,EAAQF,YAAOG,IAAPH,CAAH,iDAILI,EAAeJ,IAAOC,IAAV,oDAIZI,EAAUL,IAAOC,IAAV,0GAMPK,EAAQN,IAAOO,MAAV,0GACA,qBAAGC,MAAkBC,OAAO7L,QAwGxB8L,GAlG2C,SAAC,GAA6C,IAA3ClJ,EAA0C,EAA1CA,IAAKmJ,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UACrF,EAAkCzK,oBAAS,GAA3C,mBAAO0K,EAAP,KAAkBC,EAAlB,KACA,EAA4B3K,mBAAS,CACnCO,QAAS,GACT0H,QAASsC,EAAS,GAClBnC,QAAShH,EAAIgH,UAHf,mBAAOwC,EAAP,KAAeC,EAAf,KAKA,EAA0B7K,mBAAS,MAAnC,mBAAOoH,EAAP,KAAc0D,EAAd,KACMC,EAAkB/L,cAChBgI,EAAYnH,cAAZmH,QAEFgE,EAAoB3J,YAAqBwB,KAEzCoI,EAAa,uCAAG,4BAAA/D,EAAA,kEAEK3H,IAAK2L,MAAMC,UAAUP,EAAOrK,SAFjC,gBAKhBuK,EAASC,EAAgB,IAAK,wCALd,6BAOV3C,EAAUhH,EAAIgH,QAPJ,SAQV4C,EAAkBrD,QACrByD,SAAShD,EAASwC,EAAOrK,SACzB8K,KAAK,CAAEC,KAAMtE,IACbuE,GAAG,WAAW,WACbZ,GAAa,MAEdY,GAAG,WAAW,WACbd,IACAD,OAEDe,GAAG,SAAS,WACXlE,QAAQD,MAAMA,GACd0D,EAAS,0BACTH,GAAa,MArBD,yDAyBlBtD,QAAQD,MAAM,0BAAd,MAzBkB,0DAAH,qDAkCnB,OACE,eAAC,IAAD,CAAOoE,MAAOT,EAAgB,IAAK,gBAAiBN,UAAWA,EAA/D,UACE,eAACT,EAAD,WACG5C,GACC,cAAC,IAAD,CAAMqE,MAAM,UAAUC,GAAG,MAAzB,SACGtE,IAGL,eAAC,EAAD,WACE,eAAC,IAAD,WAAO2D,EAAgB,IAAK,gBAA5B,OACA,cAACjB,EAAD,wBAAe1I,EAAI6B,KAAnB,cAEF,eAACiH,EAAD,CAAOyB,QAAQ,kBAAf,UAAkCZ,EAAgB,IAAK,qBAAvD,OACA,cAAC,IAAD,CACEjJ,GAAG,kBACHmB,KAAK,UACL2I,KAAK,OACLC,YAAad,EAAgB,IAAK,iBAClCvB,MAAOoB,EAAOrK,QACduL,SAxBa,SAACC,GACpB,MAAoCA,EAAIC,OAAzBC,EAAf,EAAQzC,MAAmBvG,EAA3B,EAA2BA,KAC3B4H,EAAU,2BAAKD,GAAN,kBAAe3H,EAAOgJ,MAuBzBC,UAAW9E,EACX+E,SAAUzB,OAcd,eAACT,EAAD,WACE,cAAC,IAAD,CAAQmC,WAAS,EAACC,QAAQ,YAAYC,QAAS7B,EAA/C,SACGM,EAAgB,IAAK,YAExB,cAAC,IAAD,CACEqB,WAAS,EACTE,QAASrB,EACTkB,UAAWnF,GAAW0D,IAAcE,EAAOrK,QAH7C,SAKGwK,EAAgB,IAAK,oBC4EjBwB,GAjLE,WACf,MAA0BvM,mBAAS,CACjC0K,WAAW,EACX8B,QAAQ,EACR5F,aAAc,KAHhB,mBAAcG,GAAd,WAMQC,EAAYnH,cAAZmH,QACR,EAAkDhH,oBAAS,GAA3D,mBAAOyM,EAAP,KAA0BC,EAA1B,KACA,EAAgD1M,oBAAS,GAAzD,mBAAyB2M,GAAzB,WACA,EAAkC3M,oBAAS,GAA3C,mBAAkB2K,GAAlB,WAEA,EAA0B3K,mBAAS,MAAnC,mBAAc8K,GAAd,WACA,EAAmD7L,qBAAWoG,GAAtDuB,EAAR,EAAQA,aAAc8C,EAAtB,EAAsBA,aAAc7C,EAApC,EAAoCA,WAEpC1G,qBAAU,WACRwM,EAAoB9F,KACnB,CAACA,IAGJ,IAAMkE,EAAkB/L,cAElB4N,EAAaC,sBAAW,sBAAC,sBAAA3F,EAAA,sDAC7BH,GAAS,SAACI,GAAD,mBAAC,eAAoBA,GAArB,IAAgCuD,WAAW,OACpD,IACE3D,GAAS,SAACI,GAAD,mBAAC,eACLA,GADI,IAEPuD,WAAW,EACXoC,eAAe,EACflG,oBAEF,MAAOmG,GACP1F,QAAQyB,IAAIiE,GAVe,2CAY5B,CAACnG,IACE/C,EAAc1C,YAAkB2B,KAEhCkK,EAAgBH,sBAAW,uCAC/B,WAAO5E,GAAP,SAAAf,EAAA,6DACEG,QAAQyB,IAAI,UAAWb,GADzB,SAGIlB,GAAS,SAACI,GAAD,mBAAC,eAAoBA,GAArB,IAAgCuD,WAAW,OACpDgC,GAAqB,GACrBrF,QAAQyB,IAAI,YAAab,GAEzBZ,QAAQyB,IAAI,cAAejF,EAAahB,IAASoF,GAPrD,SAQUpE,EAAY8D,QACfsF,kBAAkBpK,IAAS,QAC3BwI,KAAK,CAAEC,KAAMtE,IACbuE,GAAG,WAAW,WACbZ,GAAa,MAEdY,GAAG,WAAW,WACblE,QAAQyB,IAAI,cAEbyC,GAAG,SAAS,WACXT,EAAS,0BACTH,GAAa,MAnBrB,OAqBI5D,GAAS,SAACI,GAAD,mBAAC,eACLA,GADI,IAEPuD,WAAW,EACXoC,eAAe,EACflG,oBAEF8C,IACAgD,GAAqB,GA5BzB,kDA8BIrF,QAAQD,MAAR,MA9BJ,0DAD+B,sDAkC/B,CAACR,EAAcI,EAASnD,EAAa6F,IAGjCwD,EAAgB,WACpBN,IACAlD,KAGIyD,EAAU,CACd,CACE3B,MAAO,WACP4B,UAAW,UACXC,OAAQ,SAAC7O,EAAM8O,GACb,OAAO,mBAAGC,MAAO,CAAEC,WAAY,IAAKC,SAAU,QAAvC,SAAkDH,EAAO9E,YAGpE,CACEgD,MAAO,oBACP4B,UAAW,kBACXC,OAAQ,SAAC7O,EAAM8O,GACb,OACE,8BACE,qBACEI,IAAG,sBAAiBJ,EAAOhF,iBAC3BqF,IAAI,UACJJ,MAAO,CAAEK,MAAO,QAASC,OAAQ,QAASC,UAAW,QAASC,aAAc,cAMtF,CACEvC,MAAO,WACP4B,UAAW,UACXY,IAAK,WAEP,CACExC,MAAO,cACP4B,UAAW,gBACXC,OAAQ,SAAC7O,EAAM8O,GAAP,OACN,cAAC,IAAD,CAAQW,GAAIC,IAAMC,GAAIb,EAAOjF,cAA7B,0BAIF2F,IAAK,iBAEP,CACExC,MAAO,eACP4B,UAAW,GACXC,OAAQ,SAAC7O,EAAM8O,GACb,IAAMlM,EAAM,CACV6B,KAAMqK,EAAO9E,QACbtF,SAAU,GACVC,YAAa,GACbE,cAAe,GACfD,aAAc,GACdE,SAAU,GACVC,UAAW,GACXC,UAAW,EACXC,MAAOyB,SAASoI,EAAO7J,OACvBC,YAAa,EACbC,YAAa,EACbC,gBAAiB,GACjBC,YAAa,GACbuK,QAAS,EACThG,QAASkF,EAAOlF,SAEZmC,EAAW,CAAC+C,EAAOrF,SACzB,EAAiCoG,YAC/B,cAAC,GAAD,CAAkBjN,IAAKA,EAAKmJ,SAAUA,EAAUC,UAAW0C,KADtDoB,EAAP,oBAGA,OAAIzH,EAEA,cAAC,IAAD,CACEuF,WAAS,EACTC,QAAQ,UACRkC,GAAG,OACHjC,QAAS,WACPgC,KALJ,SAQGvD,EAAgB,IAAK,cAK1B,cAAC,IAAD,CACEqB,WAAS,EACTC,QAAQ,UACRkC,GAAG,OACHjC,QAAS,WACPU,EAAc9H,SAASoI,EAAOrF,QAAS,MAEzCkE,SAAUM,EAPZ,sBAaJuB,IAAK,KAIT,OAAO,cAAC,IAAD,CAAOb,QAASA,EAASqB,WAAY5H,EAAc2G,MAAO,CAAEkB,UAAW,WCnLjEC,GAlBW,WACxB,IAAM3D,EAAkB/L,cAChBkH,EAAcjH,qBAAWoG,GAAzBa,UAER,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,EAAD,WACE,eAAC,IAAD,WAAO6E,EAAgB,IAAK,kBAA5B,OACA,cAAC,IAAD,UACE,iCAAS7E,cCQNyI,IAjBO/E,IAAOC,IAAV,mLAMf,qBAAGO,MAAkBwE,aAAaC,MAKtB,WACS5P,qBAAWoG,GAA1BiE,WAER,OAAO,cAAC,GAAD,MCRHwF,GAAalF,IAAOC,IAAV,8GACa,qBAAGO,MAAkBC,OAAO0E,cAKnDC,GAAiBpF,IAAOC,IAAV,4JAQdoF,GAAerF,YAAOsF,IAAPtF,CAAH,mDAIZuF,GAAevF,YAAOsF,IAAPtF,CAAH,k/BA+DHwF,UArCH,WACV,IAAMrE,EAAkB/L,cAChBgI,EAAYnH,cAAZmH,QACQqI,cAEhB,OAAIrI,EAEA,cAAC,EAAD,UACE,eAACsI,EAAA,EAAD,WACE,eAACR,GAAD,WACE,cAAC,IAAD,CAASb,GAAG,KAAKsB,KAAK,KAAK9D,MAAM,YAAYC,GAAG,OAAhD,gCAGA,cAACuD,GAAD,CAAc5C,QAAQ,SAASkC,GAAG,OAAlC,SACE,cAAC,IAAD,CAAMJ,GAAG,iBAAT,mCAEF,cAACgB,GAAD,CAAcZ,GAAG,OAAjB,SACE,cAAC,IAAD,CAAMJ,GAAG,qBAAT,kCAGJ,cAAC,GAAD,IACA,cAAC,GAAD,SAON,cAACmB,EAAA,EAAD,UACE,eAACN,GAAD,WACE,cAAC,IAAD,CAAUpB,MAAM,OAAOlC,GAAG,QAC1B,cAAC,IAAD,CAAMA,GAAG,OAAT,SAAiBX,EAAgB,IAAK","file":"static/js/11.1cce7553.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport erc20 from 'config/abi/erc20.json'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nftFarmV2 from 'config/abi/NftFarmV2.json'\nimport nft from 'config/abi/NFT.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = ifo as unknown as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = erc20 as unknown as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\n  return useContract(nftMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const nftAbi = nft as unknown as AbiItem\n  return useContract(nftAbi, address)\n}\n\nexport const useNewNFTFarmContract = (address: string) => {\n  const nftFarmAbi = nftFarm as unknown as AbiItem\n  return useContract(nftFarmAbi, address)\n}\n\nexport const useNFTFarmV2Contract = (address: string) => {\n  const nftFarmAbi = nftFarmV2 as unknown as AbiItem\n  return useContract(nftFarmAbi, address)\n}\n\nexport const useLottery = () => {\n  const abi = lottery as unknown as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = lotteryTicket as unknown as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = masterChef as unknown as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = rawAbi as unknown as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport default useContract\n","import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","import { Nft } from './types'\n\nexport const NftFarm = '0xEb3af3C7ECaD4927E6e650BFf0C3841d49E36c9B'\nexport const NFT = '0xa81ab2d03b9e3a62bdbb837d417a5e221f754e14'\nexport const AMOUNT_TO_CLAIM = '10'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Count Pepes Chocula',\n    metadata: 'tier-NFT-base-dark-chocolate.json',\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\n    previewImage: 'preview-base-dark-chocolate.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 0,\n    nftId: 100,\n    tokenAmount: 10,\n    tokenSupply: 2222,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Base',\n  },\n  {\n    name: 'Vlad Pepes Drakul',\n    metadata: 'tier-NFT-base-main-nopaint.json',\n    description: 'The legend behind the meme in all his original glory. Part of the base tier of Vlad NFTs',\n    previewImage: 'preview-base-main-nopaint.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWckPrzbjvf8jqUpdQ7jKLzdaSBTyPSV6x6obSUHHipqc?filename=NFT-base-main-nopaint.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 1,\n    nftId: 101,\n    tokenAmount: 10,\n    tokenSupply: 2222,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Base',\n  },\n  {\n    name: 'Pepes in Stone',\n    metadata: 'tier-NFT-base-marble.json',\n    description:\n      'The count has turned into a marble statue ready for display in the halls of Vladhalla. Part of the base tier of Vlad NFTs.',\n    previewImage: 'preview-base-marble.jpg',\n    originalImage: 'https://ipfs.io/ipfs/QmSnz85drLjCD4qNgaMwHFC6PFEkGrmYhM1LpHwZWpEWaQ?filename=NFT-base-marble.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 2,\n    nftId: 102,\n    tokenAmount: 10,\n    tokenSupply: 2222,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Base',\n  },\n  {\n    name: 'The path to Vladhalla',\n    metadata: '',\n    description: 'All who seek to find the path to Vladhalla must have strong hands along the way to immortality.',\n    previewImage: 'preview-path-to-vladhalla.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmQWAeV3aAWD2Kbvxmtt4H874AEf7M7N5FcBos4iZbkRcj?filename=NFT-rare-path-to-vladhalla.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 3,\n    nftId: 103,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Rare',\n  },\n  {\n    name: 'Painted Pepe',\n    metadata: '',\n    description:\n      'As an homage to the original Vlad Pepes Drakul this retains his painted face hang him in your gallery for eternal viewing.',\n    previewImage: 'preview-painted-pepes.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmRqe92vpppkNS2aihmdvswHstAiHAF4jC2KUAiec5LKKk?filename=NFT-rare-painted-pepes.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 4,\n    nftId: 104,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Rare',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 105,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Rare',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 106,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Epic',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 107,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Epic',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 108,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Epic',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 109,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Legendary',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 110,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Legendary',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 111,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Legendary',\n  },\n]\n\nexport default Nfts\n","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n","import { AbiItem, fromWei } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport nftFarm from 'config/abi/NftFarmV2.json'\nimport nft from 'config/abi/NFT.json'\nimport { NftFarm, NFT } from 'config/constants/newnfts'\nimport BigNumber from 'bignumber.js'\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\n}\n\nexport const getNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = nft as unknown as AbiItem\n  return getContract(nftAbi, NFT, contractOptions)\n}\n\nexport const getNewNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = nftFarm as unknown as AbiItem\n  return getContract(nftAbi, NftFarm, contractOptions)\n}\n\nexport const getFromWei = (v: any) => {\n  if (!v) return 0\n  return parseFloat(fromWei(v.toString(), 'ether'))\n}\n\nexport const getFromWayArray = (v: any) => {\n  if (!v) return []\n  const array = []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(fromWei(v[i].toString(), 'ether'))\n    }\n  }\n  return array\n}\n\nexport const getToFloat = (v: any) => {\n  if (!v) return []\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseInt(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport const getToInt = (v: any) => {\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseFloat(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport default getNftMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { isArray } from 'lodash'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport nftFarmV2 from 'config/abi/NftFarmV2.json'\nimport nfts, { NftFarm } from 'config/constants/newnfts'\nimport multicall from 'utils/multicall'\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray, getNewNftContract } from '../utils/contracts'\nimport { getUrlPartsInfo } from '../../../utils'\nimport getNftDetailData from '../../../utils/getNftDetailData'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype NftMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  myMints: number[]\n  nftTableData: any[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: NftMap\n\n  allowMultipleClaims: boolean\n  rarity: string\n  priceMultiplier: number\n  maxMintPerNft: number\n  tokenPerBurn: number,\n  isApproved: boolean\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    rarity: '',\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n    tokenPerBurn: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n    myMints: [],\n    nftTableData: [],\n    isApproved: false,\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        // const [\n        //   // startBlockNumberArr,\n        //   // endBlockNumberArr,\n        //   // countBurntArr,\n        //   // totalSupplyDistributedArr,\n        //   // currentDistributedSupplyArr,\n\n        //   // allowMultipleClaimsArr,\n        //   // rarityArr,\n        //   // priceMultiplierArr,\n        //   // maxMintPerNftArr,\n        //   // tokenPerBurnArr,\n        // ] = await multicall(nftFarm, [\n        //   // { address: NftFarm, name: 'startBlockNumber' },\n        //   // { address: NftFarm, name: 'endBlockNumber' },\n        //   // { address: NftFarm, name: 'countBurnt' },\n        //   // { address: NftFarm, name: 'totalSupplyDistributed' },\n        //   // { address: NftFarm, name: 'currentDistributedSupply' },\n        //   // { address: NftFarm, name: 'allowMultipleClaims' },\n        //   // { address: NftFarm, name: 'rarity' },\n        //   // { address: NftFarm, name: 'priceMultiplier' },\n        //   // { address: NftFarm, name: 'maxMintPerNft' },\n        //   // { address: NftFarm, name: 'tokenPerBurn' },\n        // ])\n\n        // TODO: Figure out why these are coming back as arrays\n        // const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        // const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        // const [countBurnt]: [BigNumber] = countBurntArr\n        // const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        // const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          // countBurnt: countBurnt.toNumber(),\n          // startBlockNumber: startBlockNumber.toNumber(),\n          // endBlockNumber: endBlockNumber.toNumber(),\n          // currentDistributedSupply: currentDistributedSupply.toNumber(),\n          // totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          // allowMultipleClaims: allowMultipleClaimsArr[0],\n          // rarity: rarityArr[0].toString(),\n          // priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\n          // maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\n          // tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const newNftContract = getNewNftContract()\n\n        const getMinted = await multicall(nftFarmV2, [{ address: NftFarm, name: 'getMinted', params: [account] }])\n\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getToInt(getMinted[0][3])\n        const prices = getFromWayArray(getMinted[0][4])\n        const myMints = getToInt(getMinted[0][5])\n\n        // console.log('hasClaimed', hasClaimed)\n        // console.log('amounts', amounts)\n        // console.log('ownerById', ownerById)\n        // console.log('maxMintByNft', maxMintByNft)\n        // console.log('prices', prices)\n        // console.log('myMints', myMints)\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        const isApproved = await nftContract.methods.isApprovedForAll(account, NftFarm).call()\n\n        let nftMap: NftMap = {}\n\n        let nftTableData = []\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndNftId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getNftId(tokenId).call()\n\n              return [parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const getNftData = async (tradeId: number, nft: number) => {\n            try {\n                const nftDetailLink = `/new-detail/${nft}`\n                const nftPreviewImage = nfts.filter((data) => nft === data.nftId).map((data) => data.previewImage)\n                const nftName = nfts.filter((data) => nft === data.nftId).map((data) => data.name)\n\n                return {\n                  tradeId,\n                  nftName,\n                  nftPreviewImage,\n                  nftDetailLink,\n                  nftId: nft\n                }\n              \n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n          const nftTablePromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndNftId(i))\n          }\n\n          nfts.forEach(async (nft) => {\n            const tradeIds = await newNftContract.methods.getTradesByNftIdAndUser(account, nft.nftId).call()\n            console.log(\"tradeIds\", tradeIds);\n            if(isArray(tradeIds) && tradeIds.length > 0) {\n              tradeIds.forEach((tradeId) => {\n                nftTablePromises.push(getNftData(parseInt(tradeId, 10), nft.nftId))  \n              })\n            }\n          });\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n          nftTableData = await Promise.all(nftTablePromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n          myMints,\n          nftTableData,\n          isApproved\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { NFT, NftFarm } from 'config/constants/newnfts'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { useNFTFarmV2Contract } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n// tokenIds is retrieved dynamically from contracts.\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [values, setValues] = useState({\n    address: '',\n    tokenId: tokenIds[0],\n    tradeId: nft.tradeId\n  })\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  const NFTFarmV2Contract = useNFTFarmV2Contract(NftFarm)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(values.address)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        const tradeId = nft.tradeId;\n        await NFTFarmV2Contract.methods\n          .transfer(tradeId, values.address)\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue, name } = evt.target\n    setValues({ ...values, [name]: inputValue })\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={values.address}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n        {/* <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Token ID')}:</Label>\n        <Input\n          id=\"tokenId\"\n          name=\"tokenId\"\n          type=\"number\"\n          placeholder={TranslateString(999, 'Enter tokenId')}\n          value={values.tokenId}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        /> */}\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          fullWidth\n          onClick={handleConfirm}\n          disabled={!account || isLoading || !values.address}\n        >\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback, useEffect } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n  ModalWrapper,\n  LogoIcon,\n} from '@pancakeswap-libs/uikit'\n\nimport { Link } from 'react-router-dom'\nimport { Table } from 'antd'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport useI18n from 'hooks/useI18n'\nimport { NftFarm, NFT } from 'config/constants/newnfts'\nimport orderBy from 'lodash/orderBy'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport TransferNftModal from './TransferNftModal'\nimport { getNftContract } from '../utils/contracts'\n\nconst NftTable = () => {\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: true,\n    nftTableData: [],\n  })\n\n  const { account } = useWallet()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const [isApprovedStatus, setIsApprovedStatus] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n\n  const [error, setError] = useState(null)\n  const { nftTableData, reInitialize, isApproved } = useContext(NftProviderContext)\n\n  useEffect(() => {\n    setIsApprovedStatus(isApproved);\n  }, [isApproved]);\n\n\n  const TranslateString = useI18n()\n\n  const onTransfer = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isLoading: true }))\n    try {\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        nftTableData,\n      }))\n    } catch (err) {\n      console.log(err)\n    }\n  }, [nftTableData])\n  const nftContract = usePancakeRabbits(NFT)\n\n  const handleApprove = useCallback(\n    async (tokenId) => {\n      console.log('tokenId', tokenId)\n      try {\n        setState((prevState) => ({ ...prevState, isLoading: true }))\n        setRequestedApproval(true)\n        console.log('onApprove', tokenId)\n\n        console.log('nftContract', nftContract, NftFarm, tokenId)\n        await nftContract.methods\n          .setApprovalForAll(NftFarm, 'true')\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            console.log('receipt')\n          })\n          .on('error', () => {\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n        setState((prevState) => ({\n          ...prevState,\n          isLoading: false,\n          isDataFetched: true,\n          nftTableData,\n        }))\n        reInitialize()\n        setRequestedApproval(false)\n      } catch (e) {\n        console.error(e)\n      }\n    },\n    [nftTableData, account, nftContract, reInitialize],\n  )\n\n  const handleSuccess = () => {\n    onTransfer()\n    reInitialize()\n  }\n\n  const columns = [\n    {\n      title: 'NFT Name',\n      dataIndex: 'nftName',\n      render: (text, record) => {\n        return <p style={{ fontWeight: 600, fontSize: '18px' }}>{record.nftName}</p>\n      },\n    },\n    {\n      title: 'NFT preview Image',\n      dataIndex: 'nftPreviewImage',\n      render: (text, record) => {\n        return (\n          <div>\n            <img\n              src={`images/nfts/${record.nftPreviewImage}`}\n              alt=\"preview\"\n              style={{ width: '100px', height: '100px', objectFit: 'cover', borderRadius: '25px' }}\n            />\n          </div>\n        )\n      },\n    },\n    {\n      title: 'Trade ID',\n      dataIndex: 'tradeId',\n      key: 'tradeId',\n    },\n    {\n      title: 'NFT Details',\n      dataIndex: 'nftDetailLink',\n      render: (text, record) => (\n        <Button as={Link} to={record.nftDetailLink}>\n          View Detail\n        </Button>\n      ),\n      key: 'nftDetailLink',\n    },\n    {\n      title: 'Transfer NFT',\n      dataIndex: '',\n      render: (text, record) => {\n        const nft = {\n          name: record.nftName,\n          metadata: '',\n          description: '',\n          originalImage: '',\n          previewImage: '',\n          fileType: '',\n          blurImage: '',\n          sortOrder: 1,\n          nftId: parseInt(record.nftId),\n          tokenAmount: 0,\n          tokenSupply: 0,\n          nftFarmContract: '',\n          nftContract: '',\n          bunnyId: 0,\n          tradeId: record.tradeId\n        }\n        const tokenIds = [record.tokenId]\n        const [onPresentTransferModal] = ModalWrapper(\n          <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n        )\n        if (isApproved) {\n          return (\n            <Button\n              fullWidth\n              variant=\"primary\"\n              mt=\"24px\"\n              onClick={() => {\n                onPresentTransferModal()\n              }}\n            >\n              {TranslateString(999, 'Transfer')}\n            </Button>\n          )\n        }\n        return (\n          <Button\n            fullWidth\n            variant=\"primary\"\n            mt=\"24px\"\n            onClick={() => {\n              handleApprove(parseInt(record.tokenId, 10))\n            }}\n            disabled={requestedApproval}\n          >\n            Approve\n          </Button>\n        )\n      },\n      key: '',\n    },\n  ]\n\n  return <Table columns={columns} dataSource={nftTableData} style={{ marginTop: '25px' }} />\n}\n\nexport default NftTable\n","import React, { useContext } from 'react'\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst NftProgressSimple = () => {\n  const TranslateString = useI18n()\n  const { balanceOf } = useContext(NftProviderContext)\n\n  return (\n    <Card>\n      <CardBody>\n        <InfoRow>\n          <Text>{TranslateString(999, 'My Ticket NFTs')}:</Text>\n          <Text>\n            <strong>{balanceOf}</strong>\n          </Text>\n        </InfoRow>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgressSimple\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NftProgress from './NftProgress'\nimport NftProgressSimple from './NftProgressSimple'\nimport StatusCard from './StatusCard'\n\nconst StyledNtfInfo = styled.div`\n  align-items: start;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst NftInfo = () => {\n  const { canBurnNft } = useContext(NftProviderContext)\n\n  return <NftProgressSimple />\n}\n\nexport default NftInfo\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, LogoIcon, Text, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport { useHistory, Link } from 'react-router-dom'\nimport HowItWorks from './components/HowItWorks'\nimport NftList from './components/NftList'\nimport NftTable from './components/NftTable'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst StyledNotFound = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 64px);\n  justify-content: center;\n`\n\nconst CustomButton = styled(Button)`\n  margin-right: 20px;\n`\n\nconst GoldenButton = styled(Button)`\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px rgba(139, 66, 8, 1),\n    inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n  background-image: linear-gradient(160deg, #a54e07, #b47e11, #fef1a2, #bc881b, #a54e07);\n  border: 1px solid #a55d07;\n  color: rgb(120, 50, 5);\n  text-shadow: 0 2px 2px rgba(250, 227, 133, 1);\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  background-size: 100% 100%;\n  background-position: center;\n\n  &:focus,\n  &:hover {\n    background-size: 150% 150%;\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23), inset 0 -2px 5px 1px #b17d10,\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n    border: 1px solid rgba(165, 93, 7, 0.6);\n    color: rgba(120, 50, 5, 0.8);\n  }\n  &:active {\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px #b17d10,\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n  }\n`\n\nconst Nft = () => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const history = useHistory()\n\n  if (account) {\n    return (\n      <NftProvider>\n        <Page>\n          <StyledHero>\n            <Heading as=\"h1\" size=\"xl\" color=\"secondary\" mb=\"24px\">\n              My NFT Collections\n            </Heading>\n            <CustomButton variant=\"subtle\" mt=\"24px\">\n              <Link to=\"/my-collection\">Mint NFTs (Genesis)</Link>\n            </CustomButton>\n            <GoldenButton mt=\"24px\">\n              <Link to=\"/my-new-collection\">Mint NFTs (New)</Link>\n            </GoldenButton>\n          </StyledHero>\n          <NftInfo />\n          <NftTable />\n        </Page>\n      </NftProvider>\n    )\n  }\n\n  return (\n    <Page>\n      <StyledNotFound>\n        <LogoIcon width=\"64px\" mb=\"8px\" />\n        <Text mb=\"16px\">{TranslateString(999, 'Empty Collection')}</Text>\n      </StyledNotFound>\n    </Page>\n  )\n}\n\nexport default Nft\n"],"sourceRoot":""}