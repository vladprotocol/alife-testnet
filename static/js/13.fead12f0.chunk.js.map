{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","hooks/useWeb3.ts","hooks/useContract.ts","config/constants/newnfts.ts","hooks/useBlock.ts","config/constants/index.ts","views/MyNewCollection/utils/contracts.ts","views/MyNewCollection/contexts/NftProvider.tsx","views/MyNewCollection/components/InfoRow.tsx","views/MyNewCollection/components/TransferNftModal.tsx","views/MyNewCollection/components/NftTable.tsx","views/MyNewCollection/components/NftProgressSimple.tsx","views/MyNewCollection/components/NftInfo.tsx","views/MyNewCollection/index.tsx"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","useContract","abi","address","contractOptions","eth","Contract","contract","setContract","useERC20","erc20","useCake","getCakeAddress","useRabbitMintingFarm","nftFarm","usePancakeRabbits","nft","useNFTFarmV2Contract","nftFarmV2","useLottery","lottery","getLotteryAddress","useMasterchef","masterChef","getMasterChefAddress","useSousChef","id","config","poolsConfig","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","process","NftFarm","NFT","AMOUNT_TO_CLAIM","Nfts","name","metadata","description","previewImage","originalImage","fileType","blurImage","sortOrder","nftId","tokenAmount","tokenSupply","nftFarmContract","nftContract","rarity","useBlock","BlockContext","farmsConfig","filter","farm","isCommunity","map","tokenSymbol","getNftContract","nftAbi","getContract","getNewNftContract","getFromWayArray","v","array","t","i","push","fromWei","toString","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","nftTableData","isApproved","state","setState","account","currentBlock","a","prevState","error","console","fetchContractData","newNftContract","multicall","params","getMinted","methods","call","isApprovedForAll","getTokenIdAndNftId","index","tokenOfOwnerByIndex","tokenId","getNftId","getNftData","tradeId","nftDetailLink","nftPreviewImage","nfts","nftName","tokenIdPromises","nftTablePromises","forEach","getTradesByNftIdAndUser","tradeIds","log","isArray","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","canBurnNft","Provider","value","getTokenIds","reInitialize","InfoRow","styled","div","Value","Text","ModalContent","Actions","Label","label","theme","colors","TransferNftModal","tokenIds","onSuccess","onDismiss","isLoading","setIsLoading","values","setValues","setError","TranslateString","NFTFarmV2Contract","handleConfirm","utils","isAddress","transfer","send","from","on","title","color","mb","htmlFor","type","placeholder","onChange","evt","target","inputValue","isWarning","disabled","fullWidth","variant","onClick","NftTable","isOpen","requestedApproval","setRequestedApproval","setIsApprovedStatus","onTransfer","useCallback","isDataFetched","err","handleApprove","setApprovalForAll","handleSuccess","columns","dataIndex","render","record","style","fontWeight","fontSize","src","alt","width","height","objectFit","borderRadius","key","as","Link","to","bunnyId","ModalWrapper","onPresentTransferModal","mt","dataSource","marginTop","NftProgressSimple","NftInfo","mediaQueries","sm","StyledHero","textSubtle","StyledNotFound","CustomButton","Button","CustomLink","GoldenButton","Nft","useHistory","Page","size"],"mappings":"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","file":"static/js/13.fead12f0.chunk.js","sourcesContent":["import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\n\r\nconst variableRegex = /%(.*?)%/\r\n\r\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\r\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\r\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\r\n  const fallbackValueAtIndex = fallback.split(' ')[0]\r\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\r\n}\r\n\r\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\r\n  const foundTranslation = translations.find((translation) => {\r\n    return translation.data.stringId === translationId\r\n  })\r\n  if (foundTranslation) {\r\n    const translatedString = foundTranslation.data.text\r\n    const includesVariable = translatedString.includes('%')\r\n    if (includesVariable) {\r\n      return replaceDynamicString(translatedString, fallback)\r\n    }\r\n    return translatedString\r\n  }\r\n  return fallback\r\n}\r\n\r\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\r\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\r\n// @see https://reactjs.org/docs/hooks-rules.html\r\nexport const TranslateString = (translationId: number, fallback: string) => {\r\n  const { translations } = useContext(TranslationsContext)\r\n  if (translations[0] === 'error') {\r\n    return fallback\r\n  }\r\n  if (translations.length > 0) {\r\n    return getTranslation(translations, translationId, fallback)\r\n  }\r\n  return fallback\r\n}\r\n","import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\nimport { getTranslation } from '../utils/translateTextHelpers'\r\n\r\nconst useI18n = () => {\r\n  const { translations } = useContext(TranslationsContext)\r\n\r\n  return (translationId: number, fallback: string) => {\r\n    if (translations[0] === 'error') {\r\n      return fallback\r\n    }\r\n    if (translations.length > 0) {\r\n      return getTranslation(translations, translationId, fallback)\r\n    }\r\n    return fallback\r\n  }\r\n}\r\n\r\nexport default useI18n\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the ethereum provider change\r\n */\r\nconst useWeb3 = () => {\r\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\r\n  const refEth = useRef(ethereum)\r\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\r\n\r\n  useEffect(() => {\r\n    if (ethereum !== refEth.current) {\r\n      setweb3(new Web3(ethereum || httpProvider))\r\n      refEth.current = ethereum\r\n    }\r\n  }, [ethereum])\r\n\r\n  return web3\r\n}\r\n\r\nexport default useWeb3\r\n","import { useEffect, useState } from 'react'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\r\nimport { poolsConfig } from 'config/constants'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport ifo from 'config/abi/ifo.json'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport nftFarm from 'config/abi/NftFarm.json'\r\nimport nftFarmV2 from 'config/abi/NftFarmV2.json'\r\nimport nft from 'config/abi/NFT.json'\r\nimport lottery from 'config/abi/lottery.json'\r\nimport lotteryTicket from 'config/abi/lotteryNft.json'\r\nimport masterChef from 'config/abi/masterchef.json'\r\nimport sousChef from 'config/abi/sousChef.json'\r\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\r\n\r\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = useWeb3()\r\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\r\n\r\n  useEffect(() => {\r\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\r\n  }, [abi, address, contractOptions, web3])\r\n\r\n  return contract\r\n}\r\n\r\n/**\r\n * Helper hooks to get specific contracts (by ABI)\r\n */\r\n\r\nexport const useIfoContract = (address: string) => {\r\n  const ifoAbi = ifo as unknown as AbiItem\r\n  return useContract(ifoAbi, address)\r\n}\r\n\r\nexport const useERC20 = (address: string) => {\r\n  const erc20Abi = erc20 as unknown as AbiItem\r\n  return useContract(erc20Abi, address)\r\n}\r\n\r\nexport const useCake = () => {\r\n  return useERC20(getCakeAddress())\r\n}\r\n\r\nexport const useRabbitMintingFarm = (address: string) => {\r\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\r\n  return useContract(nftMintingFarmAbi, address)\r\n}\r\n\r\nexport const usePancakeRabbits = (address: string) => {\r\n  const nftAbi = nft as unknown as AbiItem\r\n  return useContract(nftAbi, address)\r\n}\r\n\r\nexport const useNewNFTFarmContract = (address: string) => {\r\n  const nftFarmAbi = nftFarm as unknown as AbiItem\r\n  return useContract(nftFarmAbi, address)\r\n}\r\n\r\nexport const useNFTFarmV2Contract = (address: string) => {\r\n  const nftFarmAbi = nftFarmV2 as unknown as AbiItem\r\n  return useContract(nftFarmAbi, address)\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const abi = lottery as unknown as AbiItem\r\n  return useContract(abi, getLotteryAddress())\r\n}\r\n\r\nexport const useLotteryTicket = () => {\r\n  const abi = lotteryTicket as unknown as AbiItem\r\n  return useContract(abi, getLotteryTicketAddress())\r\n}\r\n\r\nexport const useMasterchef = () => {\r\n  const abi = masterChef as unknown as AbiItem\r\n  return useContract(abi, getMasterChefAddress())\r\n}\r\n\r\nexport const useSousChef = (id) => {\r\n  const config = poolsConfig.find((pool) => pool.sousId === id)\r\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\r\n  const abi = rawAbi as unknown as AbiItem\r\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\r\n}\r\n\r\nexport default useContract\r\n","import { Nft } from './types'\r\n\r\nexport const NftFarm = '0x8B977A00937b24F04DD664d788196E0C34421f08'\r\nexport const NFT = '0xa81ab2d03b9e3a62bdbb837d417a5e221f754e14'\r\nexport const AMOUNT_TO_CLAIM = '10'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Pink Spider',\r\n    metadata: 'tier-NFT-base-dark-chocolate.json',\r\n    description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas eget vehicula massa. Donec fringilla a nibh sed euismod. Nam vitae erat vitae nisl pulvinar lacinia. Ut vitae ultrices diam.',\r\n    previewImage: 'pink-spider-min.png',\r\n    originalImage:\r\n      'https://gateway.pinata.cloud/ipfs/QmZRVNLGYbjh2DaPuqcaQi51wXSjaxzGjAg24WviM5N8Tj',\r\n    fileType: 'png',\r\n    blurImage: '',\r\n    sortOrder: 0,\r\n    nftId: 100,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Base',\r\n  },\r\n  {\r\n    name: 'Pink Fox',\r\n    metadata: 'tier-NFT-base-main-nopaint.json',\r\n    description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas eget vehicula massa. Donec fringilla a nibh sed euismod. Nam vitae erat vitae nisl pulvinar lacinia. Ut vitae ultrices diam.',\r\n    previewImage: 'pink-fox-min.png',\r\n    originalImage:\r\n      'https://gateway.pinata.cloud/ipfs/QmeDaRUcV3bp5oa6juNYYrV9G7o2zcKFcrRBJmPJxe6BQL',\r\n    fileType: 'png',\r\n    blurImage: '',\r\n    sortOrder: 1,\r\n    nftId: 101,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Base',\r\n  },\r\n  {\r\n    name: 'Pink Bunny',\r\n    metadata: 'tier-NFT-base-marble.json',\r\n    description:\r\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas eget vehicula massa. Donec fringilla a nibh sed euismod. Nam vitae erat vitae nisl pulvinar lacinia. Ut vitae ultrices diam.',\r\n    previewImage: 'pink-bunny-min.png',\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmWh9xNZvyhzQWFp4xFEjbBBXPBuZhYnQufL2HwRBae9Gn',\r\n    fileType: 'png',\r\n    blurImage: '',\r\n    sortOrder: 2,\r\n    nftId: 102,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Base',\r\n  },\r\n  {\r\n    name: 'Pink Dragon',\r\n    metadata: '',\r\n    description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas eget vehicula massa. Donec fringilla a nibh sed euismod. Nam vitae erat vitae nisl pulvinar lacinia. Ut vitae ultrices diam.',\r\n    previewImage: 'pink-dragon-min.png',\r\n    originalImage:\r\n      'https://gateway.pinata.cloud/ipfs/QmUBgkzR5rSLiWH9pgDACayjAQLcCfB8Csn81PVbTdB86t',\r\n    fileType: 'png',\r\n    blurImage: '',\r\n    sortOrder: 3,\r\n    nftId: 103,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Base',\r\n  },\r\n  {\r\n    name: 'Pink B&B',\r\n    metadata: '',\r\n    description:\r\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas eget vehicula massa. Donec fringilla a nibh sed euismod. Nam vitae erat vitae nisl pulvinar lacinia. Ut vitae ultrices diam.',\r\n    previewImage: 'bull-and-bear-min.png',\r\n    originalImage:\r\n      'https://gateway.pinata.cloud/ipfs/QmQ8MkJZzAQYNnUmzVXFmBQAZTXSjjvdvGVF3f16HP7LLW',\r\n    fileType: 'png',\r\n    blurImage: '',\r\n    sortOrder: 4,\r\n    nftId: 104,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Base',\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import { useContext } from 'react'\r\nimport { BlockContext } from 'contexts/BlockContext'\r\n\r\nconst useBlock = () => {\r\n  const block: number = useContext(BlockContext)\r\n  return block\r\n}\r\n\r\nexport default useBlock\r\n","import farmsConfig from './farms'\r\n\r\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\r\n\r\nexport { farmsConfig, communityFarms }\r\nexport { default as poolsConfig } from './pools'\r\nexport { default as ifosConfig } from './ifo'\r\n","import { AbiItem, fromWei } from 'web3-utils'\r\nimport { getContract } from 'utils/web3'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport nftFarm from 'config/abi/NftFarmV2.json'\r\nimport nft from 'config/abi/NFT.json'\r\nimport { NftFarm, NFT } from 'config/constants/newnfts'\r\nimport BigNumber from 'bignumber.js'\r\n// TODO: Figure out how to add current account to contracts to write methods can be used\r\n\r\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\r\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nft as unknown as AbiItem\r\n  return getContract(nftAbi, NFT, contractOptions)\r\n}\r\n\r\nexport const getNewNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getFromWei = (v: any) => {\r\n  if (!v) return 0\r\n  return parseFloat(fromWei(v.toString(), 'ether'))\r\n}\r\n\r\nexport const getFromWayArray = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(fromWei(v[i].toString(), 'ether'))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToFloat = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseInt(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToInt = (v: any) => {\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseFloat(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport default getNftMintingContract\r\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { isArray } from 'lodash'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useBlock from 'hooks/useBlock'\r\nimport nftFarmV2 from 'config/abi/NftFarmV2.json'\r\nimport nfts, { NftFarm } from 'config/constants/newnfts'\r\nimport multicall from 'utils/multicall'\r\nimport {\r\n  getNftContract,\r\n  getFromWei,\r\n  getToFloat,\r\n  getToInt,\r\n  getFromWayArray,\r\n  getNewNftContract,\r\n} from '../utils/contracts'\r\nimport { getUrlPartsInfo } from '../../../utils'\r\nimport getNftDetailData from '../../../utils/getNftDetailData'\r\n\r\ninterface NftProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\ntype NftMap = {\r\n  [key: number]: number[]\r\n}\r\n\r\ntype State = {\r\n  isInitialized: boolean\r\n  hasClaimed: number[]\r\n  ownerById: number[]\r\n  amounts: number[]\r\n  maxMintByNft: number[]\r\n  prices: number[]\r\n  myMints: number[]\r\n  nftTableData: any[]\r\n  countBurnt: number\r\n  endBlockNumber: number\r\n  startBlockNumber: number\r\n  totalSupplyDistributed: number\r\n  currentDistributedSupply: number\r\n  balanceOf: number\r\n  nftMap: NftMap\r\n\r\n  allowMultipleClaims: boolean\r\n  rarity: string\r\n  priceMultiplier: number\r\n  maxMintPerNft: number\r\n  tokenPerBurn: number\r\n  isApproved: boolean\r\n}\r\n\r\ntype Context = {\r\n  canBurnNft: boolean\r\n  getTokenIds: (nftId: number) => number[]\r\n  reInitialize: () => void\r\n} & State\r\n\r\nexport const NftProviderContext = createContext<Context | null>(null)\r\n\r\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\r\n  const isMounted = useRef(true)\r\n  const [state, setState] = useState<State>({\r\n    isInitialized: false,\r\n    hasClaimed: [],\r\n    ownerById: [],\r\n    countBurnt: 0,\r\n    startBlockNumber: 0,\r\n    endBlockNumber: 0,\r\n    totalSupplyDistributed: 0,\r\n    currentDistributedSupply: 0,\r\n    balanceOf: 0,\r\n    nftMap: {},\r\n\r\n    allowMultipleClaims: true,\r\n    rarity: '',\r\n    priceMultiplier: 0,\r\n    maxMintPerNft: 0,\r\n    tokenPerBurn: 0,\r\n\r\n    amounts: [],\r\n    maxMintByNft: [],\r\n    prices: [],\r\n    myMints: [],\r\n    nftTableData: [],\r\n    isApproved: false,\r\n  })\r\n  const { account } = useWallet()\r\n  const currentBlock = useBlock()\r\n\r\n  const { isInitialized } = state\r\n\r\n  // Static data\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        // const [\r\n        //   // startBlockNumberArr,\r\n        //   // endBlockNumberArr,\r\n        //   // countBurntArr,\r\n        //   // totalSupplyDistributedArr,\r\n        //   // currentDistributedSupplyArr,\r\n\r\n        //   // allowMultipleClaimsArr,\r\n        //   // rarityArr,\r\n        //   // priceMultiplierArr,\r\n        //   // maxMintPerNftArr,\r\n        //   // tokenPerBurnArr,\r\n        // ] = await multicall(nftFarm, [\r\n        //   // { address: NftFarm, name: 'startBlockNumber' },\r\n        //   // { address: NftFarm, name: 'endBlockNumber' },\r\n        //   // { address: NftFarm, name: 'countBurnt' },\r\n        //   // { address: NftFarm, name: 'totalSupplyDistributed' },\r\n        //   // { address: NftFarm, name: 'currentDistributedSupply' },\r\n        //   // { address: NftFarm, name: 'allowMultipleClaims' },\r\n        //   // { address: NftFarm, name: 'rarity' },\r\n        //   // { address: NftFarm, name: 'priceMultiplier' },\r\n        //   // { address: NftFarm, name: 'maxMintPerNft' },\r\n        //   // { address: NftFarm, name: 'tokenPerBurn' },\r\n        // ])\r\n\r\n        // TODO: Figure out why these are coming back as arrays\r\n        // const [startBlockNumber]: [BigNumber] = startBlockNumberArr\r\n        // const [endBlockNumber]: [BigNumber] = endBlockNumberArr\r\n        // const [countBurnt]: [BigNumber] = countBurntArr\r\n        // const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n        // const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          // countBurnt: countBurnt.toNumber(),\r\n          // startBlockNumber: startBlockNumber.toNumber(),\r\n          // endBlockNumber: endBlockNumber.toNumber(),\r\n          // currentDistributedSupply: currentDistributedSupply.toNumber(),\r\n          // totalSupplyDistributed: totalSupplyDistributed.toNumber(),\r\n          // allowMultipleClaims: allowMultipleClaimsArr[0],\r\n          // rarity: rarityArr[0].toString(),\r\n          // priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\r\n          // maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\r\n          // tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    fetchContractData()\r\n  }, [isInitialized, setState])\r\n\r\n  // Data from the contract that needs an account\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const nftContract = getNftContract()\r\n\r\n        const newNftContract = getNewNftContract()\r\n\r\n        const getMinted = await multicall(nftFarmV2, [{ address: NftFarm, name: 'getMinted', params: [account] }])\r\n\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n        const ownerById = getMinted[0][2]\r\n        const maxMintByNft = getToInt(getMinted[0][3])\r\n        const prices = getFromWayArray(getMinted[0][4])\r\n        const myMints = getToInt(getMinted[0][5])\r\n\r\n        // console.log('hasClaimed', hasClaimed)\r\n        // console.log('amounts', amounts)\r\n        // console.log('ownerById', ownerById)\r\n        // console.log('maxMintByNft', maxMintByNft)\r\n        // console.log('prices', prices)\r\n        // console.log('myMints', myMints)\r\n\r\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\r\n\r\n        const isApproved = await nftContract.methods.isApprovedForAll(account, NftFarm).call()\r\n\r\n        let nftMap: NftMap = {}\r\n\r\n        let nftTableData = []\r\n\r\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\r\n        // owned by the wallet, then the nftId's associated with the tokenIds\r\n        if (balanceOf > 0) {\r\n          const getTokenIdAndNftId = async (index: number) => {\r\n            try {\r\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\r\n              const nftId = await nftContract.methods.getNftId(tokenId).call()\r\n\r\n              return [parseInt(tokenId, 10)]\r\n            } catch (error) {\r\n              return null\r\n            }\r\n          }\r\n\r\n          const getNftData = async (tradeId: number, nft: number) => {\r\n            try {\r\n              const nftDetailLink = `/shibari-detail/${nft}`\r\n              const nftPreviewImage = nfts.filter((data) => nft === data.nftId).map((data) => data.previewImage)\r\n              const nftName = nfts.filter((data) => nft === data.nftId).map((data) => data.name)\r\n\r\n              return {\r\n                tradeId,\r\n                nftName,\r\n                nftPreviewImage,\r\n                nftDetailLink,\r\n                nftId: nft,\r\n              }\r\n            } catch (error) {\r\n              return null\r\n            }\r\n          }\r\n\r\n          const tokenIdPromises = []\r\n          const nftTablePromises = []\r\n\r\n          for (let i = 0; i < balanceOf; i++) {\r\n            tokenIdPromises.push(getTokenIdAndNftId(i))\r\n          }\r\n\r\n          nfts.forEach(async (nft) => {\r\n            const tradeIds = await newNftContract.methods.getTradesByNftIdAndUser(account, nft.nftId).call()\r\n            console.log('tradeIds', tradeIds)\r\n            if (isArray(tradeIds) && tradeIds.length > 0) {\r\n              tradeIds.forEach((tradeId) => {\r\n                nftTablePromises.push(getNftData(parseInt(tradeId, 10), nft.nftId))\r\n              })\r\n            }\r\n          })\r\n\r\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\r\n          nftTableData = await Promise.all(nftTablePromises)\r\n\r\n          // While improbable a wallet can own more than one of the same nft so the format is:\r\n          // { [nftId]: [array of tokenIds] }\r\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\r\n            if (!association) {\r\n              return accum\r\n            }\r\n\r\n            const [nftId, tokenId] = association\r\n\r\n            return {\r\n              ...accum,\r\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\r\n            }\r\n          }, {})\r\n        }\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          ownerById,\r\n          balanceOf,\r\n          nftMap,\r\n\r\n          amounts,\r\n          maxMintByNft,\r\n          prices,\r\n          myMints,\r\n          nftTableData,\r\n          isApproved,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchContractData()\r\n    }\r\n  }, [isInitialized, account, setState])\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false\r\n    }\r\n  }, [isMounted])\r\n\r\n  const canBurnNft = currentBlock <= state.endBlockNumber\r\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\r\n\r\n  /**\r\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\r\n   * For example when a transaction has been completed\r\n   */\r\n  const reInitialize = () => {\r\n    // Only attempt to re-initialize if the component is still mounted\r\n    // Transactions can take awhile so it is likely some users will navigate to another page\r\n    // before the transaction is finished\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\r\n      {children}\r\n    </NftProviderContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NftProvider\r\n","import styled from 'styled-components'\r\n\r\nconst InfoRow = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport default InfoRow\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Web3 from 'web3'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport { NFT, NftFarm } from 'config/constants/newnfts'\r\nimport { Nft } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useNFTFarmV2Contract } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface TransferNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst Label = styled.label`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  margin-top: 24px;\r\n`\r\n// tokenIds is retrieved dynamically from contracts.\r\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [values, setValues] = useState({\r\n    address: '',\r\n    tokenId: tokenIds[0],\r\n    tradeId: nft.tradeId,\r\n  })\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  const NFTFarmV2Contract = useNFTFarmV2Contract(NftFarm)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const isValidAddress = Web3.utils.isAddress(values.address)\r\n\r\n      if (!isValidAddress) {\r\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\r\n      } else {\r\n        const tradeId = nft.tradeId\r\n        await NFTFarmV2Contract.methods\r\n          .transfer(tradeId, values.address)\r\n          .send({ from: account })\r\n          .on('sending', () => {\r\n            setIsLoading(true)\r\n          })\r\n          .on('receipt', () => {\r\n            onDismiss()\r\n            onSuccess()\r\n          })\r\n          .on('error', () => {\r\n            console.error(error)\r\n            setError('Unable to transfer NFT')\r\n            setIsLoading(false)\r\n          })\r\n      }\r\n    } catch (err) {\r\n      console.error('Unable to transfer NFT:', err)\r\n    }\r\n  }\r\n\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value: inputValue, name } = evt.target\r\n    setValues({ ...values, [name]: inputValue })\r\n  }\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\r\n        <Input\r\n          id=\"transferAddress\"\r\n          name=\"address\"\r\n          type=\"text\"\r\n          placeholder={TranslateString(999, 'Paste address')}\r\n          value={values.address}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        />\r\n        {/* <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Token ID')}:</Label>\r\n        <Input\r\n          id=\"tokenId\"\r\n          name=\"tokenId\"\r\n          type=\"number\"\r\n          placeholder={TranslateString(999, 'Enter tokenId')}\r\n          value={values.tokenId}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        /> */}\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !values.address}>\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default TransferNftModal\r\n","import React, { useState, useContext, useCallback, useEffect } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Tag,\r\n  Button,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n  Text,\r\n  CardFooter,\r\n  useModal,\r\n  ModalWrapper,\r\n  LogoIcon,\r\n} from '@pancakeswap-libs/uikit'\r\n\r\nimport { Link } from 'react-router-dom'\r\nimport { Table } from 'antd'\r\nimport { usePancakeRabbits } from 'hooks/useContract'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { NftFarm, NFT } from 'config/constants/newnfts'\r\nimport orderBy from 'lodash/orderBy'\r\nimport NftCard from './NftCard'\r\nimport NftGrid from './NftGrid'\r\nimport { NftProviderContext } from '../contexts/NftProvider'\r\nimport TransferNftModal from './TransferNftModal'\r\nimport { getNftContract } from '../utils/contracts'\r\n\r\nconst NftTable = () => {\r\n  const [state, setState] = useState({\r\n    isLoading: false,\r\n    isOpen: true,\r\n    nftTableData: [],\r\n  })\r\n\r\n  const { account } = useWallet()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const [isApprovedStatus, setIsApprovedStatus] = useState(false)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const [error, setError] = useState(null)\r\n  const { nftTableData, reInitialize, isApproved } = useContext(NftProviderContext)\r\n\r\n  useEffect(() => {\r\n    setIsApprovedStatus(isApproved)\r\n  }, [isApproved])\r\n\r\n  const TranslateString = useI18n()\r\n\r\n  const onTransfer = useCallback(async () => {\r\n    setState((prevState) => ({ ...prevState, isLoading: true }))\r\n    try {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: false,\r\n        isDataFetched: true,\r\n        nftTableData,\r\n      }))\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  }, [nftTableData])\r\n  const nftContract = usePancakeRabbits(NFT)\r\n\r\n  const handleApprove = useCallback(\r\n    async (tokenId) => {\r\n      console.log('tokenId', tokenId)\r\n      try {\r\n        setState((prevState) => ({ ...prevState, isLoading: true }))\r\n        setRequestedApproval(true)\r\n        console.log('onApprove', tokenId)\r\n\r\n        console.log('nftContract', nftContract, NftFarm, tokenId)\r\n        await nftContract.methods\r\n          .setApprovalForAll(NftFarm, 'true')\r\n          .send({ from: account })\r\n          .on('sending', () => {\r\n            setIsLoading(true)\r\n          })\r\n          .on('receipt', () => {\r\n            console.log('receipt')\r\n          })\r\n          .on('error', () => {\r\n            setError('Unable to transfer NFT')\r\n            setIsLoading(false)\r\n          })\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isLoading: false,\r\n          isDataFetched: true,\r\n          nftTableData,\r\n        }))\r\n        reInitialize()\r\n        setRequestedApproval(false)\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    },\r\n    [nftTableData, account, nftContract, reInitialize],\r\n  )\r\n\r\n  const handleSuccess = () => {\r\n    onTransfer()\r\n    reInitialize()\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: 'NFT Name',\r\n      dataIndex: 'nftName',\r\n      render: (text, record) => {\r\n        return <p style={{ fontWeight: 600, fontSize: '18px' }}>{record.nftName}</p>\r\n      },\r\n    },\r\n    {\r\n      title: 'NFT preview Image',\r\n      dataIndex: 'nftPreviewImage',\r\n      render: (text, record) => {\r\n        return (\r\n          <div>\r\n            <img\r\n              src={`images/nfts/${record.nftPreviewImage}`}\r\n              alt=\"preview\"\r\n              style={{ width: '100px', height: '100px', objectFit: 'cover', borderRadius: '25px' }}\r\n            />\r\n          </div>\r\n        )\r\n      },\r\n    },\r\n    {\r\n      title: 'Trade ID',\r\n      dataIndex: 'tradeId',\r\n      key: 'tradeId',\r\n    },\r\n    {\r\n      title: 'NFT Details',\r\n      dataIndex: 'nftDetailLink',\r\n      render: (text, record) => (\r\n        <Button as={Link} to={record.nftDetailLink}>\r\n          View Detail\r\n        </Button>\r\n      ),\r\n      key: 'nftDetailLink',\r\n    },\r\n    {\r\n      title: 'Transfer NFT',\r\n      dataIndex: '',\r\n      render: (text, record) => {\r\n        const nft = {\r\n          name: record.nftName,\r\n          metadata: '',\r\n          description: '',\r\n          originalImage: '',\r\n          previewImage: '',\r\n          fileType: '',\r\n          blurImage: '',\r\n          sortOrder: 1,\r\n          nftId: parseInt(record.nftId),\r\n          tokenAmount: 0,\r\n          tokenSupply: 0,\r\n          nftFarmContract: '',\r\n          nftContract: '',\r\n          bunnyId: 0,\r\n          tradeId: record.tradeId,\r\n        }\r\n        const tokenIds = [record.tokenId]\r\n        const [onPresentTransferModal] = ModalWrapper(\r\n          <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\r\n        )\r\n        if (isApproved) {\r\n          return (\r\n            <Button\r\n              fullWidth\r\n              variant=\"primary\"\r\n              mt=\"24px\"\r\n              onClick={() => {\r\n                onPresentTransferModal()\r\n              }}\r\n            >\r\n              {TranslateString(999, 'Transfer')}\r\n            </Button>\r\n          )\r\n        }\r\n        return (\r\n          <Button\r\n            fullWidth\r\n            variant=\"primary\"\r\n            mt=\"24px\"\r\n            onClick={() => {\r\n              handleApprove(parseInt(record.tokenId, 10))\r\n            }}\r\n            disabled={requestedApproval}\r\n          >\r\n            Approve\r\n          </Button>\r\n        )\r\n      },\r\n      key: '',\r\n    },\r\n  ]\r\n\r\n  return <Table columns={columns} dataSource={nftTableData} style={{ marginTop: '25px' }} />\r\n}\r\n\r\nexport default NftTable\r\n","import React, { useContext } from 'react'\r\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { NftProviderContext } from '../contexts/NftProvider'\r\nimport InfoRow from './InfoRow'\r\n\r\nconst NftProgressSimple = () => {\r\n  const TranslateString = useI18n()\r\n  const { balanceOf } = useContext(NftProviderContext)\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody>\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'My Shibari NFTs')}:</Text>\r\n          <Text>\r\n            <strong>{balanceOf}</strong>\r\n          </Text>\r\n        </InfoRow>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NftProgressSimple\r\n","import React, { useContext } from 'react'\r\nimport styled from 'styled-components'\r\nimport { NftProviderContext } from '../contexts/NftProvider'\r\nimport NftProgress from './NftProgress'\r\nimport NftProgressSimple from './NftProgressSimple'\r\nimport StatusCard from './StatusCard'\r\n\r\nconst StyledNtfInfo = styled.div`\r\n  align-items: start;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-gap: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n`\r\n\r\nconst NftInfo = () => {\r\n  const { canBurnNft } = useContext(NftProviderContext)\r\n\r\n  return <NftProgressSimple />\r\n}\r\n\r\nexport default NftInfo\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, LogoIcon, Text, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport { useHistory, Link } from 'react-router-dom'\r\nimport HowItWorks from './components/HowItWorks'\r\nimport NftList from './components/NftList'\r\nimport NftTable from './components/NftTable'\r\nimport NftProvider from './contexts/NftProvider'\r\nimport NftInfo from './components/NftInfo'\r\n\r\nconst StyledHero = styled.div`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\r\n  margin-bottom: 24px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst StyledNotFound = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: calc(100vh - 64px);\r\n  justify-content: center;\r\n`\r\n\r\nconst CustomButton = styled(Button)`\r\n  margin-right: 20px;\r\n`\r\n\r\n\r\nconst CustomLink = styled(Link)`\r\n  font-family: 'Reggae One';\r\n`\r\n\r\nconst GoldenButton = styled(Button)`\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px rgba(139, 66, 8, 1),\r\n    inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n  background-image: linear-gradient(160deg, #a54e07, #b47e11, #fef1a2, #bc881b, #a54e07);\r\n  border: 1px solid #a55d07;\r\n  color: rgb(120, 50, 5);\r\n  text-shadow: 0 2px 2px rgba(250, 227, 133, 1);\r\n  cursor: pointer;\r\n  transition: all 0.2s ease-in-out;\r\n  background-size: 100% 100%;\r\n  background-position: center;\r\n\r\n  &:focus,\r\n  &:hover {\r\n    background-size: 150% 150%;\r\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23), inset 0 -2px 5px 1px #b17d10,\r\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n    border: 1px solid rgba(165, 93, 7, 0.6);\r\n    color: rgba(120, 50, 5, 0.8);\r\n  }\r\n  &:active {\r\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px #b17d10,\r\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n  }\r\n`\r\n\r\nconst Nft = () => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const history = useHistory()\r\n\r\n  if (account) {\r\n    return (\r\n      <NftProvider>\r\n        <Page>\r\n          <StyledHero>\r\n            <Heading as=\"h1\" size=\"xl\" color=\"secondary\" mb=\"24px\">\r\n              My NFT Collections\r\n            </Heading>\r\n            <CustomButton variant=\"subtle\" mt=\"24px\">\r\n              <CustomLink to=\"/my-collection\">Mint NFTs (Genesis)</CustomLink>\r\n            </CustomButton>\r\n            <GoldenButton mt=\"24px\">\r\n              Mint NFTs (Shibari)\r\n            </GoldenButton>\r\n          </StyledHero>\r\n          <NftInfo />\r\n          <NftTable />\r\n        </Page>\r\n      </NftProvider>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Page>\r\n      <StyledNotFound>\r\n        <LogoIcon width=\"64px\" mb=\"8px\" />\r\n        <Text mb=\"16px\">{TranslateString(999, 'Empty Collection')}</Text>\r\n      </StyledNotFound>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Nft\r\n"],"sourceRoot":""}