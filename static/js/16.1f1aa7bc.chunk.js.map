{"version":3,"sources":["config/constants/nfts.ts","utils/formatBalance.ts","hooks/useBlock.ts","utils/erc20.ts","hooks/useTokenBalance.ts","utils/callHelpers.ts","hooks/useApprove.ts","config/constants/legendary.ts","hooks/useAllowance.ts","views/LegendaryDetail/components/InfoRow.tsx","views/LegendaryDetail/components/Image.tsx","views/LegendaryDetail/utils/contracts.ts","views/LegendaryDetail/contexts/NftProvider.tsx","views/LegendaryDetail/components/ClaimNftModal.tsx","views/LegendaryDetail/components/BurnNftModal.tsx","views/LegendaryDetail/components/TransferNftModal.tsx","views/LegendaryDetail/components/NftCard/index.tsx","views/LegendaryDetail/index.tsx"],"names":["NftFarm","NFT","AMOUNT_TO_CLAIM","Nfts","name","metadata","description","previewImage","originalImage","fileType","blurImage","sortOrder","nftId","tokenAmount","tokenSupply","nftFarmContract","nftContract","getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","useBlock","useContext","BlockContext","getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","cakeContract","cakeABI","getCakeAddress","supply","fetchTotalSupply","useBurnedBalance","setBalance","bal","fetchBalance","useTokenBalance","useWallet","ethereum","fastRefresh","res","approve","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","useApprove","dispatch","useDispatch","useMasterchef","onApprove","useCallback","fetchFarmUserDataAsync","useNftApprove","tokenContract","spenderAddress","LegendaryNftFarm","useNftAllowance","dependency","setAllowance","console","log","fetch","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","href","target","rel","getNftContract","contractOptions","nftAbi","nft","getFromWayArray","v","array","t","length","i","push","fromWei","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","state","setState","currentBlock","multicall","epicNftFarm","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","error","fetchContractData","params","getMinted","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","fetchNonLoggedInContractData","current","canBurnNft","Provider","getTokenIds","reInitialize","Value","Text","ModalContent","Actions","ClaimNftModal","onSuccess","onDismiss","isLoading","setIsLoading","pendingTx","setPendingTx","setError","TranslateString","useI18n","nftMintingContract","useRabbitMintingFarm","contraToken","useERC20","getLifeAddress","cakeBalance","cakeInWallet","handleConfirm","mintNFT","title","color","mb","fullWidth","disabled","onClick","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","style","alignItems","display","checked","scale","onChange","ml","cursor","variant","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","utils","isAddress","transferFrom","htmlFor","id","type","placeholder","evt","inputValue","isWarning","Header","InfoBlock","Button","attrs","SmallCard","Card","CustomButton","NftCard","isOpen","nftCount","nftBurnCount","nftIndex","indexOf","MINTED","MAX_MINT","firstCharOfAccount","slice","lastCharOfAccount","loggedIn","MINTS","walletCanClaim","undefined","price","Math","round","isSupplyAvailable","walletOwnsNft","fetchDetails","ChevronUpIcon","ChevronDownIcon","isDataFetched","handleSuccess","useModal","onPresentClaimModal","onPresentTransferModal","isActive","height","width","loop","autoPlay","muted","kind","outline","mt","window","open","p","as","textAlign","StyledHero","textSubtle","StyledNotFound","CustomHeading","Heading","Detail","props","match","nft1","nfts","filter","Page","size"],"mappings":"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","file":"static/js/16.1f1aa7bc.chunk.js","sourcesContent":["import { Nft } from './types'\r\n\r\nexport const NftFarm = '0xaBa054F1437aEBEa43fB0804b734DdB3F39FB62F'\r\nexport const NFT = '0xA81Ab2D03b9E3a62BDBb837d417A5E221F754E14'\r\nexport const AMOUNT_TO_CLAIM = '10'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Count Pepes Chocula',\r\n    metadata: 'tier-NFT-base-dark-chocolate.json',\r\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-dark-chocolate.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 0,\r\n    nftId: 0,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Vlad Pepes Drakul',\r\n    metadata: 'tier-NFT-base-main-nopaint.json',\r\n    description: 'The legend behind the meme in all his original glory. Part of the base tier of Vlad NFTs',\r\n    previewImage: 'preview-base-main-nopaint.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWckPrzbjvf8jqUpdQ7jKLzdaSBTyPSV6x6obSUHHipqc?filename=NFT-base-main-nopaint.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 1,\r\n    nftId: 1,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Pepes in Stone',\r\n    metadata: 'tier-NFT-base-marble.json',\r\n    description:\r\n      'The count has turned into a marble statue ready for display in the halls of Vladhalla. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-marble.jpg',\r\n    originalImage: 'https://ipfs.io/ipfs/QmSnz85drLjCD4qNgaMwHFC6PFEkGrmYhM1LpHwZWpEWaQ?filename=NFT-base-marble.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 2,\r\n    nftId: 2,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'The path to Vladhalla',\r\n    metadata: '',\r\n    description: 'All who seek to find the path to Vladhalla must have strong hands along the way to immortality.',\r\n    previewImage: 'preview-path-to-vladhalla.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmQWAeV3aAWD2Kbvxmtt4H874AEf7M7N5FcBos4iZbkRcj?filename=NFT-rare-path-to-vladhalla.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 3,\r\n    nftId: 3,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Painted Pepe',\r\n    metadata: '',\r\n    description:\r\n      'As an homage to the original Vlad Pepes Drakul this retains his painted face hang him in your gallery for eternal viewing.',\r\n    previewImage: 'preview-painted-pepes.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmRqe92vpppkNS2aihmdvswHstAiHAF4jC2KUAiec5LKKk?filename=NFT-rare-painted-pepes.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 4,\r\n    nftId: 4,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 5,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import BigNumber from 'bignumber.js'\r\n\r\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\r\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\r\n  return displayBalance.toNumber()\r\n}\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\r\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\r\n}\r\n","import { useContext } from 'react'\r\nimport { BlockContext } from 'contexts/BlockContext'\r\n\r\nconst useBlock = () => {\r\n  const block: number = useContext(BlockContext)\r\n  return block\r\n}\r\n\r\nexport default useBlock\r\n","import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract(erc20 as unknown as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, account) => {\r\n  // shit code: hard fix for old CTK and BLK\r\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(0) })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n\r\n// Approve an NFT\r\nexport const useNftApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","import { Nft } from './types'\r\n\r\nexport const LegendaryNftFarm = '0x6a63AF63675D3c9D498DF43Aa163F9243E7b4646'\r\nexport const NFT = '0x3F7C7C24fFA2ceFfaACE11B39D5b8a575A4B0674'\r\nexport const AMOUNT_TO_CLAIM = '10'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Golden Pepes',\r\n    metadata: '',\r\n    description:\r\n      'For a brief period in time Pepe Drakul led a very powerful unit known as the 7 golden Vampires. He commissioned a bust made of the purest gold to commemorate his time with them.',\r\n    previewImage: 'preview-golden-pepes.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/Qmdv1t4kUa8YSP8rpZTXLKvpycnijWJdCSpjsN8sjArGx8?filename=NFT-legendary-pepes-gold.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 3,\r\n    nftId: 3,\r\n    tokenAmount: 1200,\r\n    tokenSupply: 6,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Immortality',\r\n    metadata: '',\r\n    description:\r\n      'Those who have ever held the Chalice of LIFE are granted Immortality. Do not fear eternal sleep/slumber, for it will not come for you.',\r\n    previewImage: 'preview-immortality.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmaHeTsV6AnhqWDAeBUvwmQbo7RC6bM1jQzVQUCQSLg9Bp?filename=NFT-legendary-immortality.png',\r\n    fileType: 'png',\r\n    blurImage: '',\r\n    sortOrder: 4,\r\n    nftId: 4,\r\n    tokenAmount: 1200,\r\n    tokenSupply: 6,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'The VladFather',\r\n    metadata: '',\r\n    description:\r\n      'His sceptre slammed into the marble floor with a crack, prompting the artist to begin. How many final breaths has that hand taken from his enemies? His eyes, wildly electric and filled with menace, and a stance that dares you to make your move. I don’t envy the one tasked with creating this portrait. Pepe Drakul has only ever posed for one drawing and this is it.',\r\n    previewImage: 'preview-the-vladfather.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmVEdevPc1nFLJrFQK4GsJtcS5486uaQE73mo7aKjw13ph?filename=NFT-legendary-vlad-father.png',\r\n    fileType: 'png',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 5,\r\n    tokenAmount: 1200,\r\n    tokenSupply: 6,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useCake, useLottery } from './useContract'\r\nimport { getAllowance } from '../utils/erc20'\r\n\r\n// Retrieve lottery allowance\r\nexport const useLotteryAllowance = () => {\r\n  const [allowance, setAllowance] = useState(new BigNumber(0))\r\n  const { account }: { account: string } = useWallet()\r\n  const lotteryContract = useLottery()\r\n  const cakeContract = useCake()\r\n\r\n  useEffect(() => {\r\n    const fetchAllowance = async () => {\r\n      const res = await getAllowance(cakeContract, lotteryContract, account)\r\n      setAllowance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && cakeContract && cakeContract) {\r\n      fetchAllowance()\r\n    }\r\n    const refreshInterval = setInterval(fetchAllowance, 10000)\r\n    return () => clearInterval(refreshInterval)\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return allowance\r\n}\r\n\r\n// Retrieve IFO allowance\r\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\r\n  const { account }: { account: string } = useWallet()\r\n  const [allowance, setAllowance] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\r\n        setAllowance(new BigNumber(res))\r\n      } catch (e) {\r\n        setAllowance(null)\r\n      }\r\n    }\r\n    fetch()\r\n  }, [account, spenderAddress, tokenContract, dependency])\r\n\r\n  return allowance\r\n}\r\n\r\n// Retrieve NFT allowance\r\nexport const useNftAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\r\n  const { account }: { account: string } = useWallet()\r\n  const [allowance, setAllowance] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\r\n        setAllowance(new BigNumber(res))\r\n      } catch (e) {\r\n        console.log(e.toString())\r\n        setAllowance(null)\r\n      }\r\n    }\r\n    fetch()\r\n  }, [account, spenderAddress, tokenContract, dependency])\r\n\r\n  return allowance\r\n}\r\n","import styled from 'styled-components'\r\n\r\nconst InfoRow = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport default InfoRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface ImageProps {\r\n  src: string\r\n  alt: string\r\n  originalLink?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  position: relative;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  padding-bottom: 100%;\r\n`\r\n\r\nconst StyledImage = styled.img`\r\n  position: absolute;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  transition: opacity 1s linear;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  border-radius: 32px 32px 0 0;\r\n`\r\n\r\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\r\n  const previewImage = <StyledImage src={src} alt={alt} />\r\n\r\n  return (\r\n    <Container>\r\n      {originalLink ? (\r\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\r\n          {previewImage}\r\n        </a>\r\n      ) : (\r\n        previewImage\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Image\r\n","import { AbiItem, fromWei } from 'web3-utils'\r\nimport { getContract } from 'utils/web3'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport nftFarm from 'config/abi/NftFarm.json'\r\nimport nft from 'config/abi/NFT.json'\r\nimport { NftFarm, NFT } from 'config/constants/nfts'\r\nimport BigNumber from 'bignumber.js'\r\n// TODO: Figure out how to add current account to contracts to write methods can be used\r\n\r\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\r\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nft as unknown as AbiItem\r\n  return getContract(nftAbi, NFT, contractOptions)\r\n}\r\n\r\nexport const getFromWei = (v: any) => {\r\n  if (!v) return 0\r\n  return parseFloat(fromWei(v.toString(), 'ether'))\r\n}\r\n\r\nexport const getFromWayArray = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(fromWei(v[i].toString(), 'ether'))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToFloat = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseInt(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToInt = (v: any) => {\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseFloat(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport default getNftMintingContract\r\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useBlock from 'hooks/useBlock'\r\nimport epicNftFarm from 'config/abi/epicNftFarm.json'\r\nimport { LegendaryNftFarm } from 'config/constants/legendary'\r\nimport multicall from 'utils/multicall'\r\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\r\n\r\ninterface NftProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\ntype BunnyMap = {\r\n  [key: number]: number[]\r\n}\r\n\r\ntype State = {\r\n  isInitialized: boolean\r\n  hasClaimed: number[]\r\n  ownerById: number[]\r\n  amounts: number[]\r\n  maxMintByNft: number[]\r\n  prices: number[]\r\n  myMints: number[]\r\n  countBurnt: number\r\n  endBlockNumber: number\r\n  startBlockNumber: number\r\n  totalSupplyDistributed: number\r\n  currentDistributedSupply: number\r\n  balanceOf: number\r\n  nftMap: BunnyMap\r\n\r\n  allowMultipleClaims: boolean\r\n  rarity: string\r\n  priceMultiplier: number\r\n  maxMintPerNft: number\r\n  tokenPerBurn: number\r\n}\r\n\r\ntype Context = {\r\n  canBurnNft: boolean\r\n  getTokenIds: (nftId: number) => number[]\r\n  reInitialize: () => void\r\n} & State\r\n\r\nexport const NftProviderContext = createContext<Context | null>(null)\r\n\r\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\r\n  const isMounted = useRef(true)\r\n  const [state, setState] = useState<State>({\r\n    isInitialized: false,\r\n    hasClaimed: [],\r\n    ownerById: [],\r\n    countBurnt: 0,\r\n    startBlockNumber: 0,\r\n    endBlockNumber: 0,\r\n    totalSupplyDistributed: 0,\r\n    currentDistributedSupply: 0,\r\n    balanceOf: 0,\r\n    nftMap: {},\r\n\r\n    allowMultipleClaims: true,\r\n    rarity: '',\r\n    priceMultiplier: 0,\r\n    maxMintPerNft: 0,\r\n    tokenPerBurn: 0,\r\n\r\n    amounts: [],\r\n    maxMintByNft: [],\r\n    prices: [],\r\n    myMints: [],\r\n  })\r\n  const { account } = useWallet()\r\n  const currentBlock = useBlock()\r\n\r\n  const { isInitialized } = state\r\n\r\n  // Static data\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const [\r\n          startBlockNumberArr,\r\n          endBlockNumberArr,\r\n          countBurntArr,\r\n          totalSupplyDistributedArr,\r\n          currentDistributedSupplyArr,\r\n\r\n          allowMultipleClaimsArr,\r\n          rarityArr,\r\n          priceMultiplierArr,\r\n          maxMintPerNftArr,\r\n          tokenPerBurnArr,\r\n        ] = await multicall(epicNftFarm, [\r\n          { address: LegendaryNftFarm, name: 'startBlockNumber' },\r\n          { address: LegendaryNftFarm, name: 'endBlockNumber' },\r\n          { address: LegendaryNftFarm, name: 'countBurnt' },\r\n          { address: LegendaryNftFarm, name: 'totalSupplyDistributed' },\r\n          { address: LegendaryNftFarm, name: 'currentDistributedSupply' },\r\n          { address: LegendaryNftFarm, name: 'allowMultipleClaims' },\r\n          { address: LegendaryNftFarm, name: 'rarity' },\r\n          { address: LegendaryNftFarm, name: 'priceMultiplier' },\r\n          { address: LegendaryNftFarm, name: 'maxMintPerNft' },\r\n          { address: LegendaryNftFarm, name: 'tokenPerBurn' },\r\n        ])\r\n\r\n        // TODO: Figure out why these are coming back as arrays\r\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\r\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\r\n        const [countBurnt]: [BigNumber] = countBurntArr\r\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          countBurnt: countBurnt.toNumber(),\r\n          startBlockNumber: startBlockNumber.toNumber(),\r\n          endBlockNumber: endBlockNumber.toNumber(),\r\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\r\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\r\n          allowMultipleClaims: allowMultipleClaimsArr[0],\r\n          rarity: rarityArr[0].toString(),\r\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\r\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\r\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    fetchContractData()\r\n  }, [isInitialized, setState])\r\n\r\n  // Data from the contract that needs an account\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const nftContract = getNftContract()\r\n\r\n        const getMinted = await multicall(epicNftFarm, [\r\n          { address: LegendaryNftFarm, name: 'getMinted', params: [account] },\r\n        ])\r\n\r\n        // console.log('getMinted', getMinted)\r\n\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n        const ownerById = getMinted[0][2]\r\n        const maxMintByNft = getToInt(getMinted[0][3])\r\n        const prices = getFromWayArray(getMinted[0][4])\r\n        const myMints = getToInt(getMinted[0][5])\r\n\r\n        // console.log('hasClaimed', hasClaimed)\r\n        // console.log('amounts', amounts)\r\n        // console.log('ownerById', ownerById)\r\n        // console.log('maxMintByNft', maxMintByNft)\r\n        // console.log('prices', prices)\r\n        console.log('myMints', myMints)\r\n\r\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\r\n\r\n        let nftMap: BunnyMap = {}\r\n\r\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\r\n        // owned by the wallet, then the nftId's associated with the tokenIds\r\n        if (balanceOf > 0) {\r\n          const getTokenIdAndBunnyId = async (index: number) => {\r\n            try {\r\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\r\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\r\n\r\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\r\n            } catch (error) {\r\n              return null\r\n            }\r\n          }\r\n\r\n          const tokenIdPromises = []\r\n\r\n          for (let i = 0; i < balanceOf; i++) {\r\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\r\n          }\r\n\r\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\r\n\r\n          // While improbable a wallet can own more than one of the same nft so the format is:\r\n          // { [nftId]: [array of tokenIds] }\r\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\r\n            if (!association) {\r\n              return accum\r\n            }\r\n\r\n            const [nftId, tokenId] = association\r\n\r\n            return {\r\n              ...accum,\r\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\r\n            }\r\n          }, {})\r\n        }\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          ownerById,\r\n          balanceOf,\r\n          nftMap,\r\n\r\n          amounts,\r\n          maxMintByNft,\r\n          prices,\r\n          myMints,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    const fetchNonLoggedInContractData = async () => {\r\n      try {\r\n        const getMinted = await multicall(epicNftFarm, [\r\n          { address: LegendaryNftFarm, name: 'getMinted', params: ['0x0000000000000000000000000000000000000000'] },\r\n        ])\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          amounts,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchContractData()\r\n    } else {\r\n      fetchNonLoggedInContractData()\r\n    }\r\n  }, [isInitialized, account, setState])\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false\r\n    }\r\n  }, [isMounted])\r\n\r\n  const canBurnNft = currentBlock <= state.endBlockNumber\r\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\r\n\r\n  /**\r\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\r\n   * For example when a transaction has been completed\r\n   */\r\n  const reInitialize = () => {\r\n    // Only attempt to re-initialize if the component is still mounted\r\n    // Transactions can take awhile so it is likely some users will navigate to another page\r\n    // before the transaction is finished\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\r\n      {children}\r\n    </NftProviderContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NftProvider\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { LegendaryNftFarm, AMOUNT_TO_CLAIM } from 'config/constants/legendary'\r\nimport { getLifeAddress } from 'utils/addressHelpers'\r\nimport { Nft } from 'config/constants/types'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useERC20, useRabbitMintingFarm } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\nimport { useNftAllowance } from '../../../hooks/useAllowance'\r\nimport { useNftApprove } from '../../../hooks/useApprove'\r\n\r\ninterface ClaimNftModalProps {\r\n  nft: Nft\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const nftMintingContract = useRabbitMintingFarm(LegendaryNftFarm)\r\n  const contraToken = useERC20(getLifeAddress())\r\n  const allowance = useNftAllowance(contraToken, LegendaryNftFarm, pendingTx)\r\n  const onApprove = useNftApprove(contraToken, LegendaryNftFarm)\r\n  const cakeBalance = useTokenBalance(getLifeAddress())\r\n  const cakeInWallet = getBalanceNumber(cakeBalance)\r\n\r\n  // console.log('getLifeAddress', getLifeAddress(), LegendaryNftFarm, allowance)\r\n  // console.log('allowance', allowance)\r\n\r\n  const handleConfirm = async () => {\r\n    if (allowance === null) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      await nftMintingContract.methods\r\n        .mintNFT(nft.nftId)\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          onDismiss()\r\n          onSuccess()\r\n        })\r\n        .on('error', () => {\r\n          console.error(error)\r\n          setError('Unable to claim NFT')\r\n          setIsLoading(false)\r\n        })\r\n    } catch (err) {\r\n      console.error('Unable to mint NFT:', err)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (cakeInWallet === 0) {\r\n      setError(`You must have LIFE balance to claim NFT`)\r\n    }\r\n  }, [cakeInWallet, setError])\r\n\r\n  return (\r\n    <Modal title={`Claim NFT for ${nft.tokenAmount} LIFE`} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button\r\n          fullWidth\r\n          disabled={!account || pendingTx || isLoading || allowance > 0}\r\n          onClick={async () => {\r\n            try {\r\n              setPendingTx(true)\r\n              await onApprove()\r\n              setPendingTx(false)\r\n            } catch (e) {\r\n              setPendingTx(false)\r\n              console.error(e)\r\n            }\r\n          }}\r\n        >\r\n          Approve\r\n        </Button>\r\n\r\n        <Button\r\n          fullWidth\r\n          onClick={handleConfirm}\r\n          disabled={!account || isLoading || cakeInWallet <= 0 || allowance <= 0}\r\n        >\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimNftModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Nft } from 'config/constants/types'\r\nimport { LegendaryNftFarm, AMOUNT_TO_CLAIM } from 'config/constants/legendary'\r\nimport { useRabbitMintingFarm } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface BurnNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const [accepted, setAccepted] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const nftMintingContract = useRabbitMintingFarm(LegendaryNftFarm)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const [tokenId] = tokenIds\r\n\r\n      await nftMintingContract.methods\r\n        .burnNFT(tokenId)\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          onDismiss()\r\n          onSuccess()\r\n        })\r\n        .on('error', () => {\r\n          console.error(error)\r\n          setError('Unable to burn NFT')\r\n          setIsLoading(false)\r\n        })\r\n    } catch (err) {\r\n      console.error('Unable to burn NFT:', err)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\r\n          <Value>${AMOUNT_TO_CLAIM} LIFE</Value>\r\n        </InfoRow>\r\n      </ModalContent>\r\n      <ModalContent>\r\n        <Text color=\"failure\">\r\n          {TranslateString(999, 'When you trade in this NFT to receive LIFE, you will lose access to it forever!')}\r\n        </Text>\r\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\r\n      </ModalContent>\r\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\r\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\r\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\r\n          {TranslateString(999, 'I understand')}\r\n        </Text>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default BurnNftModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Web3 from 'web3'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport { NFT } from 'config/constants/legendary'\r\nimport { Nft } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { usePancakeRabbits } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface TransferNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst Label = styled.label`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  margin-top: 24px;\r\n`\r\n\r\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [value, setValue] = useState('')\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const nftContract = usePancakeRabbits(NFT)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const isValidAddress = Web3.utils.isAddress(value)\r\n\r\n      if (!isValidAddress) {\r\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\r\n      } else {\r\n        await nftContract.methods\r\n          .transferFrom(account, value, tokenIds[0])\r\n          .send({ from: account })\r\n          .on('sending', () => {\r\n            setIsLoading(true)\r\n          })\r\n          .on('receipt', () => {\r\n            onDismiss()\r\n            onSuccess()\r\n          })\r\n          .on('error', () => {\r\n            console.error(error)\r\n            setError('Unable to transfer NFT')\r\n            setIsLoading(false)\r\n          })\r\n      }\r\n    } catch (err) {\r\n      console.error('Unable to transfer NFT:', err)\r\n    }\r\n  }\r\n\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value: inputValue } = evt.target\r\n    setValue(inputValue)\r\n  }\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\r\n        <Input\r\n          id=\"transferAddress\"\r\n          name=\"address\"\r\n          type=\"text\"\r\n          placeholder={TranslateString(999, 'Paste address')}\r\n          value={value}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        />\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default TransferNftModal\r\n","import React, { useState, useContext, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Tag,\r\n  Button,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n  Text,\r\n  CardFooter,\r\n  useModal,\r\n  LogoIcon,\r\n} from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Nft } from 'config/constants/types'\r\nimport { AMOUNT_TO_CLAIM } from 'config/constants/legendary'\r\nimport Page from 'components/layout/Page'\r\nimport InfoRow from '../InfoRow'\r\nimport Image from '../Image'\r\nimport { NftProviderContext } from '../../contexts/NftProvider'\r\nimport { getNftContract } from '../../utils/contracts'\r\nimport ClaimNftModal from '../ClaimNftModal'\r\nimport BurnNftModal from '../BurnNftModal'\r\nimport TransferNftModal from '../TransferNftModal'\r\n\r\ninterface NftCardProps {\r\n  nft: Nft\r\n}\r\n\r\nconst StyledNotFound = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: calc(100vh - 64px);\r\n  justify-content: center;\r\n`\r\n\r\nconst Header = styled(InfoRow)`\r\n  min-height: 28px;\r\n`\r\n\r\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\r\n  height: auto;\r\n  padding: 16px 24px;\r\n\r\n  &:hover:not(:disabled):not(:active) {\r\n    background-color: transparent;\r\n  }\r\n\r\n  &:focus:not(:active) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\nconst InfoBlock = styled.div`\r\n  padding: 0 24px 24px;\r\n`\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst SmallCard = styled(Card)`\r\n  width: 500px;\r\n  margin: 0 auto;\r\n\r\n  @media (max-width: 767px) {\r\n    width: 320px;\r\n  }\r\n`\r\n\r\nconst CustomButton = styled(Button)`\r\n  margin-left: 10px;\r\n`\r\n\r\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\r\n  const [state, setState] = useState({\r\n    isLoading: false,\r\n    isOpen: true,\r\n    nftCount: 0,\r\n    nftBurnCount: 0,\r\n  })\r\n  const TranslateString = useI18n()\r\n  const {\r\n    isInitialized,\r\n    hasClaimed,\r\n    ownerById,\r\n    canBurnNft,\r\n    totalSupplyDistributed,\r\n    currentDistributedSupply,\r\n    getTokenIds,\r\n    reInitialize,\r\n    allowMultipleClaims,\r\n    rarity,\r\n    priceMultiplier,\r\n    maxMintPerNft,\r\n    tokenPerBurn,\r\n    amounts,\r\n    maxMintByNft,\r\n    prices,\r\n    myMints,\r\n  } = useContext(NftProviderContext)\r\n  const { account } = useWallet()\r\n\r\n  console.log('CONTRACT/GALLERY INFO:', totalSupplyDistributed, rarity, priceMultiplier, maxMintPerNft, tokenPerBurn)\r\n  console.log('LIMITS BY NFT:', tokenPerBurn, amounts, maxMintByNft, prices)\r\n\r\n  // maxMintPerNft limit max amount that a nft can be minted\r\n  // maxMintByNft array containing individual amount of mint per nft index\r\n  // prices array containing individual prices of a mint per nft index\r\n  // tokenPerBurn global price\r\n\r\n  console.log(ownerById)\r\n\r\n  const { nftId, name, previewImage, originalImage, fileType, description, metadata, tokenAmount, tokenSupply } = nft\r\n  const PRICE = prices[nft.nftId] || tokenPerBurn // here we get the price\r\n\r\n  const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\r\n\r\n  const MINTED = amounts[nftIndex] ? parseInt(amounts[nftIndex].toString()) : 0\r\n  const MAX_MINT = maxMintByNft[nftIndex] ? parseInt(maxMintByNft[nftIndex].toString()) : 6\r\n\r\n  const hasClaimedArr: any = hasClaimed[0]\r\n  const ownerByIdArr: any = ownerById[0]\r\n\r\n  const firstCharOfAccount = account != null && account.slice(0, 4)\r\n  const lastCharOfAccount = account != null && account.slice(-4)\r\n\r\n  const accountName = account != null && `${firstCharOfAccount}...${lastCharOfAccount}`\r\n\r\n  const loggedIn = account !== null\r\n\r\n  // console.log('?hasClaimed', hasClaimed)\r\n  // console.log('?ownerById', ownerById)\r\n\r\n  const MINTS = myMints[nftIndex] || 0\r\n\r\n  const walletCanClaim = maxMintPerNft === 0 || MINTED === undefined || MINTED < MAX_MINT\r\n\r\n  let price = 1200\r\n\r\n  if (amounts && amounts[nftIndex]) {\r\n    price = Math.round(1200 * 1.37973 ** amounts[nftIndex] * 100) / 100\r\n  }\r\n\r\n  const tokenIds = getTokenIds(nftId)\r\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\r\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\r\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\r\n\r\n  const fetchDetails = useCallback(async () => {\r\n    setState((prevState) => ({ ...prevState, isLoading: true }))\r\n    try {\r\n      const { methods } = getNftContract()\r\n      const nftCount = await methods.nftCount(nftId).call()\r\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: false,\r\n        isDataFetched: true,\r\n        nftCount: parseInt(nftCount, 10),\r\n        nftBurnCount: parseInt(nftBurnCount, 10),\r\n      }))\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }, [nftId])\r\n\r\n  const handleClick = async () => {\r\n    if (state.isOpen) {\r\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\r\n    } else {\r\n      try {\r\n        await fetchDetails()\r\n      } catch (error) {\r\n        console.error(error)\r\n      } finally {\r\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleSuccess = () => {\r\n    fetchDetails()\r\n    reInitialize()\r\n  }\r\n\r\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\r\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\r\n  const [onPresentTransferModal] = useModal(\r\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\r\n  )\r\n\r\n  return (\r\n    <SmallCard isActive={walletOwnsNft}>\r\n      {fileType === 'mp4' && (\r\n        <video height=\"500px\" width=\"100%\" loop autoPlay muted>\r\n          <source src={originalImage} type=\"video/mp4\" />\r\n          <track kind=\"captions\" />\r\n        </video>\r\n      )}\r\n      {fileType !== 'mp4' && (\r\n        <Image src={originalImage} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\r\n      )}\r\n      <CardBody>\r\n        <Header>\r\n          <Heading>{name}</Heading>\r\n          {isInitialized && walletCanClaim && (\r\n            <Tag outline variant=\"success\">\r\n              {TranslateString(526, 'Available')}\r\n            </Tag>\r\n          )}\r\n          {isInitialized && !walletCanClaim && (\r\n            <Tag outline variant=\"failure\">\r\n              Sold Out\r\n            </Tag>\r\n          )}\r\n          {isInitialized && tokenIds && (\r\n            <Tag outline variant=\"secondary\">\r\n              {TranslateString(999, 'In Wallet')}\r\n            </Tag>\r\n          )}\r\n        </Header>\r\n        {isInitialized && loggedIn && walletCanClaim && isSupplyAvailable && (\r\n          <Button onClick={onPresentClaimModal} mt=\"24px\">\r\n            {TranslateString(999, 'Claim this NFT')} for {price} LIFE\r\n          </Button>\r\n        )}\r\n        {isInitialized && loggedIn && walletCanClaim && isSupplyAvailable && (\r\n          <CustomButton\r\n            onClick={() =>\r\n              window.open(\r\n                'https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x50f4220C82c9325dC99f729C3328FB5c338BEaae',\r\n                '_blank',\r\n              )\r\n            }\r\n            mt=\"24px\"\r\n          >\r\n            {TranslateString(999, 'Buy LIFE')}\r\n          </CustomButton>\r\n        )}\r\n        {isInitialized && walletOwnsNft && (\r\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\r\n            {TranslateString(999, 'Transfer')}\r\n          </Button>\r\n        )}\r\n      </CardBody>\r\n      <CardFooter p=\"2\">\r\n        {state.isOpen && (\r\n          <InfoBlock>\r\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\r\n              {description}\r\n            </Text>\r\n            <InfoRow>\r\n              <Text>{TranslateString(999, 'Number minted')}:</Text>\r\n              <Value>\r\n                {MINTED}/{tokenSupply}\r\n              </Value>\r\n            </InfoRow>\r\n            <InfoRow>\r\n              <Text>{TranslateString(999, 'Minted By Me')}:</Text>\r\n              <Value>{MINTS}</Value>\r\n            </InfoRow>\r\n          </InfoBlock>\r\n        )}\r\n      </CardFooter>\r\n    </SmallCard>\r\n  )\r\n}\r\n\r\nexport default NftCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, LogoIcon, Text, Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport nfts from 'config/constants/legendary'\r\nimport NftCard from './components/NftCard'\r\nimport NftList from './components/NftList'\r\nimport NftProvider from './contexts/NftProvider'\r\nimport NftInfo from './components/NftInfo'\r\n\r\nconst StyledHero = styled.div`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\r\n  margin-bottom: 24px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst StyledNotFound = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: calc(100vh - 64px);\r\n  justify-content: center;\r\n`\r\n\r\nconst CustomHeading = styled(Heading)`\r\n  text-align: center;\r\n`\r\n\r\nconst Detail = (props) => {\r\n  const TranslateString = useI18n()\r\n  const { match } = props\r\n  const id = parseInt(match.params.id)\r\n\r\n  const nft1 = nfts.filter((nft) => nft.nftId === id)\r\n\r\n  if (nft1[0]) {\r\n    return (\r\n      <NftProvider>\r\n        <Page>\r\n          <StyledHero>\r\n            <CustomHeading as=\"h1\" size=\"xxl\" color=\"#9f0d0d\" mb=\"24px\">\r\n              {nft1[0] && nft1[0].name}\r\n            </CustomHeading>\r\n          </StyledHero>\r\n          <NftCard nft={nft1[0]} />\r\n        </Page>\r\n      </NftProvider>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Page>\r\n      <StyledNotFound>\r\n        <LogoIcon width=\"64px\" mb=\"8px\" />\r\n        <Heading size=\"xxl\">404</Heading>\r\n        <Text mb=\"16px\">{TranslateString(999, 'Oops, page not found.')}</Text>\r\n        <Button as=\"a\" href=\"/\" size=\"sm\">\r\n          {TranslateString(999, 'Back Home')}\r\n        </Button>\r\n      </StyledNotFound>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Detail\r\n"],"sourceRoot":""}