{"version":3,"sources":["utils/formatBalance.ts","hooks/useTokenBalance.ts","utils/erc20.ts","utils/callHelpers.ts","hooks/useHarvest.ts","components/UnlockButton.tsx","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","useWallet","account","ethereum","fastRefresh","getTokenBalance","res","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","allowance","options","userAddress","contract","approve","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","useHarvest","farmPid","dispatch","useDispatch","useMasterchef","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","UnlockButton","props","TranslateString","useI18n","connect","reset","onPresentConnectModal","useWalletModal","onClick","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","multicall","masterChefABI","rawResults","results","index","fetchBalances","CardValue","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","color","style","lineHeight","CakeWalletBalance","cakeBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","alifePrice","usePriceCakeBusd","earning","balancesWithValue","filter","balanceType","farmWithBalance","harvestAllFarms","size","mb","src","alt","width","height","id","disabled","length","fullWidth","StyledCakeStats","Row","LifeStatsHeading","Heading","CakeStats","burnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","tokenPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","AnnouncementHeading","TwitterCard","dataSource","sourceType","screenName","chrome","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/17.2d64dd1d.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\r\n\r\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\r\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\r\n  return displayBalance.toNumber()\r\n}\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\r\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract(erc20 as unknown as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, account) => {\r\n  // shit code: hard fix for old CTK and BLK\r\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(0) })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farmPids: number[]) => {\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farmPids.reduce((accum, pid) => {\r\n      return [...accum, harvest(masterChefContract, pid, account)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farmPids, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import React from 'react'\r\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst UnlockButton = (props) => {\r\n  const TranslateString = useI18n()\r\n  const { connect, reset } = useWallet()\r\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\r\n\r\n  return (\r\n    <Button onClick={onPresentConnectModal} {...props}>\r\n      {TranslateString(292, 'Unlock Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingReward',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold fontSize={fontSize}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeHarvestBalance = ({ earningsSum }) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={earningsSum} />\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWalletBalance = ({ cakeBalance }) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingReward',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport { usePriceCakeBusd } from '../../../state/hooks'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getCakeAddress } from '../../../utils/addressHelpers'\r\nimport useAllEarnings from '../../../hooks/useAllEarnings'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/alife/2a.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\r\n  const alifePrice = usePriceCakeBusd().toNumber()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading color=\"#9f0d0d\" size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/alife/2.png\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{TranslateString(544, 'ALIFE to Harvest')}</Label>\r\n          <CakeHarvestBalance earningsSum={earningsSum} />\r\n          <Label>~${(alifePrice * earningsSum).toFixed(2)}</Label>\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(546, 'ALIFE in Wallet')}</Label>\r\n          <CakeWalletBalance cakeBalance={cakeBalance} />\r\n          <Label>~${(alifePrice * cakeBalance).toFixed(2)}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting ALIFE')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst LifeStatsHeading = styled(Heading)`\r\n  @media (max-width: 1300px) {\r\n    font-size: 24px !important;\r\n  }\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const farms = useFarms()\r\n  const alifePrice = usePriceCakeBusd()\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\r\n  const cakeSupply = getBalanceNumber(circSupply)\r\n  const marketCap = alifePrice.times(circSupply)\r\n\r\n  let tokenPerBlock = 0\r\n  if (farms && farms[0] && farms[0].tokenPerBlock) {\r\n    tokenPerBlock = new BigNumber(farms[0].tokenPerBlock).div(new BigNumber(10).pow(18)).toNumber()\r\n  }\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <LifeStatsHeading color=\"#9f0d0d\" size=\"xl\" mb=\"24px\">\r\n          {TranslateString(534, 'Alife Stats')}\r\n        </LifeStatsHeading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\r\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(540, 'New ALIFE/block')}</Text>\r\n          <Text bold fontSize=\"14px\">\r\n            {tokenPerBlock}\r\n          </Text>\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  const totalValue = useTotalValue()\r\n  // const tvl = totalValue.toFixed(2);\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading color=\"#9f0d0d\" size=\"lg\" mb=\"24px\">\r\n          {TranslateString(999, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        <>\r\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\r\n          {/* <Heading size=\"xl\"> */}\r\n          <CardValue value={totalValue.toNumber() / 3} prefix=\"$\" decimals={2} />\r\n          {/* </Heading> */}\r\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\r\n        </>\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms } from '../../../state/hooks'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst AnnouncementHeading = styled(Heading)`\r\n  @media (max-width: 1300px) {\r\n    font-size: 24px !important;\r\n  }\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody>\r\n        <AnnouncementHeading color=\"#9f0d0d\" size=\"xl\" mb=\"24px\">\r\n          {TranslateString(10003, 'Announcements')}\r\n        </AnnouncementHeading>\r\n        <Timeline\r\n          dataSource={{\r\n            sourceType: 'profile',\r\n            screenName: 'VladFinance',\r\n          }}\r\n          options={{\r\n            height: '300',\r\n            chrome: 'noheader, nofooter',\r\n            width: '400',\r\n          }}\r\n        />\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport LotteryCard from './components/LotteryCard'\r\nimport CakeStats from './components/CakeStats'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\nimport TwitterCard from './components/TwitterCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/alife/3.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/alife/3.png'), url('/images/alife/3b.png');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 48px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"#9f0d0d\">\r\n          {TranslateString(576, 'Vlad Finance')}\r\n        </Heading>\r\n        <Text>{TranslateString(578, 'Come for the Immortality. Stay for the NFTs.')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <TwitterCard />\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}