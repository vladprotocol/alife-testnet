{"version":3,"sources":["hooks/useBlock.ts","config/constants/newnfts.ts","utils/getNftDetailData.ts","utils/index.ts","views/MyNewCollection/utils/contracts.ts","views/MyNewCollection/contexts/NftProvider.tsx","views/MyNewCollection/components/InfoRow.tsx","views/MyNewCollection/components/TransferNftModal.tsx","views/MyNewCollection/components/NftTable.tsx","views/MyNewCollection/components/NftProgressSimple.tsx","views/MyNewCollection/components/NftInfo.tsx","views/MyNewCollection/index.tsx"],"names":["useBlock","useContext","BlockContext","NftFarm","NFT","AMOUNT_TO_CLAIM","Nfts","name","metadata","description","previewImage","originalImage","fileType","blurImage","sortOrder","nftId","tokenAmount","tokenSupply","nftFarmContract","nftContract","rarity","getNftDetailData","tokenURI","a","data","image","error","fetch","response","json","getUrlPartsInfo","fullUrl","fullUrlArray","split","protocol","host","path","slice","join","getNftContract","contractOptions","nftAbi","nft","getContract","getFromWayArray","v","array","t","length","i","push","fromWei","toString","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","useState","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","nftTableData","state","setState","account","useWallet","currentBlock","useEffect","prevState","console","fetchContractData","multicall","nftFarmV2","address","params","getMinted","methods","call","getTokenIdAndNftId","index","tokenOfOwnerByIndex","tokenId","getNftId","getNftData","getApproved","approvedStatus","isApproved","nftName","hash","hashId","substring","nftDetailLink","nftPreviewImage","nfts","filter","map","type","tokenIdPromises","nftTablePromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","current","canBurnNft","Provider","value","getTokenIds","reInitialize","InfoRow","styled","div","Value","Text","ModalContent","Actions","Label","label","theme","colors","text","TransferNftModal","tokenIds","onSuccess","onDismiss","isLoading","setIsLoading","values","setValues","setError","TranslateString","useI18n","nftNewFarmContract","useNewNFTFarmContract","handleConfirm","Web3","utils","isAddress","transferNft","send","from","on","title","color","mb","htmlFor","id","placeholder","onChange","evt","target","inputValue","isWarning","disabled","fullWidth","variant","onClick","NftTable","isOpen","requestedApproval","setRequestedApproval","onTransfer","useCallback","isDataFetched","err","log","usePancakeRabbits","handleApprove","approve","handleSuccess","columns","dataIndex","render","record","style","fontWeight","fontSize","src","alt","width","height","objectFit","borderRadius","key","as","Link","to","bunnyId","ModalWrapper","onPresentTransferModal","mt","dataSource","marginTop","NftProgressSimple","NftInfo","mediaQueries","sm","StyledHero","textSubtle","StyledNotFound","CustomButton","Button","GoldenButton","Nft","useHistory","Page","size"],"mappings":"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","file":"static/js/19.86abe9d0.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","import { Nft } from './types'\n\nexport const NftFarm = '0xEb3af3C7ECaD4927E6e650BFf0C3841d49E36c9B'\nexport const NFT = '0xa81ab2d03b9e3a62bdbb837d417a5e221f754e14'\nexport const AMOUNT_TO_CLAIM = '10'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Count Pepes Chocula',\n    metadata: 'tier-NFT-base-dark-chocolate.json',\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\n    previewImage: 'preview-base-dark-chocolate.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 0,\n    nftId: 100,\n    tokenAmount: 10,\n    tokenSupply: 2222,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Base',\n  },\n  {\n    name: 'Vlad Pepes Drakul',\n    metadata: 'tier-NFT-base-main-nopaint.json',\n    description: 'The legend behind the meme in all his original glory. Part of the base tier of Vlad NFTs',\n    previewImage: 'preview-base-main-nopaint.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWckPrzbjvf8jqUpdQ7jKLzdaSBTyPSV6x6obSUHHipqc?filename=NFT-base-main-nopaint.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 1,\n    nftId: 101,\n    tokenAmount: 10,\n    tokenSupply: 2222,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Base',\n  },\n  {\n    name: 'Pepes in Stone',\n    metadata: 'tier-NFT-base-marble.json',\n    description:\n      'The count has turned into a marble statue ready for display in the halls of Vladhalla. Part of the base tier of Vlad NFTs.',\n    previewImage: 'preview-base-marble.jpg',\n    originalImage: 'https://ipfs.io/ipfs/QmSnz85drLjCD4qNgaMwHFC6PFEkGrmYhM1LpHwZWpEWaQ?filename=NFT-base-marble.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 2,\n    nftId: 102,\n    tokenAmount: 10,\n    tokenSupply: 2222,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Base',\n  },\n  {\n    name: 'The path to Vladhalla',\n    metadata: '',\n    description: 'All who seek to find the path to Vladhalla must have strong hands along the way to immortality.',\n    previewImage: 'preview-path-to-vladhalla.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmQWAeV3aAWD2Kbvxmtt4H874AEf7M7N5FcBos4iZbkRcj?filename=NFT-rare-path-to-vladhalla.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 3,\n    nftId: 103,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Rare',\n  },\n  {\n    name: 'Painted Pepe',\n    metadata: '',\n    description:\n      'As an homage to the original Vlad Pepes Drakul this retains his painted face hang him in your gallery for eternal viewing.',\n    previewImage: 'preview-painted-pepes.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmRqe92vpppkNS2aihmdvswHstAiHAF4jC2KUAiec5LKKk?filename=NFT-rare-painted-pepes.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 4,\n    nftId: 104,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Rare',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 105,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Rare',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 106,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Epic',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 107,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Epic',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 108,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Epic',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 109,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Legendary',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 110,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Legendary',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 111,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Legendary',\n  },\n]\n\nexport default Nfts\n","export type DataResponse = {\n  name: string\n  description: string\n  image: string\n  rarity: string\n\n  // TODO: Fill in the error type\n  error: any\n}\n\n/**\n * Get NFT data for a specific tokenURI\n */\nconst getNftDetailData = async (tokenURI: string): Promise<DataResponse> => {\n  let data = {\n    name: '',\n    description: '',\n    image: '',\n    rarity: '',\n    error: '',\n  }\n  try {\n    const response = await fetch(tokenURI)\n    data = await response.json()\n    return data\n  } catch (error) {\n    return data\n  }\n}\n\nexport default getNftDetailData\n","import BigNumber from 'bignumber.js'\n\nexport { default as formatAddress } from './formatAddress'\n\nexport const bnToDec = (bn: BigNumber, decimals = 18): number => {\n  return bn.dividedBy(new BigNumber(10).pow(decimals)).toNumber()\n}\n\n/** Returns parts of URL like protocol, host, path for formatting URLs as required.\n * @param  {string} fullUrl\n */\nexport const getUrlPartsInfo = (fullUrl) => {\n  const fullUrlArray = fullUrl.split('/')\n  const protocol = fullUrlArray[0]\n  const host = fullUrlArray[2]\n  const path = fullUrlArray.slice(3).join('/')\n  return {\n    protocol,\n    host,\n    path,\n    fullUrlArray,\n  }\n}\n","import { AbiItem, fromWei } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport { NftFarm, NFT } from 'config/constants/newnfts'\nimport BigNumber from 'bignumber.js'\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\n}\n\nexport const getNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = nft as unknown as AbiItem\n  return getContract(nftAbi, NFT, contractOptions)\n}\n\nexport const getFromWei = (v: any) => {\n  if (!v) return 0\n  return parseFloat(fromWei(v.toString(), 'ether'))\n}\n\nexport const getFromWayArray = (v: any) => {\n  if (!v) return []\n  const array = []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(fromWei(v[i].toString(), 'ether'))\n    }\n  }\n  return array\n}\n\nexport const getToFloat = (v: any) => {\n  if (!v) return []\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseInt(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport const getToInt = (v: any) => {\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseFloat(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport default getNftMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport nftFarmV2 from 'config/abi/NftFarmV2.json'\nimport nfts, { NftFarm } from 'config/constants/newnfts'\nimport multicall from 'utils/multicall'\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\nimport { getUrlPartsInfo } from '../../../utils'\nimport getNftDetailData from '../../../utils/getNftDetailData'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype NftMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  myMints: number[]\n  nftTableData: any[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: NftMap\n\n  allowMultipleClaims: boolean\n  rarity: string\n  priceMultiplier: number\n  maxMintPerNft: number\n  tokenPerBurn: number\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    rarity: '',\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n    tokenPerBurn: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n    myMints: [],\n    nftTableData: [],\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        // const [\n        //   // startBlockNumberArr,\n        //   // endBlockNumberArr,\n        //   // countBurntArr,\n        //   // totalSupplyDistributedArr,\n        //   // currentDistributedSupplyArr,\n\n        //   // allowMultipleClaimsArr,\n        //   // rarityArr,\n        //   // priceMultiplierArr,\n        //   // maxMintPerNftArr,\n        //   // tokenPerBurnArr,\n        // ] = await multicall(nftFarm, [\n        //   // { address: NftFarm, name: 'startBlockNumber' },\n        //   // { address: NftFarm, name: 'endBlockNumber' },\n        //   // { address: NftFarm, name: 'countBurnt' },\n        //   // { address: NftFarm, name: 'totalSupplyDistributed' },\n        //   // { address: NftFarm, name: 'currentDistributedSupply' },\n        //   // { address: NftFarm, name: 'allowMultipleClaims' },\n        //   // { address: NftFarm, name: 'rarity' },\n        //   // { address: NftFarm, name: 'priceMultiplier' },\n        //   // { address: NftFarm, name: 'maxMintPerNft' },\n        //   // { address: NftFarm, name: 'tokenPerBurn' },\n        // ])\n\n        // TODO: Figure out why these are coming back as arrays\n        // const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        // const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        // const [countBurnt]: [BigNumber] = countBurntArr\n        // const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        // const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          // countBurnt: countBurnt.toNumber(),\n          // startBlockNumber: startBlockNumber.toNumber(),\n          // endBlockNumber: endBlockNumber.toNumber(),\n          // currentDistributedSupply: currentDistributedSupply.toNumber(),\n          // totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          // allowMultipleClaims: allowMultipleClaimsArr[0],\n          // rarity: rarityArr[0].toString(),\n          // priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\n          // maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\n          // tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const getMinted = await multicall(nftFarmV2, [{ address: NftFarm, name: 'getMinted', params: [account] }])\n\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getToInt(getMinted[0][3])\n        const prices = getFromWayArray(getMinted[0][4])\n        const myMints = getToInt(getMinted[0][5])\n\n        // console.log('hasClaimed', hasClaimed)\n        // console.log('amounts', amounts)\n        // console.log('ownerById', ownerById)\n        // console.log('maxMintByNft', maxMintByNft)\n        // console.log('prices', prices)\n        // console.log('myMints', myMints)\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        let nftMap: NftMap = {}\n\n        let nftTableData = []\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndNftId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getNftId(tokenId).call()\n\n              return [parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const getNftData = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const tokenURI = await nftContract.methods.tokenURI(parseInt(tokenId, 10)).call()\n              const approvedStatus = await nftContract.methods.getApproved(parseInt(tokenId, 10)).call()\n              let isApproved = false\n              if (approvedStatus !== '0x0000000000000000000000000000000000000000') {\n                isApproved = true\n              }\n              const { name: nftName, rarity } = await getNftDetailData(tokenURI)\n\n              const { fullUrlArray } = getUrlPartsInfo(tokenURI)\n              const hash = fullUrlArray[3]\n              const hashId = parseInt(fullUrlArray[4].substring(0, fullUrlArray[4].length - 5), 10)\n              const nftDetailLink = `/detail/${hashId}`\n\n              const nftPreviewImage = nfts.filter((nft) => nftName === nft.name).map((nft) => nft.previewImage)\n\n              return {\n                tokenId: parseInt(tokenId, 10),\n                type: `${hash} ,  ${hashId}`,\n                nftName,\n                nftPreviewImage,\n                nftDetailLink,\n                isApproved,\n              }\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n          const nftTablePromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            nftTablePromises.push(getNftData(i))\n            tokenIdPromises.push(getTokenIdAndNftId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n          nftTableData = await Promise.all(nftTablePromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n          myMints,\n          nftTableData,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { NFT, NftFarm } from 'config/constants/newnfts'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { useNewNFTFarmContract } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n// tokenIds is retrieved dynamically from contracts.\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [values, setValues] = useState({\n    address: '',\n    tokenId: tokenIds[0],\n  })\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  const nftNewFarmContract = useNewNFTFarmContract(NftFarm)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(values.address)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await nftNewFarmContract.methods\n          .transferNft(values.address, values.tokenId)\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue, name } = evt.target\n    setValues({ ...values, [name]: inputValue })\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={values.address}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n        {/* <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Token ID')}:</Label>\n        <Input\n          id=\"tokenId\"\n          name=\"tokenId\"\n          type=\"number\"\n          placeholder={TranslateString(999, 'Enter tokenId')}\n          value={values.tokenId}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        /> */}\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          fullWidth\n          onClick={handleConfirm}\n          disabled={!account || isLoading || !values.address || !values.tokenId}\n        >\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback, useEffect } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n  ModalWrapper,\n  LogoIcon,\n} from '@pancakeswap-libs/uikit'\n\nimport { Link } from 'react-router-dom'\nimport { Table } from 'antd'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport useI18n from 'hooks/useI18n'\nimport { NftFarm, NFT } from 'config/constants/newnfts'\nimport orderBy from 'lodash/orderBy'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport TransferNftModal from './TransferNftModal'\nimport { getNftContract } from '../utils/contracts'\n\nconst NftTable = () => {\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: true,\n    nftTableData: [],\n  })\n\n  const { account } = useWallet()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n\n  const [error, setError] = useState(null)\n  const { nftTableData, reInitialize } = useContext(NftProviderContext)\n\n  const TranslateString = useI18n()\n\n  const onTransfer = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isLoading: true }))\n    try {\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        nftTableData,\n      }))\n    } catch (err) {\n      console.log(err)\n    }\n  }, [nftTableData])\n  const nftContract = usePancakeRabbits(NFT)\n\n  const handleApprove = useCallback(\n    async (tokenId) => {\n      console.log('tokenId', tokenId)\n      try {\n        setState((prevState) => ({ ...prevState, isLoading: true }))\n        setRequestedApproval(true)\n        console.log('onApprove', tokenId)\n\n        console.log('nftContract', nftContract, NftFarm, tokenId)\n        await nftContract.methods\n          .approve(NftFarm, tokenId)\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            console.log('receipt')\n          })\n          .on('error', () => {\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n        setState((prevState) => ({\n          ...prevState,\n          isLoading: false,\n          isDataFetched: true,\n          nftTableData,\n        }))\n\n        reInitialize()\n        setRequestedApproval(false)\n      } catch (e) {\n        console.error(e)\n      }\n    },\n    [nftTableData, account, nftContract, reInitialize],\n  )\n\n  const handleSuccess = () => {\n    onTransfer()\n    reInitialize()\n  }\n\n  const columns = [\n    {\n      title: 'NFT Name',\n      dataIndex: 'nftName',\n      render: (text, record) => {\n        return <p style={{ fontWeight: 600, fontSize: '18px' }}>{record.nftName}</p>\n      },\n    },\n    {\n      title: 'NFT preview Image',\n      dataIndex: 'nftPreviewImage',\n      render: (text, record) => {\n        return (\n          <div>\n            <img\n              src={`images/nfts/${record.nftPreviewImage}`}\n              alt=\"preview\"\n              style={{ width: '100px', height: '100px', objectFit: 'cover', borderRadius: '25px' }}\n            />\n          </div>\n        )\n      },\n    },\n    {\n      title: 'Token ID',\n      dataIndex: 'tokenId',\n      key: 'tokenId',\n    },\n    {\n      title: 'NFT Details',\n      dataIndex: 'nftDetailLink',\n      render: (text, record) => (\n        <Button as={Link} to={record.nftDetailLink}>\n          View Detail\n        </Button>\n      ),\n      key: 'nftDetailLink',\n    },\n    {\n      title: 'Transfer NFT',\n      dataIndex: '',\n      render: (text, record) => {\n        const nft = {\n          name: record.nftName,\n          metadata: '',\n          description: '',\n          originalImage: '',\n          previewImage: '',\n          fileType: '',\n          blurImage: '',\n          sortOrder: 1,\n          nftId: 0,\n          tokenAmount: 0,\n          tokenSupply: 0,\n          nftFarmContract: '',\n          nftContract: '',\n          bunnyId: 0,\n        }\n        const isApproved = record.isApproved\n        const tokenIds = [record.tokenId]\n        const [onPresentTransferModal] = ModalWrapper(\n          <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n        )\n        if (isApproved) {\n          return (\n            <Button\n              fullWidth\n              variant=\"primary\"\n              mt=\"24px\"\n              onClick={() => {\n                onPresentTransferModal()\n              }}\n            >\n              {TranslateString(999, 'Transfer')}\n            </Button>\n          )\n        }\n        return (\n          <Button\n            fullWidth\n            variant=\"primary\"\n            mt=\"24px\"\n            onClick={() => {\n              handleApprove(parseInt(record.tokenId, 10))\n            }}\n            disabled={requestedApproval}\n          >\n            Approve\n          </Button>\n        )\n      },\n      key: '',\n    },\n  ]\n\n  return <Table columns={columns} dataSource={nftTableData} style={{ marginTop: '25px' }} />\n}\n\nexport default NftTable\n","import React, { useContext } from 'react'\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst NftProgressSimple = () => {\n  const TranslateString = useI18n()\n  const { balanceOf } = useContext(NftProviderContext)\n\n  return (\n    <Card>\n      <CardBody>\n        <InfoRow>\n          <Text>{TranslateString(999, 'My Ticket NFTs')}:</Text>\n          <Text>\n            <strong>{balanceOf}</strong>\n          </Text>\n        </InfoRow>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgressSimple\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NftProgress from './NftProgress'\nimport NftProgressSimple from './NftProgressSimple'\nimport StatusCard from './StatusCard'\n\nconst StyledNtfInfo = styled.div`\n  align-items: start;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst NftInfo = () => {\n  const { canBurnNft } = useContext(NftProviderContext)\n\n  return <NftProgressSimple />\n}\n\nexport default NftInfo\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, LogoIcon, Text, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport { useHistory, Link } from 'react-router-dom'\nimport HowItWorks from './components/HowItWorks'\nimport NftList from './components/NftList'\nimport NftTable from './components/NftTable'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst StyledNotFound = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 64px);\n  justify-content: center;\n`\n\nconst CustomButton = styled(Button)`\n  margin-right: 20px;\n`\n\nconst GoldenButton = styled(Button)`\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px rgba(139, 66, 8, 1),\n    inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n  background-image: linear-gradient(160deg, #a54e07, #b47e11, #fef1a2, #bc881b, #a54e07);\n  border: 1px solid #a55d07;\n  color: rgb(120, 50, 5);\n  text-shadow: 0 2px 2px rgba(250, 227, 133, 1);\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  background-size: 100% 100%;\n  background-position: center;\n\n  &:focus,\n  &:hover {\n    background-size: 150% 150%;\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23), inset 0 -2px 5px 1px #b17d10,\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n    border: 1px solid rgba(165, 93, 7, 0.6);\n    color: rgba(120, 50, 5, 0.8);\n  }\n  &:active {\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px #b17d10,\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n  }\n`\n\nconst Nft = () => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const history = useHistory()\n\n  if (account) {\n    return (\n      <NftProvider>\n        <Page>\n          <StyledHero>\n            <Heading as=\"h1\" size=\"xl\" color=\"secondary\" mb=\"24px\">\n              My NFT Collections\n            </Heading>\n            <CustomButton variant=\"subtle\" mt=\"24px\">\n              <Link to=\"/my-collection\">Mint NFTs (Genesis)</Link>\n            </CustomButton>\n            <GoldenButton mt=\"24px\">\n              <Link to=\"/my-new-collection\">Mint NFTs (New)</Link>\n            </GoldenButton>\n          </StyledHero>\n          <NftInfo />\n          <NftTable />\n        </Page>\n      </NftProvider>\n    )\n  }\n\n  return (\n    <Page>\n      <StyledNotFound>\n        <LogoIcon width=\"64px\" mb=\"8px\" />\n        <Text mb=\"16px\">{TranslateString(999, 'Empty Collection')}</Text>\n      </StyledNotFound>\n    </Page>\n  )\n}\n\nexport default Nft\n"],"sourceRoot":""}