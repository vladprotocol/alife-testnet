{"version":3,"sources":["config/constants/nfts.ts","config/constants/epic.ts","views/MyEpicCollection/components/InfoRow.tsx","views/MyEpicCollection/components/Image.tsx","views/MyEpicCollection/utils/contracts.ts","views/MyEpicCollection/contexts/NftProvider.tsx","views/MyEpicCollection/components/ClaimNftModal.tsx","views/MyEpicCollection/components/BurnNftModal.tsx","views/MyEpicCollection/components/TransferNftModal.tsx","views/MyEpicCollection/components/NftCard/index.tsx","views/MyEpicCollection/components/NftGrid.tsx","views/MyEpicCollection/components/NftList.tsx","views/MyEpicCollection/components/NftProgressSimple.tsx","views/MyEpicCollection/components/NftInfo.tsx","views/MyEpicCollection/index.tsx"],"names":["NftFarm","NFT","AMOUNT_TO_CLAIM","Nfts","name","metadata","description","previewImage","originalImage","fileType","blurImage","sortOrder","nftId","tokenAmount","tokenSupply","nftFarmContract","nftContract","EpicNftFarm","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","href","target","rel","getNftContract","contractOptions","nftAbi","nft","getContract","getFromWayArray","v","array","t","length","i","push","fromWei","toString","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","useState","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","state","setState","account","useWallet","currentBlock","useBlock","useEffect","a","multicall","epicNftFarm","address","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","toNumber","console","error","fetchContractData","params","getMinted","methods","call","getTokenIdAndNftId","index","tokenOfOwnerByIndex","tokenId","getNftId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Value","Text","ModalContent","Actions","ClaimNftModal","onSuccess","onDismiss","isLoading","setIsLoading","pendingTx","setPendingTx","setError","TranslateString","useI18n","nftMintingContract","useRabbitMintingFarm","contraToken","useERC20","getLifeAddress","allowance","useNftAllowance","onApprove","useNftApprove","cakeBalance","useTokenBalance","cakeInWallet","getBalanceNumber","handleConfirm","mintNFT","send","from","on","title","color","mb","fullWidth","disabled","onClick","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","style","alignItems","display","checked","scale","onChange","ml","cursor","variant","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","Web3","utils","isAddress","transferFrom","htmlFor","id","type","placeholder","evt","inputValue","isWarning","StyledNotFound","Header","InfoBlock","Button","attrs","SmallCard","Card","NftCard","isOpen","nftCount","nftBurnCount","useContext","log","nftIndex","indexOf","MINTS","MINTED","MAX_MINT","firstCharOfAccount","slice","lastCharOfAccount","loggedIn","walletCanClaim","undefined","Math","round","walletOwnsNft","fetchDetails","ChevronUpIcon","ChevronDownIcon","useCallback","isDataFetched","handleSuccess","useModal","onPresentTransferModal","isActive","width","loop","autoPlay","muted","kind","outline","mt","p","as","textAlign","Page","NftGrid","BaseLayout","mediaQueries","sm","NftList","filteredNft","nfts","forEach","key","orderBy","map","NftProgressSimple","myNFTs","NftInfo","StyledHero","textSubtle","CustomButton","GoldenButton","Nft","history","useHistory","size"],"mappings":"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","file":"static/js/22.bb33231e.chunk.js","sourcesContent":["import { Nft } from './types'\n\nexport const NftFarm = '0xaBa054F1437aEBEa43fB0804b734DdB3F39FB62F'\nexport const NFT = '0xA81Ab2D03b9E3a62BDBb837d417A5E221F754E14'\nexport const AMOUNT_TO_CLAIM = '10'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Count Pepes Chocula',\n    metadata: 'tier-NFT-base-dark-chocolate.json',\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\n    previewImage: 'preview-base-dark-chocolate.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 0,\n    nftId: 0,\n    tokenAmount: 10,\n    tokenSupply: 2222,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Vlad Pepes Drakul',\n    metadata: 'tier-NFT-base-main-nopaint.json',\n    description: 'The legend behind the meme in all his original glory. Part of the base tier of Vlad NFTs',\n    previewImage: 'preview-base-main-nopaint.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWckPrzbjvf8jqUpdQ7jKLzdaSBTyPSV6x6obSUHHipqc?filename=NFT-base-main-nopaint.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 1,\n    nftId: 1,\n    tokenAmount: 10,\n    tokenSupply: 2222,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Pepes in Stone',\n    metadata: 'tier-NFT-base-marble.json',\n    description:\n      'The count has turned into a marble statue ready for display in the halls of Vladhalla. Part of the base tier of Vlad NFTs.',\n    previewImage: 'preview-base-marble.jpg',\n    originalImage: 'https://ipfs.io/ipfs/QmSnz85drLjCD4qNgaMwHFC6PFEkGrmYhM1LpHwZWpEWaQ?filename=NFT-base-marble.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 2,\n    nftId: 2,\n    tokenAmount: 10,\n    tokenSupply: 2222,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'The path to Vladhalla',\n    metadata: '',\n    description: 'All who seek to find the path to Vladhalla must have strong hands along the way to immortality.',\n    previewImage: 'preview-path-to-vladhalla.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmQWAeV3aAWD2Kbvxmtt4H874AEf7M7N5FcBos4iZbkRcj?filename=NFT-rare-path-to-vladhalla.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 3,\n    nftId: 3,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Painted Pepe',\n    metadata: '',\n    description:\n      'As an homage to the original Vlad Pepes Drakul this retains his painted face hang him in your gallery for eternal viewing.',\n    previewImage: 'preview-painted-pepes.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmRqe92vpppkNS2aihmdvswHstAiHAF4jC2KUAiec5LKKk?filename=NFT-rare-painted-pepes.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 4,\n    nftId: 4,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 5,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n]\n\nexport default Nfts\n","import { Nft } from './types'\n\nexport const EpicNftFarm = '0x6a63AF63675D3c9D498DF43Aa163F9243E7b4646'\nexport const NFT = '0x3F7C7C24fFA2ceFfaACE11B39D5b8a575A4B0674'\nexport const AMOUNT_TO_CLAIM = '10'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Silver Pepes',\n    metadata: '',\n    description:\n      \"The count has had an epic existence sure, but it has not been without many attempts at his life. This artist's rendition pays homage to the time he was frozen in Carbonite ...oh wait, wrong story. Our bad, pretty slick tho right?\",\n    previewImage: 'preview-silver-pepe.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmaPP3CqB8iNcB9b9NCZVytNiaxZcJWt7Kk1vnHWwRL7hQ?filename=NFT-epic-silver-pepes.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 0,\n    nftId: 0,\n    tokenAmount: 350,\n    tokenSupply: 66,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Bank of Vladhalla',\n    metadata: '',\n    description:\n      \"They say when you leave this life you can't take it with you... Well, who's leaving? That's for mortals to worry about.\",\n    previewImage: 'preview-bank-of-vlad.png',\n    originalImage:\n      'https://ipfs.io/ipfs/Qma87NMJAu33nQuCRvoAK4MwP9CBwhGsLkQdTptM6uxoyp?filename=NFT-epic-bank-of-vladhalla.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 1,\n    nftId: 1,\n    tokenAmount: 350,\n    tokenSupply: 66,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Gates of Vladhalla',\n    metadata: '',\n    description:\n      'Tales have been written of the select few who have made it this far. The  sheer majesty of these very gates would make the hairs on their arms stand on end. Only the immortal shall pass through - will you?',\n    previewImage: 'preview-gate-of-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmW1az8XriRqdx2zXY7w71XFxXUEfH5hUsyZTzwGBe7gfh?filename=NFT-epic-gates-of-vladhalla.png',\n    fileType: 'png',\n    blurImage: '',\n    sortOrder: 2,\n    nftId: 2,\n    tokenAmount: 350,\n    tokenSupply: 66,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n]\n\nexport default Nfts\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  src: string\n  alt: string\n  originalLink?: string\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\n  const previewImage = <StyledImage src={src} alt={alt} />\n\n  return (\n    <Container>\n      {originalLink ? (\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Image\n","import { AbiItem, fromWei } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport { NftFarm, NFT } from 'config/constants/nfts'\nimport BigNumber from 'bignumber.js'\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\n}\n\nexport const getNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = nft as unknown as AbiItem\n  return getContract(nftAbi, NFT, contractOptions)\n}\n\nexport const getFromWei = (v: any) => {\n  if (!v) return 0\n  return parseFloat(fromWei(v.toString(), 'ether'))\n}\n\nexport const getFromWayArray = (v: any) => {\n  if (!v) return []\n  const array = []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(fromWei(v[i].toString(), 'ether'))\n    }\n  }\n  return array\n}\n\nexport const getToFloat = (v: any) => {\n  if (!v) return []\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseInt(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport const getToInt = (v: any) => {\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseFloat(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport default getNftMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport epicNftFarm from 'config/abi/epicNftFarm.json'\nimport { EpicNftFarm } from 'config/constants/epic'\nimport multicall from 'utils/multicall'\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype NftMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  myMints: number[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: NftMap\n\n  allowMultipleClaims: boolean\n  rarity: string\n  priceMultiplier: number\n  maxMintPerNft: number\n  tokenPerBurn: number\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    rarity: '',\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n    tokenPerBurn: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n    myMints: [],\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n\n          allowMultipleClaimsArr,\n          rarityArr,\n          priceMultiplierArr,\n          maxMintPerNftArr,\n          tokenPerBurnArr,\n        ] = await multicall(epicNftFarm, [\n          { address: EpicNftFarm, name: 'startBlockNumber' },\n          { address: EpicNftFarm, name: 'endBlockNumber' },\n          { address: EpicNftFarm, name: 'countBurnt' },\n          { address: EpicNftFarm, name: 'totalSupplyDistributed' },\n          { address: EpicNftFarm, name: 'currentDistributedSupply' },\n          { address: EpicNftFarm, name: 'allowMultipleClaims' },\n          { address: EpicNftFarm, name: 'rarity' },\n          { address: EpicNftFarm, name: 'priceMultiplier' },\n          { address: EpicNftFarm, name: 'maxMintPerNft' },\n          { address: EpicNftFarm, name: 'tokenPerBurn' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBurnt]: [BigNumber] = countBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBurnt: countBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          allowMultipleClaims: allowMultipleClaimsArr[0],\n          rarity: rarityArr[0].toString(),\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const getMinted = await multicall(epicNftFarm, [{ address: EpicNftFarm, name: 'getMinted', params: [account] }])\n\n        // console.log('getMinted', getMinted)\n\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getToInt(getMinted[0][3])\n        const prices = getFromWayArray(getMinted[0][4])\n        const myMints = getToInt(getMinted[0][5])\n\n        // console.log('hasClaimed', hasClaimed)\n        // console.log('amounts', amounts)\n        // console.log('ownerById', ownerById)\n        // console.log('maxMintByNft', maxMintByNft)\n        // console.log('prices', prices)\n        // console.log('myMints', myMints)\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        let nftMap: NftMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndNftId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getNftId(tokenId).call()\n\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndNftId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n          myMints,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { EpicNftFarm, AMOUNT_TO_CLAIM } from 'config/constants/epic'\nimport { getLifeAddress } from 'utils/addressHelpers'\nimport { Nft } from 'config/constants/types'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useERC20, useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\nimport { useNftAllowance } from '../../../hooks/useAllowance'\nimport { useNftApprove } from '../../../hooks/useApprove'\n\ninterface ClaimNftModalProps {\n  nft: Nft\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(EpicNftFarm)\n  const contraToken = useERC20(getLifeAddress())\n  const allowance = useNftAllowance(contraToken, EpicNftFarm, pendingTx)\n  const onApprove = useNftApprove(contraToken, EpicNftFarm)\n  const cakeBalance = useTokenBalance(getLifeAddress())\n  const cakeInWallet = getBalanceNumber(cakeBalance)\n\n  // console.log('getLifeAddress', getLifeAddress(), EpicNftFarm, allowance)\n  // console.log('allowance', allowance)\n\n  const handleConfirm = async () => {\n    if (allowance === null) {\n      return\n    }\n\n    try {\n      await nftMintingContract.methods\n        .mintNFT(nft.nftId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to claim NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to mint NFT:', err)\n    }\n  }\n\n  useEffect(() => {\n    if (cakeInWallet === 0) {\n      setError(`You must have LIFE balance to claim NFT`)\n    }\n  }, [cakeInWallet, setError])\n\n  return (\n    <Modal title={`Claim NFT for ${nft.tokenAmount} LIFE`} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n      </ModalContent>\n      <Actions>\n        <Button\n          fullWidth\n          disabled={!account || pendingTx || isLoading || allowance > 0}\n          onClick={async () => {\n            try {\n              setPendingTx(true)\n              await onApprove()\n              setPendingTx(false)\n            } catch (e) {\n              setPendingTx(false)\n              console.error(e)\n            }\n          }}\n        >\n          Approve\n        </Button>\n\n        <Button\n          fullWidth\n          onClick={handleConfirm}\n          disabled={!account || isLoading || cakeInWallet <= 0 || allowance <= 0}\n        >\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { EpicNftFarm, AMOUNT_TO_CLAIM } from 'config/constants/epic'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface BurnNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [accepted, setAccepted] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(EpicNftFarm)\n\n  const handleConfirm = async () => {\n    try {\n      const [tokenId] = tokenIds\n\n      await nftMintingContract.methods\n        .burnNFT(tokenId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to burn NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to burn NFT:', err)\n    }\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>${AMOUNT_TO_CLAIM} LIFE</Value>\n        </InfoRow>\n      </ModalContent>\n      <ModalContent>\n        <Text color=\"failure\">\n          {TranslateString(999, 'When you trade in this NFT to receive LIFE, you will lose access to it forever!')}\n        </Text>\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\n      </ModalContent>\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\n          {TranslateString(999, 'I understand')}\n        </Text>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default BurnNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { NFT } from 'config/constants/epic'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftContract = usePancakeRabbits(NFT)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await nftContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n  LogoIcon,\n} from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { AMOUNT_TO_CLAIM } from 'config/constants/epic'\nimport Page from 'components/layout/Page'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport { getNftContract } from '../../utils/contracts'\nimport ClaimNftModal from '../ClaimNftModal'\nimport BurnNftModal from '../BurnNftModal'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst StyledNotFound = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 64px);\n  justify-content: center;\n`\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 0 24px 24px;\n`\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst SmallCard = styled(Card)`\n  margin: 0 auto;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: true,\n    nftCount: 0,\n    nftBurnCount: 0,\n  })\n  const TranslateString = useI18n()\n  const {\n    isInitialized,\n    hasClaimed,\n    ownerById,\n    canBurnNft,\n    totalSupplyDistributed,\n    currentDistributedSupply,\n    getTokenIds,\n    reInitialize,\n    allowMultipleClaims,\n    rarity,\n    priceMultiplier,\n    maxMintPerNft,\n    tokenPerBurn,\n    amounts,\n    maxMintByNft,\n    prices,\n    myMints,\n  } = useContext(NftProviderContext)\n  const { account } = useWallet()\n\n  console.log('CONTRACT/GALLERY INFO:', totalSupplyDistributed, rarity, priceMultiplier, maxMintPerNft, tokenPerBurn)\n  console.log('LIMITS BY NFT:', tokenPerBurn, amounts, maxMintByNft, prices)\n\n  // maxMintPerNft limit max amount that a nft can be minted\n  // maxMintByNft array containing individual amount of mint per nft index\n  // prices array containing individual prices of a mint per nft index\n  // tokenPerBurn global price\n\n  console.log(ownerById)\n\n  const { nftId, name, previewImage, originalImage, fileType, description, metadata, tokenAmount, tokenSupply } = nft\n  const PRICE = prices[nft.nftId] || tokenPerBurn // here we get the price\n\n  const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\n\n  const MINTS = myMints[nftIndex] || 0\n\n  const MINTED = amounts[nftIndex] ? parseInt(amounts[nftIndex].toString()) : 0\n  const MAX_MINT = maxMintByNft[nftIndex] ? parseInt(maxMintByNft[nftIndex].toString()) : maxMintPerNft\n\n  const hasClaimedArr: any = hasClaimed[0]\n  const ownerByIdArr: any = ownerById[0]\n\n  const firstCharOfAccount = account != null && account.slice(0, 4)\n  const lastCharOfAccount = account != null && account.slice(-4)\n\n  const accountName = account != null && `${firstCharOfAccount}...${lastCharOfAccount}`\n\n  const loggedIn = account !== null\n\n  // console.log('?hasClaimed', hasClaimed)\n  // console.log('?ownerById', ownerById)\n\n  const walletCanClaim = maxMintPerNft === 0 || MINTED === undefined || MINTED < MAX_MINT\n\n  const price = Math.round(350 * 1.016282 ** amounts[nftIndex] * 100) / 100\n\n  const tokenIds = getTokenIds(nftId)\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const fetchDetails = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isLoading: true }))\n    try {\n      const { methods } = getNftContract()\n      const nftCount = await methods.nftCount(nftId).call()\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\n\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        nftCount: parseInt(nftCount, 10),\n        nftBurnCount: parseInt(nftBurnCount, 10),\n      }))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [nftId])\n\n  const handleClick = async () => {\n    if (state.isOpen) {\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n    } else {\n      try {\n        await fetchDetails()\n      } catch (error) {\n        console.error(error)\n      } finally {\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n      }\n    }\n  }\n\n  const handleSuccess = () => {\n    fetchDetails()\n    reInitialize()\n  }\n\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  if (isInitialized && loggedIn && MINTS > 0) {\n    return (\n      <SmallCard isActive={walletOwnsNft}>\n        {fileType === 'mp4' && (\n          <video width=\"100%\" loop autoPlay muted>\n            <source src={originalImage} type=\"video/mp4\" />\n            <track kind=\"captions\" />\n          </video>\n        )}\n        {fileType !== 'mp4' && (\n          <Image src={originalImage} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\n        )}\n        <CardBody>\n          <Header>\n            <Heading>{name}</Heading>\n            {isInitialized && walletCanClaim && (\n              <Tag outline variant=\"success\">\n                {TranslateString(526, 'Available')}\n              </Tag>\n            )}\n            {isInitialized && !walletCanClaim && (\n              <Tag outline variant=\"failure\">\n                Sold Out\n              </Tag>\n            )}\n            {isInitialized && tokenIds && (\n              <Tag outline variant=\"secondary\">\n                {TranslateString(999, 'In Wallet')}\n              </Tag>\n            )}\n          </Header>\n          {isInitialized && walletOwnsNft && (\n            <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n              {TranslateString(999, 'Transfer')}\n            </Button>\n          )}\n        </CardBody>\n        <CardFooter p=\"2\">\n          {state.isOpen && (\n            <InfoBlock>\n              <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\n                {description}\n              </Text>\n              <InfoRow>\n                <Text>{TranslateString(999, 'Number minted')}:</Text>\n                <Value>\n                  {MINTED}/{tokenSupply}\n                </Value>\n              </InfoRow>\n              <InfoRow>\n                <Text>{TranslateString(999, 'Minted By Me')}:</Text>\n                <Value>{MINTS}</Value>\n              </InfoRow>\n            </InfoBlock>\n          )}\n        </CardFooter>\n      </SmallCard>\n    )\n  }\n\n  return (\n    <Page>\n      <StyledNotFound>\n        <LogoIcon width=\"64px\" mb=\"8px\" />\n        <Text mb=\"16px\">{TranslateString(999, 'loading...')}</Text>\n      </StyledNotFound>\n    </Page>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\n\nconst NftGrid = styled(BaseLayout)`\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  & > div {\n    grid-column: 2 / 6;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n      grid-column: span 6;\n    }\n  }\n`\n\nexport default NftGrid\n","import React, { useState, useContext, useCallback } from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/epic'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\nimport { NftProviderContext } from '../contexts/NftProvider'\n\nconst NftList = () => {\n  const { myMints, hasClaimed } = useContext(NftProviderContext)\n\n  const filteredNft = []\n\n  nfts.forEach(function (nft, key) {\n    const { nftId, name, previewImage, originalImage, description } = nft\n\n    const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\n\n    const MINTS = myMints[nftIndex] || 0\n\n    if (MINTS > 0) {\n      filteredNft.push(nft)\n    }\n  })\n\n  return (\n    <NftGrid>\n      {orderBy(filteredNft, 'sortOrder').map((nft) => (\n        <div key={nft.name}>\n          <NftCard nft={nft} />\n        </div>\n      ))}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import React, { useContext } from 'react'\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport nfts from 'config/constants/epic'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst NftProgressSimple = () => {\n  const TranslateString = useI18n()\n  const { isInitialized, currentDistributedSupply, totalSupplyDistributed, countBurnt, myMints } =\n    useContext(NftProviderContext)\n\n  let myNFTs = 0\n\n  nfts.forEach(function (nft, key) {\n    const { nftId } = nft\n    const MINTS = myMints[nftId] || 0\n    myNFTs += MINTS\n  })\n\n  return (\n    <Card>\n      <CardBody>\n        <InfoRow>\n          <Text>{TranslateString(999, 'My Epic NFTs')}:</Text>\n          <Text>\n            <strong>{myNFTs}</strong>\n          </Text>\n        </InfoRow>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgressSimple\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NftProgress from './NftProgress'\nimport NftProgressSimple from './NftProgressSimple'\nimport StatusCard from './StatusCard'\n\nconst StyledNtfInfo = styled.div`\n  align-items: start;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst NftInfo = () => {\n  const { canBurnNft } = useContext(NftProviderContext)\n\n  return <NftProgressSimple />\n}\n\nexport default NftInfo\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, LogoIcon, Text, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport { useHistory } from 'react-router-dom'\nimport HowItWorks from './components/HowItWorks'\nimport NftList from './components/NftList'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst StyledNotFound = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 64px);\n  justify-content: center;\n`\n\nconst CustomButton = styled(Button)`\n  margin-right: 20px;\n`\n\nconst GoldenButton = styled(Button)`\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px rgba(139, 66, 8, 1),\n    inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n  background-image: linear-gradient(160deg, #a54e07, #b47e11, #fef1a2, #bc881b, #a54e07);\n  border: 1px solid #a55d07;\n  color: rgb(120, 50, 5);\n  text-shadow: 0 2px 2px rgba(250, 227, 133, 1);\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  background-size: 100% 100%;\n  background-position: center;\n\n  &:focus,\n  &:hover {\n    background-size: 150% 150%;\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23), inset 0 -2px 5px 1px #b17d10,\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n    border: 1px solid rgba(165, 93, 7, 0.6);\n    color: rgba(120, 50, 5, 0.8);\n  }\n  &:active {\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px #b17d10,\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n  }\n`\n\nconst Nft = () => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const history = useHistory()\n\n  if (account) {\n    return (\n      <NftProvider>\n        <Page>\n          <StyledHero>\n            <Heading as=\"h1\" size=\"xl\" color=\"#9f0d0d\" mb=\"24px\">\n              My Epic Collection\n            </Heading>\n            <CustomButton onClick={() => history.push(`my-collection`)} mt=\"24px\">\n              Base and Rare NFTs\n            </CustomButton>\n            <CustomButton variant=\"subtle\" onClick={() => history.push(`my-epic-collection`)} mt=\"24px\">\n              Epic NFTs\n            </CustomButton>\n            <GoldenButton onClick={() => history.push(`my-legendary-collection`)} mt=\"24px\">\n              Legendary NFTs\n            </GoldenButton>\n          </StyledHero>\n          <NftInfo />\n          <NftList />\n        </Page>\n      </NftProvider>\n    )\n  }\n\n  return (\n    <Page>\n      <StyledNotFound>\n        <LogoIcon width=\"64px\" mb=\"8px\" />\n        <Text mb=\"16px\">{TranslateString(999, 'Empty Collection')}</Text>\n      </StyledNotFound>\n    </Page>\n  )\n}\n\nexport default Nft\n"],"sourceRoot":""}