{"version":3,"sources":["config/constants/nfts.ts","config/constants/legendary.ts","views/Legendary/components/InfoRow.tsx","views/Legendary/components/Image.tsx","views/Legendary/utils/contracts.ts","views/Legendary/contexts/NftProvider.tsx","views/Legendary/components/ClaimNftModal.tsx","views/Legendary/components/BurnNftModal.tsx","views/Legendary/components/TransferNftModal.tsx","views/Legendary/components/NftCard/index.tsx","views/Legendary/components/NftGrid.tsx","views/Legendary/components/NftList.tsx","views/Legendary/components/NftProgressSimple.tsx","views/Legendary/components/NftInfo.tsx","views/Legendary/index.tsx"],"names":["NftFarm","NFT","AMOUNT_TO_CLAIM","Nfts","name","metadata","description","previewImage","originalImage","fileType","blurImage","sortOrder","nftId","tokenAmount","tokenSupply","nftFarmContract","nftContract","LegendaryNftFarm","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","href","target","rel","getNftContract","contractOptions","nftAbi","nft","getContract","getFromWayArray","v","array","t","length","i","push","fromWei","toString","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","useState","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","state","setState","account","useWallet","currentBlock","useBlock","useEffect","a","multicall","epicNftFarm","address","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","toNumber","console","error","fetchContractData","params","getMinted","log","methods","call","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","fetchNonLoggedInContractData","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Value","Text","ModalContent","Actions","ClaimNftModal","onSuccess","onDismiss","isLoading","setIsLoading","pendingTx","setPendingTx","setError","TranslateString","useI18n","nftMintingContract","useRabbitMintingFarm","contraToken","useERC20","getLifeAddress","allowance","useNftAllowance","onApprove","useNftApprove","cakeBalance","useTokenBalance","cakeInWallet","getBalanceNumber","handleConfirm","mintNFT","send","from","on","title","color","mb","fullWidth","disabled","onClick","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","style","alignItems","display","checked","scale","onChange","ml","cursor","variant","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","Web3","utils","isAddress","transferFrom","htmlFor","id","type","placeholder","evt","inputValue","isWarning","Header","DetailsButton","Button","attrs","InfoBlock","ViewNft","NftCard","isOpen","nftCount","nftBurnCount","useContext","history","useHistory","firstCharOfAccount","slice","lastCharOfAccount","loggedIn","nftIndex","indexOf","MINTS","MINTED","MAX_MINT","walletCanClaim","undefined","price","Math","round","isSupplyAvailable","walletOwnsNft","Icon","ChevronUpIcon","ChevronDownIcon","fetchDetails","useCallback","isDataFetched","handleClick","handleSuccess","useModal","onPresentClaimModal","onPresentBurnModal","onPresentTransferModal","isActive","outline","mt","p","endIcon","width","as","textAlign","NftGrid","BaseLayout","mediaQueries","sm","NftList","orderBy","nfts","map","NftProgressSimple","NftInfo","StyledHero","textSubtle","CustomButton","GoldenButton","Nft","Page","size"],"mappings":"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","file":"static/js/25.38b9f568.chunk.js","sourcesContent":["import { Nft } from './types'\r\n\r\nexport const NftFarm = '0xaBa054F1437aEBEa43fB0804b734DdB3F39FB62F'\r\nexport const NFT = '0xA81Ab2D03b9E3a62BDBb837d417A5E221F754E14'\r\nexport const AMOUNT_TO_CLAIM = '10'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Count Pepes Chocula',\r\n    metadata: 'tier-NFT-base-dark-chocolate.json',\r\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-dark-chocolate.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 0,\r\n    nftId: 0,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Vlad Pepes Drakul',\r\n    metadata: 'tier-NFT-base-main-nopaint.json',\r\n    description: 'The legend behind the meme in all his original glory. Part of the base tier of Vlad NFTs',\r\n    previewImage: 'preview-base-main-nopaint.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWckPrzbjvf8jqUpdQ7jKLzdaSBTyPSV6x6obSUHHipqc?filename=NFT-base-main-nopaint.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 1,\r\n    nftId: 1,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Pepes in Stone',\r\n    metadata: 'tier-NFT-base-marble.json',\r\n    description:\r\n      'The count has turned into a marble statue ready for display in the halls of Vladhalla. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-marble.jpg',\r\n    originalImage: 'https://ipfs.io/ipfs/QmSnz85drLjCD4qNgaMwHFC6PFEkGrmYhM1LpHwZWpEWaQ?filename=NFT-base-marble.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 2,\r\n    nftId: 2,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'The path to Vladhalla',\r\n    metadata: '',\r\n    description: 'All who seek to find the path to Vladhalla must have strong hands along the way to immortality.',\r\n    previewImage: 'preview-path-to-vladhalla.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmQWAeV3aAWD2Kbvxmtt4H874AEf7M7N5FcBos4iZbkRcj?filename=NFT-rare-path-to-vladhalla.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 3,\r\n    nftId: 3,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Painted Pepe',\r\n    metadata: '',\r\n    description:\r\n      'As an homage to the original Vlad Pepes Drakul this retains his painted face hang him in your gallery for eternal viewing.',\r\n    previewImage: 'preview-painted-pepes.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmRqe92vpppkNS2aihmdvswHstAiHAF4jC2KUAiec5LKKk?filename=NFT-rare-painted-pepes.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 4,\r\n    nftId: 4,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 5,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import { Nft } from './types'\r\n\r\nexport const LegendaryNftFarm = '0x6a63AF63675D3c9D498DF43Aa163F9243E7b4646'\r\nexport const NFT = '0x3F7C7C24fFA2ceFfaACE11B39D5b8a575A4B0674'\r\nexport const AMOUNT_TO_CLAIM = '10'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Golden Pepes',\r\n    metadata: '',\r\n    description:\r\n      'For a brief period in time Pepe Drakul led a very powerful unit known as the 7 golden Vampires. He commissioned a bust made of the purest gold to commemorate his time with them.',\r\n    previewImage: 'preview-golden-pepes.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/Qmdv1t4kUa8YSP8rpZTXLKvpycnijWJdCSpjsN8sjArGx8?filename=NFT-legendary-pepes-gold.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 3,\r\n    nftId: 3,\r\n    tokenAmount: 1200,\r\n    tokenSupply: 6,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Immortality',\r\n    metadata: '',\r\n    description:\r\n      'Those who have ever held the Chalice of LIFE are granted Immortality. Do not fear eternal sleep/slumber, for it will not come for you.',\r\n    previewImage: 'preview-immortality.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmaHeTsV6AnhqWDAeBUvwmQbo7RC6bM1jQzVQUCQSLg9Bp?filename=NFT-legendary-immortality.png',\r\n    fileType: 'png',\r\n    blurImage: '',\r\n    sortOrder: 4,\r\n    nftId: 4,\r\n    tokenAmount: 1200,\r\n    tokenSupply: 6,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'The VladFather',\r\n    metadata: '',\r\n    description:\r\n      'His sceptre slammed into the marble floor with a crack, prompting the artist to begin. How many final breaths has that hand taken from his enemies? His eyes, wildly electric and filled with menace, and a stance that dares you to make your move. I don’t envy the one tasked with creating this portrait. Pepe Drakul has only ever posed for one drawing and this is it.',\r\n    previewImage: 'preview-the-vladfather.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmVEdevPc1nFLJrFQK4GsJtcS5486uaQE73mo7aKjw13ph?filename=NFT-legendary-vlad-father.png',\r\n    fileType: 'png',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 5,\r\n    tokenAmount: 1200,\r\n    tokenSupply: 6,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import styled from 'styled-components'\r\n\r\nconst InfoRow = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport default InfoRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface ImageProps {\r\n  src: string\r\n  alt: string\r\n  originalLink?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  position: relative;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  padding-bottom: 100%;\r\n`\r\n\r\nconst StyledImage = styled.img`\r\n  position: absolute;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  transition: opacity 1s linear;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  border-radius: 32px 32px 0 0;\r\n`\r\n\r\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\r\n  const previewImage = <StyledImage src={src} alt={alt} />\r\n\r\n  return (\r\n    <Container>\r\n      {originalLink ? (\r\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\r\n          {previewImage}\r\n        </a>\r\n      ) : (\r\n        previewImage\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Image\r\n","import { AbiItem, fromWei } from 'web3-utils'\r\nimport { getContract } from 'utils/web3'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport nftFarm from 'config/abi/NftFarm.json'\r\nimport nft from 'config/abi/NFT.json'\r\nimport { NftFarm, NFT } from 'config/constants/nfts'\r\nimport BigNumber from 'bignumber.js'\r\n// TODO: Figure out how to add current account to contracts to write methods can be used\r\n\r\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\r\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nft as unknown as AbiItem\r\n  return getContract(nftAbi, NFT, contractOptions)\r\n}\r\n\r\nexport const getFromWei = (v: any) => {\r\n  if (!v) return 0\r\n  return parseFloat(fromWei(v.toString(), 'ether'))\r\n}\r\n\r\nexport const getFromWayArray = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(fromWei(v[i].toString(), 'ether'))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToFloat = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseInt(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToInt = (v: any) => {\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseFloat(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport default getNftMintingContract\r\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useBlock from 'hooks/useBlock'\r\nimport epicNftFarm from 'config/abi/epicNftFarm.json'\r\nimport { LegendaryNftFarm } from 'config/constants/legendary'\r\nimport multicall from 'utils/multicall'\r\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\r\n\r\ninterface NftProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\ntype BunnyMap = {\r\n  [key: number]: number[]\r\n}\r\n\r\ntype State = {\r\n  isInitialized: boolean\r\n  hasClaimed: number[]\r\n  ownerById: number[]\r\n  amounts: number[]\r\n  maxMintByNft: number[]\r\n  prices: number[]\r\n  myMints: number[]\r\n  countBurnt: number\r\n  endBlockNumber: number\r\n  startBlockNumber: number\r\n  totalSupplyDistributed: number\r\n  currentDistributedSupply: number\r\n  balanceOf: number\r\n  nftMap: BunnyMap\r\n\r\n  allowMultipleClaims: boolean\r\n  rarity: string\r\n  priceMultiplier: number\r\n  maxMintPerNft: number\r\n  tokenPerBurn: number\r\n}\r\n\r\ntype Context = {\r\n  canBurnNft: boolean\r\n  getTokenIds: (nftId: number) => number[]\r\n  reInitialize: () => void\r\n} & State\r\n\r\nexport const NftProviderContext = createContext<Context | null>(null)\r\n\r\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\r\n  const isMounted = useRef(true)\r\n  const [state, setState] = useState<State>({\r\n    isInitialized: false,\r\n    hasClaimed: [],\r\n    ownerById: [],\r\n    countBurnt: 0,\r\n    startBlockNumber: 0,\r\n    endBlockNumber: 0,\r\n    totalSupplyDistributed: 0,\r\n    currentDistributedSupply: 0,\r\n    balanceOf: 0,\r\n    nftMap: {},\r\n\r\n    allowMultipleClaims: true,\r\n    rarity: '',\r\n    priceMultiplier: 0,\r\n    maxMintPerNft: 0,\r\n    tokenPerBurn: 0,\r\n\r\n    amounts: [],\r\n    maxMintByNft: [],\r\n    prices: [],\r\n    myMints: [],\r\n  })\r\n  const { account } = useWallet()\r\n  const currentBlock = useBlock()\r\n\r\n  const { isInitialized } = state\r\n\r\n  // Static data\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const [\r\n          startBlockNumberArr,\r\n          endBlockNumberArr,\r\n          countBurntArr,\r\n          totalSupplyDistributedArr,\r\n          currentDistributedSupplyArr,\r\n\r\n          allowMultipleClaimsArr,\r\n          rarityArr,\r\n          priceMultiplierArr,\r\n          maxMintPerNftArr,\r\n          tokenPerBurnArr,\r\n        ] = await multicall(epicNftFarm, [\r\n          { address: LegendaryNftFarm, name: 'startBlockNumber' },\r\n          { address: LegendaryNftFarm, name: 'endBlockNumber' },\r\n          { address: LegendaryNftFarm, name: 'countBurnt' },\r\n          { address: LegendaryNftFarm, name: 'totalSupplyDistributed' },\r\n          { address: LegendaryNftFarm, name: 'currentDistributedSupply' },\r\n          { address: LegendaryNftFarm, name: 'allowMultipleClaims' },\r\n          { address: LegendaryNftFarm, name: 'rarity' },\r\n          { address: LegendaryNftFarm, name: 'priceMultiplier' },\r\n          { address: LegendaryNftFarm, name: 'maxMintPerNft' },\r\n          { address: LegendaryNftFarm, name: 'tokenPerBurn' },\r\n        ])\r\n\r\n        // TODO: Figure out why these are coming back as arrays\r\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\r\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\r\n        const [countBurnt]: [BigNumber] = countBurntArr\r\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          countBurnt: countBurnt.toNumber(),\r\n          startBlockNumber: startBlockNumber.toNumber(),\r\n          endBlockNumber: endBlockNumber.toNumber(),\r\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\r\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\r\n          allowMultipleClaims: allowMultipleClaimsArr[0],\r\n          rarity: rarityArr[0].toString(),\r\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\r\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\r\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    fetchContractData()\r\n  }, [isInitialized, setState])\r\n\r\n  // Data from the contract that needs an account\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const nftContract = getNftContract()\r\n\r\n        const getMinted = await multicall(epicNftFarm, [\r\n          { address: LegendaryNftFarm, name: 'getMinted', params: [account] },\r\n        ])\r\n\r\n        // console.log('getMinted', getMinted)\r\n\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n        const ownerById = getMinted[0][2]\r\n        const maxMintByNft = getToInt(getMinted[0][3])\r\n        const prices = getFromWayArray(getMinted[0][4])\r\n        const myMints = getToInt(getMinted[0][5])\r\n\r\n        // console.log('hasClaimed', hasClaimed)\r\n        // console.log('amounts', amounts)\r\n        // console.log('ownerById', ownerById)\r\n        // console.log('maxMintByNft', maxMintByNft)\r\n        // console.log('prices', prices)\r\n        console.log('myMints', myMints)\r\n\r\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\r\n\r\n        let nftMap: BunnyMap = {}\r\n\r\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\r\n        // owned by the wallet, then the nftId's associated with the tokenIds\r\n        if (balanceOf > 0) {\r\n          const getTokenIdAndBunnyId = async (index: number) => {\r\n            try {\r\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\r\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\r\n\r\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\r\n            } catch (error) {\r\n              return null\r\n            }\r\n          }\r\n\r\n          const tokenIdPromises = []\r\n\r\n          for (let i = 0; i < balanceOf; i++) {\r\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\r\n          }\r\n\r\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\r\n\r\n          // While improbable a wallet can own more than one of the same nft so the format is:\r\n          // { [nftId]: [array of tokenIds] }\r\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\r\n            if (!association) {\r\n              return accum\r\n            }\r\n\r\n            const [nftId, tokenId] = association\r\n\r\n            return {\r\n              ...accum,\r\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\r\n            }\r\n          }, {})\r\n        }\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          ownerById,\r\n          balanceOf,\r\n          nftMap,\r\n\r\n          amounts,\r\n          maxMintByNft,\r\n          prices,\r\n          myMints,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    const fetchNonLoggedInContractData = async () => {\r\n      try {\r\n        const getMinted = await multicall(epicNftFarm, [\r\n          { address: LegendaryNftFarm, name: 'getMinted', params: ['0x0000000000000000000000000000000000000000'] },\r\n        ])\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          amounts,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchContractData()\r\n    } else {\r\n      fetchNonLoggedInContractData()\r\n    }\r\n  }, [isInitialized, account, setState])\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false\r\n    }\r\n  }, [isMounted])\r\n\r\n  const canBurnNft = currentBlock <= state.endBlockNumber\r\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\r\n\r\n  /**\r\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\r\n   * For example when a transaction has been completed\r\n   */\r\n  const reInitialize = () => {\r\n    // Only attempt to re-initialize if the component is still mounted\r\n    // Transactions can take awhile so it is likely some users will navigate to another page\r\n    // before the transaction is finished\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\r\n      {children}\r\n    </NftProviderContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NftProvider\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { LegendaryNftFarm, AMOUNT_TO_CLAIM } from 'config/constants/legendary'\r\nimport { getLifeAddress } from 'utils/addressHelpers'\r\nimport { Nft } from 'config/constants/types'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useERC20, useRabbitMintingFarm } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\nimport { useNftAllowance } from '../../../hooks/useAllowance'\r\nimport { useNftApprove } from '../../../hooks/useApprove'\r\n\r\ninterface ClaimNftModalProps {\r\n  nft: Nft\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const nftMintingContract = useRabbitMintingFarm(LegendaryNftFarm)\r\n  const contraToken = useERC20(getLifeAddress())\r\n  const allowance = useNftAllowance(contraToken, LegendaryNftFarm, pendingTx)\r\n  const onApprove = useNftApprove(contraToken, LegendaryNftFarm)\r\n  const cakeBalance = useTokenBalance(getLifeAddress())\r\n  const cakeInWallet = getBalanceNumber(cakeBalance)\r\n\r\n  // console.log('getLifeAddress', getLifeAddress(), LegendaryNftFarm, allowance)\r\n  // console.log('allowance', allowance)\r\n\r\n  const handleConfirm = async () => {\r\n    if (allowance === null) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      await nftMintingContract.methods\r\n        .mintNFT(nft.nftId)\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          onDismiss()\r\n          onSuccess()\r\n        })\r\n        .on('error', () => {\r\n          console.error(error)\r\n          setError('Unable to claim NFT')\r\n          setIsLoading(false)\r\n        })\r\n    } catch (err) {\r\n      console.error('Unable to mint NFT:', err)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (cakeInWallet === 0) {\r\n      setError(`You must have LIFE balance to claim NFT`)\r\n    }\r\n  }, [cakeInWallet, setError])\r\n\r\n  return (\r\n    <Modal title={`Claim NFT for ${nft.tokenAmount} LIFE`} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button\r\n          fullWidth\r\n          disabled={!account || pendingTx || isLoading || allowance > 0}\r\n          onClick={async () => {\r\n            try {\r\n              setPendingTx(true)\r\n              await onApprove()\r\n              setPendingTx(false)\r\n            } catch (e) {\r\n              setPendingTx(false)\r\n              console.error(e)\r\n            }\r\n          }}\r\n        >\r\n          Approve\r\n        </Button>\r\n\r\n        <Button\r\n          fullWidth\r\n          onClick={handleConfirm}\r\n          disabled={!account || isLoading || cakeInWallet <= 0 || allowance <= 0}\r\n        >\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimNftModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Nft } from 'config/constants/types'\r\nimport { LegendaryNftFarm, AMOUNT_TO_CLAIM } from 'config/constants/legendary'\r\nimport { useRabbitMintingFarm } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface BurnNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const [accepted, setAccepted] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const nftMintingContract = useRabbitMintingFarm(LegendaryNftFarm)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const [tokenId] = tokenIds\r\n\r\n      await nftMintingContract.methods\r\n        .burnNFT(tokenId)\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          onDismiss()\r\n          onSuccess()\r\n        })\r\n        .on('error', () => {\r\n          console.error(error)\r\n          setError('Unable to burn NFT')\r\n          setIsLoading(false)\r\n        })\r\n    } catch (err) {\r\n      console.error('Unable to burn NFT:', err)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\r\n          <Value>${AMOUNT_TO_CLAIM} LIFE</Value>\r\n        </InfoRow>\r\n      </ModalContent>\r\n      <ModalContent>\r\n        <Text color=\"failure\">\r\n          {TranslateString(999, 'When you trade in this NFT to receive LIFE, you will lose access to it forever!')}\r\n        </Text>\r\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\r\n      </ModalContent>\r\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\r\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\r\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\r\n          {TranslateString(999, 'I understand')}\r\n        </Text>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default BurnNftModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Web3 from 'web3'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport { NFT } from 'config/constants/legendary'\r\nimport { Nft } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { usePancakeRabbits } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface TransferNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst Label = styled.label`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  margin-top: 24px;\r\n`\r\n\r\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [value, setValue] = useState('')\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const nftContract = usePancakeRabbits(NFT)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const isValidAddress = Web3.utils.isAddress(value)\r\n\r\n      if (!isValidAddress) {\r\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\r\n      } else {\r\n        await nftContract.methods\r\n          .transferFrom(account, value, tokenIds[0])\r\n          .send({ from: account })\r\n          .on('sending', () => {\r\n            setIsLoading(true)\r\n          })\r\n          .on('receipt', () => {\r\n            onDismiss()\r\n            onSuccess()\r\n          })\r\n          .on('error', () => {\r\n            console.error(error)\r\n            setError('Unable to transfer NFT')\r\n            setIsLoading(false)\r\n          })\r\n      }\r\n    } catch (err) {\r\n      console.error('Unable to transfer NFT:', err)\r\n    }\r\n  }\r\n\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value: inputValue } = evt.target\r\n    setValue(inputValue)\r\n  }\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\r\n        <Input\r\n          id=\"transferAddress\"\r\n          name=\"address\"\r\n          type=\"text\"\r\n          placeholder={TranslateString(999, 'Paste address')}\r\n          value={value}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        />\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default TransferNftModal\r\n","import React, { useState, useContext, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Tag,\r\n  Button,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n  Text,\r\n  CardFooter,\r\n  useModal,\r\n} from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Nft } from 'config/constants/types'\r\nimport { AMOUNT_TO_CLAIM } from 'config/constants/legendary'\r\nimport { useHistory } from 'react-router-dom'\r\nimport InfoRow from '../InfoRow'\r\nimport Image from '../Image'\r\nimport { NftProviderContext } from '../../contexts/NftProvider'\r\nimport { getNftContract } from '../../utils/contracts'\r\nimport ClaimNftModal from '../ClaimNftModal'\r\nimport BurnNftModal from '../BurnNftModal'\r\nimport TransferNftModal from '../TransferNftModal'\r\n\r\ninterface NftCardProps {\r\n  nft: Nft\r\n}\r\n\r\nconst Header = styled(InfoRow)`\r\n  min-height: 44px;\r\n`\r\n\r\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\r\n  height: auto;\r\n  padding: 16px 24px;\r\n\r\n  &:hover:not(:disabled):not(:active) {\r\n    background-color: transparent;\r\n  }\r\n\r\n  &:focus:not(:active) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\nconst InfoBlock = styled.div`\r\n  padding: 0 24px 24px;\r\n`\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ViewNft = styled(Text)`\r\n  @media (max-width: 1300px) {\r\n    font-size: 11px;\r\n  }\r\n`\r\n\r\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\r\n  const [state, setState] = useState({\r\n    isLoading: false,\r\n    isOpen: false,\r\n    nftCount: 0,\r\n    nftBurnCount: 0,\r\n  })\r\n  const TranslateString = useI18n()\r\n  const {\r\n    isInitialized,\r\n    hasClaimed,\r\n    ownerById,\r\n    canBurnNft,\r\n    totalSupplyDistributed,\r\n    currentDistributedSupply,\r\n    getTokenIds,\r\n    reInitialize,\r\n    allowMultipleClaims,\r\n    rarity,\r\n    priceMultiplier,\r\n    maxMintPerNft,\r\n    tokenPerBurn,\r\n    amounts,\r\n    maxMintByNft,\r\n    prices,\r\n    myMints,\r\n  } = useContext(NftProviderContext)\r\n  const { account } = useWallet()\r\n  const history = useHistory()\r\n\r\n  // maxMintPerNft limit max amount that a nft can be minted\r\n  // maxMintByNft array containing individual amount of mint per nft index\r\n  // prices array containing individual prices of a mint per nft index\r\n  // tokenPerBurn global price\r\n\r\n  const { nftId, name, previewImage, originalImage, description, tokenAmount, tokenSupply } = nft\r\n  const PRICE = prices[nftId] || tokenPerBurn // here we get the price\r\n\r\n  const firstCharOfAccount = account != null && account.slice(0, 4)\r\n  const lastCharOfAccount = account != null && account.slice(-4)\r\n\r\n  const accountName = account != null && `${firstCharOfAccount}...${lastCharOfAccount}`\r\n\r\n  const loggedIn = account !== null\r\n\r\n  console.log('?hasClaimed', hasClaimed)\r\n  // console.log('?ownerById', ownerById)\r\n\r\n  const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\r\n\r\n  console.log('nftId', nftId)\r\n  console.log('nftIndex', nftIndex)\r\n\r\n  const MINTS = myMints[nftIndex] || 0\r\n\r\n  // not sure about this, you need to check if this oser own this nft in the view nft page.\r\n  const youAreTheLastOwner = ownerById && ownerById[nftIndex] && ownerById[nftIndex].toString() === account.toString()\r\n\r\n  const MINTED = amounts[nftIndex] ? parseInt(amounts[nftIndex].toString()) : 0\r\n  const MAX_MINT = maxMintByNft[nftIndex] ? parseInt(maxMintByNft[nftIndex].toString()) : 6\r\n\r\n  const walletCanClaim = maxMintPerNft === 0 || MINTED === undefined || MINTED < MAX_MINT\r\n\r\n  let price = 1200\r\n\r\n  if (amounts && amounts[nftIndex]) {\r\n    price = Math.round(1200 * 1.37973 ** amounts[nftIndex] * 100) / 100\r\n  }\r\n\r\n  // console.log('CONTRACT/GALLERY INFO:', totalSupplyDistributed, rarity, priceMultiplier, maxMintPerNft, tokenPerBurn)\r\n  // console.log('LIMITS BY NFT:', tokenPerBurn, amounts, maxMintByNft, prices)\r\n  console.log(nftId, 'walletCanClaim', walletCanClaim, MAX_MINT, MINTED, MAX_MINT)\r\n\r\n  const tokenIds = getTokenIds(nftId)\r\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\r\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\r\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\r\n\r\n  const fetchDetails = useCallback(async () => {\r\n    setState((prevState) => ({ ...prevState, isLoading: true }))\r\n    try {\r\n      const { methods } = getNftContract()\r\n      const nftCount = await methods.nftCount(nftId).call()\r\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: false,\r\n        isDataFetched: true,\r\n        nftCount: parseInt(nftCount, 10),\r\n        nftBurnCount: parseInt(nftBurnCount, 10),\r\n      }))\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }, [nftId])\r\n\r\n  const handleClick = async () => {\r\n    if (state.isOpen) {\r\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\r\n    } else {\r\n      try {\r\n        await fetchDetails()\r\n      } catch (error) {\r\n        console.error(error)\r\n      } finally {\r\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleSuccess = () => {\r\n    fetchDetails()\r\n    reInitialize()\r\n  }\r\n\r\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\r\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\r\n  const [onPresentTransferModal] = useModal(\r\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\r\n  )\r\n\r\n  return (\r\n    <Card isActive={walletOwnsNft}>\r\n      <Image src={`/images/nfts/${previewImage}`} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\r\n      <CardBody>\r\n        <Header>\r\n          <Heading>{name}</Heading>\r\n          {isInitialized && walletCanClaim && (\r\n            <Tag outline variant=\"success\">\r\n              {TranslateString(526, 'Available')}\r\n            </Tag>\r\n          )}\r\n          {isInitialized && !walletCanClaim && (\r\n            <Tag outline variant=\"failure\">\r\n              Sold Out\r\n            </Tag>\r\n          )}\r\n          {isInitialized && tokenIds && (\r\n            <Tag outline variant=\"secondary\">\r\n              {TranslateString(999, 'In Wallet')}\r\n            </Tag>\r\n          )}\r\n        </Header>\r\n        {isInitialized && walletOwnsNft && (\r\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\r\n            {TranslateString(999, 'Transfer')}\r\n          </Button>\r\n        )}\r\n        {isInitialized && loggedIn && walletCanClaim && isSupplyAvailable && (\r\n          <Button fullWidth onClick={onPresentClaimModal} mt=\"24px\">\r\n            {TranslateString(999, 'Claim this NFT')} for {price} LIFE\r\n          </Button>\r\n        )}\r\n        {isInitialized && (\r\n          <Button fullWidth onClick={() => history.push(`legendary-detail/${nftId}`)} mt=\"24px\">\r\n            <ViewNft>\r\n              View NFT ({MINTED}/{tokenSupply} MINTED)\r\n            </ViewNft>\r\n          </Button>\r\n        )}\r\n        {isInitialized && canBurnNft && walletOwnsNft && (\r\n          <Button variant=\"danger\" fullWidth onClick={onPresentBurnModal} mt=\"24px\">\r\n            {TranslateString(999, 'Trade in for LIFE')}\r\n          </Button>\r\n        )}\r\n      </CardBody>\r\n      <CardFooter p=\"0\">\r\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\r\n          {state.isLoading ? TranslateString(999, 'Loading...') : TranslateString(999, 'Details')}\r\n        </DetailsButton>\r\n        {state.isOpen && (\r\n          <InfoBlock>\r\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\r\n              {description}\r\n            </Text>\r\n            <InfoRow>\r\n              <Text>{TranslateString(999, 'Number minted')}:</Text>\r\n              <Value>\r\n                {MINTED}/{tokenSupply}\r\n              </Value>\r\n            </InfoRow>\r\n            <InfoRow>\r\n              <Text>{TranslateString(999, 'Minted By Me')}:</Text>\r\n              <Value>{MINTS}</Value>\r\n            </InfoRow>\r\n          </InfoBlock>\r\n        )}\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NftCard\r\n","import styled from 'styled-components'\r\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\r\n\r\nconst NftGrid = styled(BaseLayout)`\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n\r\n  & > div {\r\n    grid-column: 2 / 6;\r\n\r\n    ${({ theme }) => theme.mediaQueries.sm} {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nexport default NftGrid\r\n","import React from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport nfts from 'config/constants/legendary'\r\nimport NftCard from './NftCard'\r\nimport NftGrid from './NftGrid'\r\n\r\nconst NftList = () => {\r\n  return (\r\n    <NftGrid>\r\n      {orderBy(nfts, 'sortOrder').map((nft) => (\r\n        <div key={nft.name}>\r\n          <NftCard nft={nft} />\r\n        </div>\r\n      ))}\r\n    </NftGrid>\r\n  )\r\n}\r\n\r\nexport default NftList\r\n","import React, { useContext } from 'react'\r\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { NftProviderContext } from '../contexts/NftProvider'\r\nimport InfoRow from './InfoRow'\r\n\r\nconst NftProgressSimple = () => {\r\n  const TranslateString = useI18n()\r\n  const { isInitialized, currentDistributedSupply, totalSupplyDistributed, countBurnt } = useContext(NftProviderContext)\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody>\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Total Epic and Legendary NFTs')}:</Text>\r\n          <Text>\r\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\r\n          </Text>\r\n        </InfoRow>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NftProgressSimple\r\n","import React, { useContext } from 'react'\r\nimport styled from 'styled-components'\r\nimport { NftProviderContext } from '../contexts/NftProvider'\r\nimport NftProgress from './NftProgress'\r\nimport NftProgressSimple from './NftProgressSimple'\r\nimport StatusCard from './StatusCard'\r\n\r\nconst StyledNtfInfo = styled.div`\r\n  align-items: start;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-gap: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n`\r\n\r\nconst NftInfo = () => {\r\n  const { canBurnNft } = useContext(NftProviderContext)\r\n\r\n  return <NftProgressSimple />\r\n}\r\n\r\nexport default NftInfo\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport { useHistory, Link } from 'react-router-dom'\r\nimport HowItWorks from './components/HowItWorks'\r\nimport NftList from './components/NftList'\r\nimport NftProvider from './contexts/NftProvider'\r\nimport NftInfo from './components/NftInfo'\r\n\r\nconst StyledHero = styled.div`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\r\n  margin-bottom: 24px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst CustomButton = styled(Button)`\r\n  margin-right: 20px;\r\n`\r\n\r\nconst GoldenButton = styled(Button)`\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px rgba(139, 66, 8, 1),\r\n    inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n  background-image: linear-gradient(160deg, #a54e07, #b47e11, #fef1a2, #bc881b, #a54e07);\r\n  border: 1px solid #a55d07;\r\n  color: rgb(120, 50, 5);\r\n  text-shadow: 0 2px 2px rgba(250, 227, 133, 1);\r\n  cursor: pointer;\r\n  transition: all 0.2s ease-in-out;\r\n  background-size: 100% 100%;\r\n  background-position: center;\r\n\r\n  &:focus,\r\n  &:hover {\r\n    background-size: 150% 150%;\r\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23), inset 0 -2px 5px 1px #b17d10,\r\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n    border: 1px solid rgba(165, 93, 7, 0.6);\r\n    color: rgba(120, 50, 5, 0.8);\r\n  }\r\n  &:active {\r\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px #b17d10,\r\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n  }\r\n`\r\n\r\nconst Nft = () => {\r\n  const TranslateString = useI18n()\r\n  const history = useHistory()\r\n\r\n  return (\r\n    <NftProvider>\r\n      <Page>\r\n        <StyledHero>\r\n          <Heading as=\"h1\" size=\"xl\" color=\"#9f0d0d\" mb=\"24px\">\r\n            Legendary NFTs\r\n          </Heading>\r\n          <Heading as=\"h2\" size=\"lg\" color=\"#9f0d0d\">\r\n            {TranslateString(999, 'Trade in for LIFE, or keep for your collection!')}\r\n          </Heading>\r\n          <CustomButton onClick={() => history.push(`nft`)} mt=\"24px\">\r\n            Base and Rare NFTs\r\n          </CustomButton>\r\n          <CustomButton variant=\"subtle\" onClick={() => history.push(`epic`)} mt=\"24px\">\r\n            Epic NFTs\r\n          </CustomButton>\r\n          <GoldenButton onClick={() => history.push(`legendary`)} mt=\"24px\">\r\n            Legendary NFTs\r\n          </GoldenButton>\r\n        </StyledHero>\r\n        <NftInfo />\r\n        <NftList />\r\n      </Page>\r\n    </NftProvider>\r\n  )\r\n}\r\n\r\nexport default Nft\r\n"],"sourceRoot":""}