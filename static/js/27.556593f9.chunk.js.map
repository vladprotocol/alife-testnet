{"version":3,"sources":["config/constants/nfts.ts","hooks/useBlock.ts","config/constants/allnfts.ts","views/MyCollection/utils/contracts.ts","utils/index.ts","utils/getNftDetailData.ts","views/MyCollection/contexts/NftProvider.tsx","views/MyCollection/components/InfoRow.tsx","views/MyCollection/components/TransferNftModal.tsx","views/MyCollection/components/NftTable.tsx","views/MyCollection/components/NftProgressSimple.tsx","views/MyCollection/components/NftInfo.tsx","views/MyCollection/index.tsx"],"names":["NftFarm","NFT","AMOUNT_TO_CLAIM","Nfts","name","metadata","description","previewImage","originalImage","fileType","blurImage","sortOrder","nftId","tokenAmount","tokenSupply","nftFarmContract","nftContract","useBlock","useContext","BlockContext","getNftContract","contractOptions","nftAbi","nft","getContract","getFromWayArray","v","array","t","length","i","push","fromWei","toString","getToFloat","parseInt","getToInt","parseFloat","getUrlPartsInfo","fullUrl","fullUrlArray","split","protocol","host","path","slice","join","getNftDetailData","tokenURI","a","data","image","rarity","error","fetch","response","json","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","useState","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","nftTableData","state","setState","account","useWallet","currentBlock","useEffect","multicall","nftFarm","address","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","toNumber","console","fetchContractData","params","getMinted","methods","call","getTokenIdAndNftId","index","tokenOfOwnerByIndex","tokenId","getNftId","getNftData","nftName","hash","hashId","substring","nftDetailLink","nftPreviewImage","nfts","filter","map","type","tokenIdPromises","nftTablePromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","current","canBurnNft","Provider","value","getTokenIds","reInitialize","InfoRow","styled","div","Value","Text","ModalContent","Actions","Label","label","theme","colors","text","TransferNftModal","tokenIds","onSuccess","onDismiss","isLoading","setIsLoading","values","setValues","setError","TranslateString","useI18n","usePancakeRabbits","handleConfirm","Web3","utils","isAddress","transferFrom","send","from","on","title","color","mb","htmlFor","id","placeholder","onChange","evt","target","inputValue","isWarning","disabled","fullWidth","variant","onClick","NftTable","isOpen","onTransfer","useCallback","isDataFetched","handleSuccess","columns","dataIndex","render","record","style","fontWeight","fontSize","src","alt","width","height","objectFit","borderRadius","key","as","Link","to","ModalWrapper","onPresentTransferModal","mt","dataSource","marginTop","NftProgressSimple","NftInfo","mediaQueries","sm","StyledHero","textSubtle","StyledNotFound","CustomButton","Button","CustomLink","GoldenButton","Nft","useHistory","Page","size"],"mappings":"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","file":"static/js/27.556593f9.chunk.js","sourcesContent":["import { Nft } from './types'\r\n\r\nexport const NftFarm = '0xaBa054F1437aEBEa43fB0804b734DdB3F39FB62F'\r\nexport const NFT = '0xA81Ab2D03b9E3a62BDBb837d417A5E221F754E14'\r\nexport const AMOUNT_TO_CLAIM = '10'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Count Pepes Chocula',\r\n    metadata: 'tier-NFT-base-dark-chocolate.json',\r\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-dark-chocolate.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 0,\r\n    nftId: 0,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Vlad Pepes Drakul',\r\n    metadata: 'tier-NFT-base-main-nopaint.json',\r\n    description: 'The legend behind the meme in all his original glory. Part of the base tier of Vlad NFTs',\r\n    previewImage: 'preview-base-main-nopaint.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWckPrzbjvf8jqUpdQ7jKLzdaSBTyPSV6x6obSUHHipqc?filename=NFT-base-main-nopaint.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 1,\r\n    nftId: 1,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Pepes in Stone',\r\n    metadata: 'tier-NFT-base-marble.json',\r\n    description:\r\n      'The count has turned into a marble statue ready for display in the halls of Vladhalla. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-marble.jpg',\r\n    originalImage: 'https://ipfs.io/ipfs/QmSnz85drLjCD4qNgaMwHFC6PFEkGrmYhM1LpHwZWpEWaQ?filename=NFT-base-marble.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 2,\r\n    nftId: 2,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'The path to Vladhalla',\r\n    metadata: '',\r\n    description: 'All who seek to find the path to Vladhalla must have strong hands along the way to immortality.',\r\n    previewImage: 'preview-path-to-vladhalla.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmQWAeV3aAWD2Kbvxmtt4H874AEf7M7N5FcBos4iZbkRcj?filename=NFT-rare-path-to-vladhalla.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 3,\r\n    nftId: 3,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Painted Pepe',\r\n    metadata: '',\r\n    description:\r\n      'As an homage to the original Vlad Pepes Drakul this retains his painted face hang him in your gallery for eternal viewing.',\r\n    previewImage: 'preview-painted-pepes.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmRqe92vpppkNS2aihmdvswHstAiHAF4jC2KUAiec5LKKk?filename=NFT-rare-painted-pepes.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 4,\r\n    nftId: 4,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 5,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import { useContext } from 'react'\r\nimport { BlockContext } from 'contexts/BlockContext'\r\n\r\nconst useBlock = () => {\r\n  const block: number = useContext(BlockContext)\r\n  return block\r\n}\r\n\r\nexport default useBlock\r\n","import { Nft } from './types'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Count Pepes Chocula',\r\n    metadata: 'tier-NFT-base-dark-chocolate.json',\r\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-dark-chocolate.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 0,\r\n    nftId: 0,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Vlad Pepes Drakul',\r\n    metadata: 'tier-NFT-base-main-nopaint.json',\r\n    description: 'The legend behind the meme in all his original glory. Part of the base tier of Vlad NFTs',\r\n    previewImage: 'preview-base-main-nopaint.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWckPrzbjvf8jqUpdQ7jKLzdaSBTyPSV6x6obSUHHipqc?filename=NFT-base-main-nopaint.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 1,\r\n    nftId: 1,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Pepes in Stone',\r\n    metadata: 'tier-NFT-base-marble.json',\r\n    description:\r\n      'The count has turned into a marble statue ready for display in the halls of Vladhalla. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-marble.jpg',\r\n    originalImage: 'https://ipfs.io/ipfs/QmSnz85drLjCD4qNgaMwHFC6PFEkGrmYhM1LpHwZWpEWaQ?filename=NFT-base-marble.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 2,\r\n    nftId: 2,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'The path to Vladhalla',\r\n    metadata: '',\r\n    description: 'All who seek to find the path to Vladhalla must have strong hands along the way to immortality.',\r\n    previewImage: 'preview-path-to-vladhalla.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmQWAeV3aAWD2Kbvxmtt4H874AEf7M7N5FcBos4iZbkRcj?filename=NFT-rare-path-to-vladhalla.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 3,\r\n    nftId: 3,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Painted Pepe',\r\n    metadata: '',\r\n    description:\r\n      'As an homage to the original Vlad Pepes Drakul this retains his painted face hang him in your gallery for eternal viewing.',\r\n    previewImage: 'preview-painted-pepes.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmRqe92vpppkNS2aihmdvswHstAiHAF4jC2KUAiec5LKKk?filename=NFT-rare-painted-pepes.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 4,\r\n    nftId: 4,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in thier wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 5,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Silver Pepes',\r\n    metadata: '',\r\n    description:\r\n      \"The count has had an epic existence sure, but it has not been without many attempts at his alife. This artist's rendition pays homage to the time he was frozen in Carbonite ...oh wait, wrong story. Our bad, pretty slick tho right?\",\r\n    previewImage: 'preview-silver-pepe.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmaPP3CqB8iNcB9b9NCZVytNiaxZcJWt7Kk1vnHWwRL7hQ?filename=NFT-epic-silver-pepes.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 0,\r\n    nftId: 0,\r\n    tokenAmount: 350,\r\n    tokenSupply: 66,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Bank of Vladhalla',\r\n    metadata: '',\r\n    description:\r\n      \"They say when you leave this alife you can't take it with you... Well, who's leaving? That's for mortals to worry about.\",\r\n    previewImage: 'preview-bank-of-vlad.png',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/Qma87NMJAu33nQuCRvoAK4MwP9CBwhGsLkQdTptM6uxoyp?filename=NFT-epic-bank-of-vladhalla.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 1,\r\n    nftId: 1,\r\n    tokenAmount: 350,\r\n    tokenSupply: 66,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Gates of Vladhalla',\r\n    metadata: '',\r\n    description:\r\n      'Tales have been written of the select few who have made it this far. The  sheer majesty of these very gates would make the hairs on their arms stand on end. Only the immortal shall pass through - will you?',\r\n    previewImage: 'preview-gate-of-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmW1az8XriRqdx2zXY7w71XFxXUEfH5hUsyZTzwGBe7gfh?filename=NFT-epic-gates-of-vladhalla.png',\r\n    fileType: 'png',\r\n    blurImage: '',\r\n    sortOrder: 2,\r\n    nftId: 2,\r\n    tokenAmount: 350,\r\n    tokenSupply: 66,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Golden Pepes',\r\n    metadata: '',\r\n    description:\r\n      'For a brief period in time Pepe Drakul led a very powerful unit known as the 7 golden Vampires. He commissioned a bust made of the purest gold to commemorate his time with them.',\r\n    previewImage: 'preview-golden-pepes.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/Qmdv1t4kUa8YSP8rpZTXLKvpycnijWJdCSpjsN8sjArGx8?filename=NFT-legendary-pepes-gold.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 3,\r\n    nftId: 3,\r\n    tokenAmount: 1200,\r\n    tokenSupply: 6,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'Immortality',\r\n    metadata: '',\r\n    description:\r\n      'Those who have ever held the Chalice of ALIFE are granted Immortality. Do not fear eternal sleep/slumber, for it will not come for you.',\r\n    previewImage: 'preview-immortality.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmaHeTsV6AnhqWDAeBUvwmQbo7RC6bM1jQzVQUCQSLg9Bp?filename=NFT-legendary-immortality.png',\r\n    fileType: 'png',\r\n    blurImage: '',\r\n    sortOrder: 4,\r\n    nftId: 4,\r\n    tokenAmount: 1200,\r\n    tokenSupply: 6,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n  {\r\n    name: 'The VladFather',\r\n    metadata: '',\r\n    description:\r\n      'His sceptre slammed into the marble floor with a crack, prompting the artist to begin. How many final breaths has that hand taken from his enemies? His eyes, wildly electric and filled with menace, and a stance that dares you to make your move. I don’t envy the one tasked with creating this portrait. Pepe Drakul has only ever posed for one drawing and this is it.',\r\n    previewImage: 'preview-the-vladfather.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmVEdevPc1nFLJrFQK4GsJtcS5486uaQE73mo7aKjw13ph?filename=NFT-legendary-vlad-father.png',\r\n    fileType: 'png',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 5,\r\n    tokenAmount: 1200,\r\n    tokenSupply: 6,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import { AbiItem, fromWei } from 'web3-utils'\r\nimport { getContract } from 'utils/web3'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport nftFarm from 'config/abi/NftFarm.json'\r\nimport nft from 'config/abi/NFT.json'\r\nimport { NftFarm, NFT } from 'config/constants/nfts'\r\nimport BigNumber from 'bignumber.js'\r\n// TODO: Figure out how to add current account to contracts to write methods can be used\r\n\r\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\r\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nft as unknown as AbiItem\r\n  return getContract(nftAbi, NFT, contractOptions)\r\n}\r\n\r\nexport const getFromWei = (v: any) => {\r\n  if (!v) return 0\r\n  return parseFloat(fromWei(v.toString(), 'ether'))\r\n}\r\n\r\nexport const getFromWayArray = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(fromWei(v[i].toString(), 'ether'))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToFloat = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseInt(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToInt = (v: any) => {\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseFloat(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport default getNftMintingContract\r\n","import BigNumber from 'bignumber.js'\r\n\r\nexport { default as formatAddress } from './formatAddress'\r\n\r\nexport const bnToDec = (bn: BigNumber, decimals = 18): number => {\r\n  return bn.dividedBy(new BigNumber(10).pow(decimals)).toNumber()\r\n}\r\n\r\n/** Returns parts of URL like protocol, host, path for formatting URLs as required.\r\n * @param  {string} fullUrl\r\n */\r\nexport const getUrlPartsInfo = (fullUrl) => {\r\n  const fullUrlArray = fullUrl.split('/')\r\n  const protocol = fullUrlArray[0]\r\n  const host = fullUrlArray[2]\r\n  const path = fullUrlArray.slice(3).join('/')\r\n  return {\r\n    protocol,\r\n    host,\r\n    path,\r\n    fullUrlArray,\r\n  }\r\n}\r\n","export type DataResponse = {\r\n  name: string\r\n  description: string\r\n  image: string\r\n  rarity: string\r\n\r\n  // TODO: Fill in the error type\r\n  error: any\r\n}\r\n\r\n/**\r\n * Get NFT data for a specific tokenURI\r\n */\r\nconst getNftDetailData = async (tokenURI: string): Promise<DataResponse> => {\r\n  let data = {\r\n    name: '',\r\n    description: '',\r\n    image: '',\r\n    rarity: '',\r\n    error: '',\r\n  }\r\n  try {\r\n    const response = await fetch(tokenURI)\r\n    data = await response.json()\r\n    return data\r\n  } catch (error) {\r\n    return data\r\n  }\r\n}\r\n\r\nexport default getNftDetailData\r\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useBlock from 'hooks/useBlock'\r\nimport nftFarm from 'config/abi/NftFarm.json'\r\nimport { NftFarm } from 'config/constants/nfts'\r\nimport multicall from 'utils/multicall'\r\nimport nfts from 'config/constants/allnfts'\r\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\r\nimport { getUrlPartsInfo } from '../../../utils'\r\nimport getNftDetailData from '../../../utils/getNftDetailData'\r\n\r\ninterface NftProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\ntype NftMap = {\r\n  [key: number]: number[]\r\n}\r\n\r\ntype State = {\r\n  isInitialized: boolean\r\n  hasClaimed: number[]\r\n  ownerById: number[]\r\n  amounts: number[]\r\n  maxMintByNft: number[]\r\n  prices: number[]\r\n  myMints: number[]\r\n  nftTableData: any[]\r\n  countBurnt: number\r\n  endBlockNumber: number\r\n  startBlockNumber: number\r\n  totalSupplyDistributed: number\r\n  currentDistributedSupply: number\r\n  balanceOf: number\r\n  nftMap: NftMap\r\n\r\n  allowMultipleClaims: boolean\r\n  rarity: string\r\n  priceMultiplier: number\r\n  maxMintPerNft: number\r\n  tokenPerBurn: number\r\n}\r\n\r\ntype Context = {\r\n  canBurnNft: boolean\r\n  getTokenIds: (nftId: number) => number[]\r\n  reInitialize: () => void\r\n} & State\r\n\r\nexport const NftProviderContext = createContext<Context | null>(null)\r\n\r\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\r\n  const isMounted = useRef(true)\r\n  const [state, setState] = useState<State>({\r\n    isInitialized: false,\r\n    hasClaimed: [],\r\n    ownerById: [],\r\n    countBurnt: 0,\r\n    startBlockNumber: 0,\r\n    endBlockNumber: 0,\r\n    totalSupplyDistributed: 0,\r\n    currentDistributedSupply: 0,\r\n    balanceOf: 0,\r\n    nftMap: {},\r\n\r\n    allowMultipleClaims: true,\r\n    rarity: '',\r\n    priceMultiplier: 0,\r\n    maxMintPerNft: 0,\r\n    tokenPerBurn: 0,\r\n\r\n    amounts: [],\r\n    maxMintByNft: [],\r\n    prices: [],\r\n    myMints: [],\r\n    nftTableData: [],\r\n  })\r\n  const { account } = useWallet()\r\n  const currentBlock = useBlock()\r\n\r\n  const { isInitialized } = state\r\n\r\n  // Static data\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const [\r\n          startBlockNumberArr,\r\n          endBlockNumberArr,\r\n          countBurntArr,\r\n          totalSupplyDistributedArr,\r\n          currentDistributedSupplyArr,\r\n\r\n          allowMultipleClaimsArr,\r\n          rarityArr,\r\n          priceMultiplierArr,\r\n          maxMintPerNftArr,\r\n          tokenPerBurnArr,\r\n        ] = await multicall(nftFarm, [\r\n          { address: NftFarm, name: 'startBlockNumber' },\r\n          { address: NftFarm, name: 'endBlockNumber' },\r\n          { address: NftFarm, name: 'countBurnt' },\r\n          { address: NftFarm, name: 'totalSupplyDistributed' },\r\n          { address: NftFarm, name: 'currentDistributedSupply' },\r\n          { address: NftFarm, name: 'allowMultipleClaims' },\r\n          { address: NftFarm, name: 'rarity' },\r\n          { address: NftFarm, name: 'priceMultiplier' },\r\n          { address: NftFarm, name: 'maxMintPerNft' },\r\n          { address: NftFarm, name: 'tokenPerBurn' },\r\n        ])\r\n\r\n        // TODO: Figure out why these are coming back as arrays\r\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\r\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\r\n        const [countBurnt]: [BigNumber] = countBurntArr\r\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          countBurnt: countBurnt.toNumber(),\r\n          startBlockNumber: startBlockNumber.toNumber(),\r\n          endBlockNumber: endBlockNumber.toNumber(),\r\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\r\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\r\n          allowMultipleClaims: allowMultipleClaimsArr[0],\r\n          rarity: rarityArr[0].toString(),\r\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\r\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\r\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    fetchContractData()\r\n  }, [isInitialized, setState])\r\n\r\n  // Data from the contract that needs an account\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const nftContract = getNftContract()\r\n\r\n        const getMinted = await multicall(nftFarm, [{ address: NftFarm, name: 'getMinted', params: [account] }])\r\n\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n        const ownerById = getMinted[0][2]\r\n        const maxMintByNft = getToInt(getMinted[0][3])\r\n        const prices = getFromWayArray(getMinted[0][4])\r\n        const myMints = getToInt(getMinted[0][5])\r\n\r\n        // console.log('hasClaimed', hasClaimed)\r\n        // console.log('amounts', amounts)\r\n        // console.log('ownerById', ownerById)\r\n        // console.log('maxMintByNft', maxMintByNft)\r\n        // console.log('prices', prices)\r\n        // console.log('myMints', myMints)\r\n\r\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\r\n\r\n        let nftMap: NftMap = {}\r\n\r\n        let nftTableData = []\r\n\r\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\r\n        // owned by the wallet, then the nftId's associated with the tokenIds\r\n        if (balanceOf > 0) {\r\n          const getTokenIdAndNftId = async (index: number) => {\r\n            try {\r\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\r\n              const nftId = await nftContract.methods.getNftId(tokenId).call()\r\n\r\n              return [parseInt(tokenId, 10)]\r\n            } catch (error) {\r\n              return null\r\n            }\r\n          }\r\n\r\n          const getNftData = async (index: number) => {\r\n            try {\r\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\r\n              const tokenURI = await nftContract.methods.tokenURI(parseInt(tokenId, 10)).call()\r\n              const { name: nftName, rarity } = await getNftDetailData(tokenURI)\r\n              const { fullUrlArray } = getUrlPartsInfo(tokenURI)\r\n              const hash = fullUrlArray[4]\r\n              const hashId = parseInt(fullUrlArray[5].substring(0, fullUrlArray[5].length - 5), 10)\r\n              let nftDetailLink = ''\r\n              if (rarity === 'Base' || rarity === 'Rare') {\r\n                nftDetailLink = `/detail/${hashId}`\r\n              } else if (rarity === 'Epic') {\r\n                nftDetailLink = `/epic-detail/${hashId}`\r\n              } else if (rarity === 'Legendary') {\r\n                nftDetailLink = `/legendary-detail/${hashId}`\r\n              }\r\n\r\n              const nftPreviewImage = nfts.filter((nft) => nftName === nft.name).map((nft) => nft.previewImage)\r\n\r\n              return {\r\n                tokenId: parseInt(tokenId, 10),\r\n                type: `${hash} ,  ${hashId}`,\r\n                rarity,\r\n                nftName,\r\n                nftPreviewImage,\r\n                nftDetailLink,\r\n              }\r\n            } catch (error) {\r\n              return null\r\n            }\r\n          }\r\n\r\n          const tokenIdPromises = []\r\n          const nftTablePromises = []\r\n\r\n          for (let i = 0; i < balanceOf; i++) {\r\n            nftTablePromises.push(getNftData(i))\r\n            tokenIdPromises.push(getTokenIdAndNftId(i))\r\n          }\r\n\r\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\r\n          nftTableData = await Promise.all(nftTablePromises)\r\n\r\n          // While improbable a wallet can own more than one of the same nft so the format is:\r\n          // { [nftId]: [array of tokenIds] }\r\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\r\n            if (!association) {\r\n              return accum\r\n            }\r\n\r\n            const [nftId, tokenId] = association\r\n\r\n            return {\r\n              ...accum,\r\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\r\n            }\r\n          }, {})\r\n        }\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          ownerById,\r\n          balanceOf,\r\n          nftMap,\r\n\r\n          amounts,\r\n          maxMintByNft,\r\n          prices,\r\n          myMints,\r\n          nftTableData,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchContractData()\r\n    }\r\n  }, [isInitialized, account, setState])\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false\r\n    }\r\n  }, [isMounted])\r\n\r\n  const canBurnNft = currentBlock <= state.endBlockNumber\r\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\r\n\r\n  /**\r\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\r\n   * For example when a transaction has been completed\r\n   */\r\n  const reInitialize = () => {\r\n    // Only attempt to re-initialize if the component is still mounted\r\n    // Transactions can take awhile so it is likely some users will navigate to another page\r\n    // before the transaction is finished\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\r\n      {children}\r\n    </NftProviderContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NftProvider\r\n","import styled from 'styled-components'\r\n\r\nconst InfoRow = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport default InfoRow\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Web3 from 'web3'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport { NFT } from 'config/constants/nfts'\r\nimport { Nft } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { usePancakeRabbits } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface TransferNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst Label = styled.label`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  margin-top: 24px;\r\n`\r\n// tokenIds is retrieved dynamically from contracts.\r\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [values, setValues] = useState({\r\n    address: '',\r\n    tokenId: tokenIds[0],\r\n  })\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const nftContract = usePancakeRabbits(NFT)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const isValidAddress = Web3.utils.isAddress(values.address)\r\n\r\n      if (!isValidAddress) {\r\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\r\n      } else {\r\n        await nftContract.methods\r\n          .transferFrom(account, values.address, values.tokenId)\r\n          .send({ from: account })\r\n          .on('sending', () => {\r\n            setIsLoading(true)\r\n          })\r\n          .on('receipt', () => {\r\n            onDismiss()\r\n            onSuccess()\r\n          })\r\n          .on('error', () => {\r\n            console.error(error)\r\n            setError('Unable to transfer NFT')\r\n            setIsLoading(false)\r\n          })\r\n      }\r\n    } catch (err) {\r\n      console.error('Unable to transfer NFT:', err)\r\n    }\r\n  }\r\n\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value: inputValue, name } = evt.target\r\n    setValues({ ...values, [name]: inputValue })\r\n  }\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\r\n        <Input\r\n          id=\"transferAddress\"\r\n          name=\"address\"\r\n          type=\"text\"\r\n          placeholder={TranslateString(999, 'Paste address')}\r\n          value={values.address}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        />\r\n        {/* <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Token ID')}:</Label>\r\n        <Input\r\n          id=\"tokenId\"\r\n          name=\"tokenId\"\r\n          type=\"number\"\r\n          placeholder={TranslateString(999, 'Enter tokenId')}\r\n          value={values.tokenId}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        /> */}\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          fullWidth\r\n          onClick={handleConfirm}\r\n          disabled={!account || isLoading || !values.address || !values.tokenId}\r\n        >\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default TransferNftModal\r\n","import React, { useState, useContext, useCallback, useEffect } from 'react'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Tag,\r\n  Button,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n  Text,\r\n  CardFooter,\r\n  useModal,\r\n  ModalWrapper,\r\n  LogoIcon,\r\n} from '@pancakeswap-libs/uikit'\r\n\r\nimport { Link } from 'react-router-dom'\r\nimport { Table } from 'antd'\r\nimport useI18n from 'hooks/useI18n'\r\nimport orderBy from 'lodash/orderBy'\r\nimport nfts from 'config/constants/nfts'\r\nimport NftCard from './NftCard'\r\nimport NftGrid from './NftGrid'\r\nimport { NftProviderContext } from '../contexts/NftProvider'\r\nimport TransferNftModal from './TransferNftModal'\r\nimport { getNftContract } from '../utils/contracts'\r\n\r\nconst NftTable = () => {\r\n  const [state, setState] = useState({\r\n    isLoading: false,\r\n    isOpen: true,\r\n    nftTableData: [],\r\n  })\r\n\r\n  const { nftTableData, reInitialize } = useContext(NftProviderContext)\r\n\r\n  const TranslateString = useI18n()\r\n\r\n  const onTransfer = useCallback(async () => {\r\n    setState((prevState) => ({ ...prevState, isLoading: true }))\r\n    try {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: false,\r\n        isDataFetched: true,\r\n        nftTableData,\r\n      }))\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }, [nftTableData])\r\n\r\n  const handleSuccess = () => {\r\n    onTransfer()\r\n    reInitialize()\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: 'NFT Name',\r\n      dataIndex: 'nftName',\r\n      render: (text, record) => {\r\n        return <p style={{ fontWeight: 600, fontSize: '18px' }}>{record.nftName}</p>\r\n      },\r\n    },\r\n    {\r\n      title: 'NFT preview Image',\r\n      dataIndex: 'nftPreviewImage',\r\n      render: (text, record) => {\r\n        return (\r\n          <div>\r\n            <img\r\n              src={`images/nfts/${record.nftPreviewImage}`}\r\n              alt=\"preview\"\r\n              style={{ width: '100px', height: '100px', objectFit: 'cover', borderRadius: '25px' }}\r\n            />\r\n          </div>\r\n        )\r\n      },\r\n    },\r\n    {\r\n      title: 'Token ID',\r\n      dataIndex: 'tokenId',\r\n      key: 'tokenId',\r\n    },\r\n    {\r\n      title: 'Rarity',\r\n      dataIndex: 'rarity',\r\n      key: 'rarity',\r\n    },\r\n    {\r\n      title: 'NFT Details',\r\n      dataIndex: 'nftDetailLink',\r\n      render: (text, record) => (\r\n        <Button as={Link} to={record.nftDetailLink}>\r\n          View Detail\r\n        </Button>\r\n      ),\r\n      key: 'nftDetailLink',\r\n    },\r\n    {\r\n      title: 'Transfer NFT',\r\n      dataIndex: '',\r\n      render: (text, record) => {\r\n        const nft = {\r\n          name: record.nftName,\r\n          metadata: '',\r\n          description: '',\r\n          originalImage: '',\r\n          previewImage: '',\r\n          fileType: '',\r\n          blurImage: '',\r\n          sortOrder: 1,\r\n          nftId: 0,\r\n          tokenAmount: 0,\r\n          tokenSupply: 0,\r\n          nftFarmContract: '',\r\n          nftContract: '',\r\n        }\r\n        const tokenIds = [record.tokenId]\r\n        const [onPresentTransferModal] = ModalWrapper(\r\n          <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\r\n        )\r\n        return (\r\n          <Button\r\n            fullWidth\r\n            variant=\"primary\"\r\n            mt=\"24px\"\r\n            onClick={() => {\r\n              onPresentTransferModal()\r\n            }}\r\n          >\r\n            {TranslateString(999, 'Transfer')}\r\n          </Button>\r\n        )\r\n      },\r\n      key: '',\r\n    },\r\n  ]\r\n\r\n  return <Table columns={columns} dataSource={nftTableData} style={{ marginTop: '25px' }} />\r\n}\r\n\r\nexport default NftTable\r\n","import React, { useContext } from 'react'\r\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { NftProviderContext } from '../contexts/NftProvider'\r\nimport InfoRow from './InfoRow'\r\n\r\nconst NftProgressSimple = () => {\r\n  const TranslateString = useI18n()\r\n  const { balanceOf } = useContext(NftProviderContext)\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody>\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'My Genesis NFTs')}:</Text>\r\n          <Text>\r\n            <strong>{balanceOf}</strong>\r\n          </Text>\r\n        </InfoRow>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NftProgressSimple\r\n","import React, { useContext } from 'react'\r\nimport styled from 'styled-components'\r\nimport { NftProviderContext } from '../contexts/NftProvider'\r\nimport NftProgress from './NftProgress'\r\nimport NftProgressSimple from './NftProgressSimple'\r\nimport StatusCard from './StatusCard'\r\n\r\nconst StyledNtfInfo = styled.div`\r\n  align-items: start;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-gap: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n`\r\n\r\nconst NftInfo = () => {\r\n  const { canBurnNft } = useContext(NftProviderContext)\r\n\r\n  return <NftProgressSimple />\r\n}\r\n\r\nexport default NftInfo\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, LogoIcon, Text, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport { useHistory, Link } from 'react-router-dom'\r\nimport HowItWorks from './components/HowItWorks'\r\nimport NftList from './components/NftList'\r\nimport NftTable from './components/NftTable'\r\nimport NftProvider from './contexts/NftProvider'\r\nimport NftInfo from './components/NftInfo'\r\n\r\nconst StyledHero = styled.div`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\r\n  margin-bottom: 24px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst StyledNotFound = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: calc(100vh - 64px);\r\n  justify-content: center;\r\n`\r\n\r\nconst CustomButton = styled(Button)`\r\n  margin-right: 20px;\r\n`\r\n\r\nconst CustomLink = styled(Link)`\r\n  font-family: 'Reggae One';\r\n`\r\n\r\nconst GoldenButton = styled(Button)`\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px rgba(139, 66, 8, 1),\r\n    inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n  background-image: linear-gradient(160deg, #a54e07, #b47e11, #fef1a2, #bc881b, #a54e07);\r\n  border: 1px solid #a55d07;\r\n  color: rgb(120, 50, 5);\r\n  text-shadow: 0 2px 2px rgba(250, 227, 133, 1);\r\n  cursor: pointer;\r\n  transition: all 0.2s ease-in-out;\r\n  background-size: 100% 100%;\r\n  background-position: center;\r\n\r\n  &:focus,\r\n  &:hover {\r\n    background-size: 150% 150%;\r\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23), inset 0 -2px 5px 1px #b17d10,\r\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n    border: 1px solid rgba(165, 93, 7, 0.6);\r\n    color: rgba(120, 50, 5, 0.8);\r\n  }\r\n  &:active {\r\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px #b17d10,\r\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n  }\r\n`\r\n\r\nconst Nft = () => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const history = useHistory()\r\n\r\n  if (account) {\r\n    return (\r\n      <NftProvider>\r\n        <Page>\r\n          <StyledHero>\r\n            <Heading as=\"h1\" size=\"xl\" color=\"#9f0d0d\" mb=\"24px\">\r\n              My NFT Collections\r\n            </Heading>\r\n            <CustomButton variant=\"subtle\" mt=\"24px\">\r\n              Genesis Collection\r\n            </CustomButton>\r\n            <GoldenButton mt=\"24px\">\r\n              <CustomLink to=\"/my-shibari-collection\">Pink Shibari Collection</CustomLink>\r\n            </GoldenButton>\r\n          </StyledHero>\r\n          <NftInfo />\r\n          <NftTable />\r\n        </Page>\r\n      </NftProvider>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Page>\r\n      <StyledNotFound>\r\n        <LogoIcon width=\"64px\" mb=\"8px\" />\r\n        <Text mb=\"16px\">{TranslateString(999, 'Empty Collection')}</Text>\r\n      </StyledNotFound>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Nft\r\n"],"sourceRoot":""}