{"version":3,"sources":["config/constants/newnfts.ts","views/NewNft/components/InfoRow.tsx","views/NewNft/components/Image.tsx","views/NewNft/utils/contracts.ts","views/NewNft/contexts/NftProvider.tsx","views/NewNft/components/ClaimNftModal.tsx","views/NewNft/components/BurnNftModal.tsx","views/NewNft/components/TransferNftModal.tsx","views/NewNft/components/NftCard/index.tsx","views/NewNft/components/NftGrid.tsx","views/NewNft/components/NftList.tsx","views/NewNft/components/NftProgressSimple.tsx","views/NewNft/components/NftInfo.tsx","views/NewNft/index.tsx"],"names":["NftFarm","NFT","AMOUNT_TO_CLAIM","Nfts","name","metadata","description","previewImage","originalImage","fileType","blurImage","sortOrder","nftId","tokenAmount","tokenSupply","nftFarmContract","nftContract","rarity","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","href","target","rel","getNftContract","contractOptions","nftAbi","nft","getContract","getNewNftContract","nftFarm","getFromWayArray","v","array","t","length","i","push","fromWei","toString","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","useState","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","state","setState","account","useWallet","currentBlock","useBlock","useEffect","a","prevState","error","console","fetchContractData","multicall","nftFarmV2","address","params","getMinted","methods","call","getTokenIdAndNftId","index","tokenOfOwnerByIndex","tokenId","getNftId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","fetchNonLoggedInContractData","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Value","Text","ModalContent","Actions","ClaimNftModal","onSuccess","onDismiss","isLoading","setIsLoading","pendingTx","setPendingTx","setError","TranslateString","useI18n","nftMintingContract","useNFTFarmV2Contract","contraToken","useERC20","getLifeAddress","allowance","useNftAllowance","onApprove","useNftApprove","cakeBalance","useTokenBalance","cakeInWallet","getBalanceNumber","handleConfirm","mint","send","from","on","title","color","mb","fullWidth","disabled","onClick","BurnNftModal","tokenIds","accepted","setAccepted","useRabbitMintingFarm","burnNFT","style","alignItems","display","checked","scale","onChange","ml","cursor","variant","Label","label","text","TransferNftModal","values","setValues","NFTFarmV2Contract","Web3","utils","isAddress","getTradeIdByNftId","tradeId","transfer","htmlFor","id","type","placeholder","evt","inputValue","isWarning","Header","DetailsButton","Button","attrs","InfoBlock","ViewNft","NftCard","isOpen","nftCount","nftBurnCount","minted","setMinted","maxMint","setMaxMint","useContext","history","useHistory","firstCharOfAccount","slice","lastCharOfAccount","loggedIn","nftIndex","indexOf","MINTS","MINTED","MAX_MINT","walletCanClaim","undefined","nftInfoState","mintedValue","maxMintValue","getNftInfoState","isSupplyAvailable","walletOwnsNft","Icon","ChevronUpIcon","ChevronDownIcon","fetchDetails","useCallback","isDataFetched","handleClick","handleSuccess","useModal","onPresentClaimModal","onPresentBurnModal","onPresentTransferModal","isActive","outline","mt","p","endIcon","width","as","textAlign","NftGrid","BaseLayout","mediaQueries","sm","NftList","props","nfts","data","orderBy","map","NftProgressSimple","NftInfo","StyledHero","textSubtle","CustomButton","GoldenButton","Nft","NFTs","setNFTs","filterNFTs","filteredNFTs","filter","Page","size"],"mappings":"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","file":"static/js/28.ade0ad1b.chunk.js","sourcesContent":["import { Nft } from './types'\n\nexport const NftFarm = '0xEb3af3C7ECaD4927E6e650BFf0C3841d49E36c9B'\nexport const NFT = '0xa81ab2d03b9e3a62bdbb837d417a5e221f754e14'\nexport const AMOUNT_TO_CLAIM = '10'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Count Pepes Chocula',\n    metadata: 'tier-NFT-base-dark-chocolate.json',\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\n    previewImage: 'preview-base-dark-chocolate.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 0,\n    nftId: 100,\n    tokenAmount: 10,\n    tokenSupply: 2222,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Base',\n  },\n  {\n    name: 'Vlad Pepes Drakul',\n    metadata: 'tier-NFT-base-main-nopaint.json',\n    description: 'The legend behind the meme in all his original glory. Part of the base tier of Vlad NFTs',\n    previewImage: 'preview-base-main-nopaint.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWckPrzbjvf8jqUpdQ7jKLzdaSBTyPSV6x6obSUHHipqc?filename=NFT-base-main-nopaint.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 1,\n    nftId: 101,\n    tokenAmount: 10,\n    tokenSupply: 2222,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Base',\n  },\n  {\n    name: 'Pepes in Stone',\n    metadata: 'tier-NFT-base-marble.json',\n    description:\n      'The count has turned into a marble statue ready for display in the halls of Vladhalla. Part of the base tier of Vlad NFTs.',\n    previewImage: 'preview-base-marble.jpg',\n    originalImage: 'https://ipfs.io/ipfs/QmSnz85drLjCD4qNgaMwHFC6PFEkGrmYhM1LpHwZWpEWaQ?filename=NFT-base-marble.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 2,\n    nftId: 102,\n    tokenAmount: 10,\n    tokenSupply: 2222,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Base',\n  },\n  {\n    name: 'The path to Vladhalla',\n    metadata: '',\n    description: 'All who seek to find the path to Vladhalla must have strong hands along the way to immortality.',\n    previewImage: 'preview-path-to-vladhalla.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmQWAeV3aAWD2Kbvxmtt4H874AEf7M7N5FcBos4iZbkRcj?filename=NFT-rare-path-to-vladhalla.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 3,\n    nftId: 103,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Rare',\n  },\n  {\n    name: 'Painted Pepe',\n    metadata: '',\n    description:\n      'As an homage to the original Vlad Pepes Drakul this retains his painted face hang him in your gallery for eternal viewing.',\n    previewImage: 'preview-painted-pepes.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmRqe92vpppkNS2aihmdvswHstAiHAF4jC2KUAiec5LKKk?filename=NFT-rare-painted-pepes.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 4,\n    nftId: 104,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Rare',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 105,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Rare',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 106,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Epic',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 107,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Epic',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 108,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Epic',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 109,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Legendary',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 110,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Legendary',\n  },\n  {\n    name: 'All Hail VLAD',\n    metadata: '',\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\n    previewImage: 'preview-all-hail-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 111,\n    tokenAmount: 100,\n    tokenSupply: 666,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n    rarity: 'Legendary',\n  },\n]\n\nexport default Nfts\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  src: string\n  alt: string\n  originalLink?: string\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\n  const previewImage = <StyledImage src={src} alt={alt} />\n\n  return (\n    <Container>\n      {originalLink ? (\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Image\n","import { AbiItem, fromWei } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport nftFarm from 'config/abi/NftFarmV2.json'\nimport nft from 'config/abi/NFT.json'\nimport { NftFarm, NFT } from 'config/constants/newnfts'\nimport BigNumber from 'bignumber.js'\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\n}\n\nexport const getNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = nft as unknown as AbiItem\n  return getContract(nftAbi, NFT, contractOptions)\n}\n\nexport const getNewNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = nftFarm as unknown as AbiItem\n  return getContract(nftAbi, NftFarm, contractOptions)\n}\n\nexport const getFromWei = (v: any) => {\n  if (!v) return 0\n  return parseFloat(fromWei(v.toString(), 'ether'))\n}\n\nexport const getFromWayArray = (v: any) => {\n  if (!v) return []\n  const array = []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(fromWei(v[i].toString(), 'ether'))\n    }\n  }\n  return array\n}\n\nexport const getToFloat = (v: any) => {\n  if (!v) return []\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseInt(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport const getToInt = (v: any) => {\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseFloat(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport default getNftMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport nftFarmV2 from 'config/abi/NftFarmV2.json'\nimport { NftFarm } from 'config/constants/newnfts'\nimport multicall from 'utils/multicall'\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype NftMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  myMints: number[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: NftMap\n\n  allowMultipleClaims: boolean\n  rarity: string\n  priceMultiplier: number\n  maxMintPerNft: number\n  tokenPerBurn: number\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    rarity: '',\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n    tokenPerBurn: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n    myMints: [],\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        // const [\n        //   // startBlockNumberArr,\n        //   // endBlockNumberArr,\n        //   // countBurntArr,\n        //   // totalSupplyDistributedArr,\n        //   // currentDistributedSupplyArr,\n\n        //   // allowMultipleClaimsArr,\n        //   // rarityArr,\n        //   // priceMultiplierArr,\n        //   // maxMintPerNftArr,\n        //   // tokenPerBurnArr,\n        // ] = await multicall(nftFarm, [\n        //   // { address: NftFarm, name: 'startBlockNumber' },\n        //   // { address: NftFarm, name: 'endBlockNumber' },\n        //   // { address: NftFarm, name: 'countBurnt' },\n        //   // { address: NftFarm, name: 'totalSupplyDistributed' },\n        //   // { address: NftFarm, name: 'currentDistributedSupply' },\n        //   // { address: NftFarm, name: 'allowMultipleClaims' },\n        //   // { address: NftFarm, name: 'rarity' },\n        //   // { address: NftFarm, name: 'priceMultiplier' },\n        //   // { address: NftFarm, name: 'maxMintPerNft' },\n        //   // { address: NftFarm, name: 'tokenPerBurn' },\n        // ])\n\n        // TODO: Figure out why these are coming back as arrays\n        // const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        // const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        // const [countBurnt]: [BigNumber] = countBurntArr\n        // const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        // const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          // countBurnt: countBurnt.toNumber(),\n          // startBlockNumber: startBlockNumber.toNumber(),\n          // endBlockNumber: endBlockNumber.toNumber(),\n          // currentDistributedSupply: currentDistributedSupply.toNumber(),\n          // totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          // allowMultipleClaims: allowMultipleClaimsArr[0],\n          // rarity: rarityArr[0].toString(),\n          // priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\n          // maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\n          // tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const getMinted = await multicall(nftFarmV2, [{ address: NftFarm, name: 'getMinted', params: [account] }])\n\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getToInt(getMinted[0][3])\n        const prices = getFromWayArray(getMinted[0][4])\n        const myMints = getToInt(getMinted[0][5])\n\n        // console.log('hasClaimed', hasClaimed)\n        // console.log('amounts', amounts)\n        // console.log('ownerById', ownerById)\n        // console.log('maxMintByNft', maxMintByNft)\n        // console.log('prices', prices)\n        // console.log('myMints', myMints)\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        let nftMap: NftMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndNftId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getNftId(tokenId).call()\n\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndNftId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n          myMints,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    const fetchNonLoggedInContractData = async () => {\n      try {\n        const getMinted = await multicall(nftFarmV2, [\n          { address: NftFarm, name: 'getMinted', params: ['0x0000000000000000000000000000000000000000'] },\n        ])\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          amounts,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    } else {\n      fetchNonLoggedInContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/newnfts'\nimport { getLifeAddress } from 'utils/addressHelpers'\nimport { Nft } from 'config/constants/types'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useERC20, useNFTFarmV2Contract } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\nimport { useNftAllowance } from '../../../hooks/useAllowance'\nimport { useNftApprove } from '../../../hooks/useApprove'\n\ninterface ClaimNftModalProps {\n  nft: Nft\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useNFTFarmV2Contract(NftFarm)\n  const contraToken = useERC20(getLifeAddress())\n  const allowance = useNftAllowance(contraToken, NftFarm, pendingTx)\n  const onApprove = useNftApprove(contraToken, NftFarm)\n  const cakeBalance = useTokenBalance(getLifeAddress())\n  const cakeInWallet = getBalanceNumber(cakeBalance)\n\n  // console.log('getLifeAddress', getLifeAddress(), NftFarm, allowance)\n  // console.log('allowance', allowance)\n\n  const handleConfirm = async () => {\n    if (allowance === null) {\n      return\n    }\n\n    try {\n      await nftMintingContract.methods\n        .mint(nft.nftId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to claim NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to mint NFT:', err)\n    }\n  }\n\n  useEffect(() => {\n    if (cakeInWallet === 0) {\n      setError(`You must have ALIFE balance to claim NFT`)\n    }\n  }, [cakeInWallet, setError])\n\n  return (\n    <Modal title={`Claim NFT for ${nft.tokenAmount} ALIFE`} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n      </ModalContent>\n      <Actions>\n        <Button\n          fullWidth\n          disabled={!account || pendingTx || isLoading || allowance > 0}\n          onClick={async () => {\n            try {\n              setPendingTx(true)\n              await onApprove()\n              setPendingTx(false)\n            } catch (e) {\n              setPendingTx(false)\n              console.error(e)\n            }\n          }}\n        >\n          Approve\n        </Button>\n\n        <Button\n          fullWidth\n          onClick={handleConfirm}\n          disabled={!account || isLoading || cakeInWallet <= 0 || allowance <= 0}\n        >\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/newnfts'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface BurnNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [accepted, setAccepted] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(NftFarm)\n\n  const handleConfirm = async () => {\n    try {\n      const [tokenId] = tokenIds\n\n      await nftMintingContract.methods\n        .burnNFT(tokenId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to burn NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to burn NFT:', err)\n    }\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>${AMOUNT_TO_CLAIM} ALIFE</Value>\n        </InfoRow>\n      </ModalContent>\n      <ModalContent>\n        <Text color=\"failure\">\n          {TranslateString(999, 'When you trade in this NFT to receive ALIFE, you will lose access to it forever!')}\n        </Text>\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\n      </ModalContent>\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\n          {TranslateString(999, 'I understand')}\n        </Text>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default BurnNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { NFT, NftFarm } from 'config/constants/newnfts'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { useNFTFarmV2Contract } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n// tokenIds is retrieved dynamically from contracts.\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [values, setValues] = useState({\n    address: '',\n    tokenId: tokenIds[0],\n  })\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  const NFTFarmV2Contract = useNFTFarmV2Contract(NftFarm)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(values.address)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        const tradeId = await NFTFarmV2Contract.methods.getTradeIdByNftId(account, nft.nftId).call()\n        await NFTFarmV2Contract.methods\n          .transfer(tradeId, values.address)\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue, name } = evt.target\n    setValues({ ...values, [name]: inputValue })\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={values.address}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n        {/* <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Token ID')}:</Label>\n        <Input\n          id=\"tokenId\"\n          name=\"tokenId\"\n          type=\"number\"\n          placeholder={TranslateString(999, 'Enter tokenId')}\n          value={values.tokenId}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        /> */}\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          fullWidth\n          onClick={handleConfirm}\n          disabled={!account || isLoading || !values.address || !values.tokenId}\n        >\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback, useEffect } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { AMOUNT_TO_CLAIM } from 'config/constants/newnfts'\nimport { useHistory } from 'react-router-dom'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport { getNewNftContract } from '../../utils/contracts'\nimport ClaimNftModal from '../ClaimNftModal'\nimport BurnNftModal from '../BurnNftModal'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 44px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 0 24px 24px;\n`\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ViewNft = styled(Text)`\n  @media (max-width: 1300px) {\n    font-size: 11px;\n  }\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: false,\n    nftCount: 0,\n    nftBurnCount: 0,\n  })\n  const [minted, setMinted] = useState(0)\n  const [maxMint, setMaxMint] = useState(0)\n  const TranslateString = useI18n()\n  const {\n    isInitialized,\n    hasClaimed,\n    ownerById,\n    canBurnNft,\n    totalSupplyDistributed,\n    currentDistributedSupply,\n    getTokenIds,\n    reInitialize,\n    allowMultipleClaims,\n    rarity,\n    priceMultiplier,\n    maxMintPerNft,\n    tokenPerBurn,\n    amounts,\n    maxMintByNft,\n    prices,\n    myMints,\n  } = useContext(NftProviderContext)\n  const { account } = useWallet()\n  const history = useHistory()\n\n  // maxMintPerNft limit max amount that a nft can be minted\n  // maxMintByNft array containing individual amount of mint per nft index\n  // prices array containing individual prices of a mint per nft index\n  // tokenPerBurn global price\n\n  const { nftId, name, previewImage, originalImage, description, tokenAmount, tokenSupply } = nft\n  const PRICE = prices[nftId] || tokenPerBurn // here we get the price\n\n  const firstCharOfAccount = account != null && account.slice(0, 4)\n  const lastCharOfAccount = account != null && account.slice(-4)\n\n  const accountName = account != null && `${firstCharOfAccount}...${lastCharOfAccount}`\n\n  const loggedIn = account !== null\n\n  // console.log('?hasClaimed', hasClaimed)\n  // console.log('?ownerById', ownerById)\n\n  const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\n\n  const MINTS = myMints[nftIndex] || 0\n\n  // not sure about this, you need to check if this oser own this nft in the view nft page.\n  // const youAreTheLastOwner = ownerById && ownerById[nftIndex] && ownerById[nftIndex].toString() === account.toString()\n\n  const MINTED = amounts[nftIndex] ? parseInt(amounts[nftIndex].toString()) : 0\n  const MAX_MINT = maxMintByNft[nftIndex] ? parseInt(maxMintByNft[nftIndex].toString()) : maxMintPerNft\n\n  const walletCanClaim = maxMintPerNft === 0 || MINTED === undefined || MINTED < MAX_MINT\n\n  // console.log('CONTRACT/GALLERY INFO:', totalSupplyDistributed, rarity, priceMultiplier, maxMintPerNft, tokenPerBurn)\n  // console.log('LIMITS BY NFT:', tokenPerBurn, amounts, maxMintByNft, prices)\n  // console.log(nftId, 'walletCanClaim', walletCanClaim, maxMintPerNft, MINTED, MAX_MINT)\n\n  const tokenIds = getTokenIds(nftId)\n  // const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\n\n  useEffect(() => {\n    const getNftInfoState = async () => {\n      const nftContract = getNewNftContract()\n      const nftInfoState = await nftContract.methods.nftInfoState(nftId).call()\n      const { minted: mintedValue, maxMint: maxMintValue } = nftInfoState\n      setMinted(parseInt(mintedValue))\n      setMaxMint(parseInt(maxMintValue))\n    }\n    getNftInfoState()\n  })\n\n  const isSupplyAvailable = minted < maxMint\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const fetchDetails = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isLoading: true }))\n    try {\n      const { methods } = getNewNftContract()\n      const nftCount = await methods.nftCount(nftId).call()\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\n\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        nftCount: parseInt(nftCount, 10),\n        nftBurnCount: parseInt(nftBurnCount, 10),\n      }))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [nftId])\n\n  const handleClick = async () => {\n    if (state.isOpen) {\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n    } else {\n      try {\n        await fetchDetails()\n      } catch (error) {\n        console.error(error)\n      } finally {\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n      }\n    }\n  }\n\n  const handleSuccess = () => {\n    fetchDetails()\n    reInitialize()\n  }\n\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Image src={`/images/nfts/${previewImage}`} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {isInitialized && walletCanClaim && (\n            <Tag outline variant=\"success\">\n              {TranslateString(526, 'Available')}\n            </Tag>\n          )}\n          {isInitialized && !walletCanClaim && (\n            <Tag outline variant=\"failure\">\n              Sold Out\n            </Tag>\n          )}\n          {isInitialized && tokenIds && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(999, 'In Wallet')}\n            </Tag>\n          )}\n        </Header>\n        {isInitialized && walletOwnsNft && (\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n        {isInitialized && loggedIn && walletCanClaim && isSupplyAvailable && (\n          <Button fullWidth onClick={onPresentClaimModal} mt=\"24px\">\n            {TranslateString(999, 'Claim this NFT')} for {tokenAmount} ALIFE\n          </Button>\n        )}\n        {isInitialized && (\n          <Button fullWidth onClick={() => history.push(`new-detail/${nftId}`)} mt=\"24px\">\n            <ViewNft>\n              View NFT ({MINTED}/{maxMint} MINTED)\n            </ViewNft>\n          </Button>\n        )}\n        {isInitialized && canBurnNft && walletOwnsNft && (\n          <Button variant=\"danger\" fullWidth onClick={onPresentBurnModal} mt=\"24px\">\n            {TranslateString(999, 'Trade in for ALIFE')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {state.isLoading ? TranslateString(999, 'Loading...') : TranslateString(999, 'Details')}\n        </DetailsButton>\n        {state.isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Number minted')}:</Text>\n              <Value>\n                {MINTED}/{maxMint}\n              </Value>\n            </InfoRow>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Minted By Me')}:</Text>\n              <Value>{MINTS}</Value>\n            </InfoRow>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\n\nconst NftGrid = styled(BaseLayout)`\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  & > div {\n    grid-column: 2 / 6;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n      grid-column: span 4;\n    }\n  }\n`\n\nexport default NftGrid\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\n\nconst NftList = (props) => {\n  const { data: nfts } = props\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => (\n        <div key={nft.nftId}>\n          <NftCard nft={nft} />\n        </div>\n      ))}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import React, { useContext } from 'react'\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst NftProgressSimple = () => {\n  const TranslateString = useI18n()\n  const { isInitialized, currentDistributedSupply, totalSupplyDistributed, countBurnt } = useContext(NftProviderContext)\n\n  return (\n    <Card>\n      <CardBody>\n        <InfoRow>\n          <Text>{TranslateString(999, 'Total Base and Rare NFTs Claimed')}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgressSimple\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NftProgress from './NftProgress'\nimport NftProgressSimple from './NftProgressSimple'\nimport StatusCard from './StatusCard'\n\nconst StyledNtfInfo = styled.div`\n  align-items: start;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst NftInfo = () => {\n  const { canBurnNft } = useContext(NftProviderContext)\n\n  return <NftProgressSimple />\n}\n\nexport default NftInfo\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Button } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport { Link } from 'react-router-dom'\nimport nfts from 'config/constants/newnfts'\nimport NftList from './components/NftList'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst CustomButton = styled(Button)`\n  margin-right: 20px;\n`\n\nconst GoldenButton = styled(Button)`\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px rgba(139, 66, 8, 1),\n    inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n  background-image: linear-gradient(160deg, #a54e07, #b47e11, #fef1a2, #bc881b, #a54e07);\n  border: 1px solid #a55d07;\n  color: rgb(120, 50, 5);\n  text-shadow: 0 2px 2px rgba(250, 227, 133, 1);\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  background-size: 100% 100%;\n  background-position: center;\n\n  &:focus,\n  &:hover {\n    background-size: 150% 150%;\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23), inset 0 -2px 5px 1px #b17d10,\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n    border: 1px solid rgba(165, 93, 7, 0.6);\n    color: rgba(120, 50, 5, 0.8);\n  }\n  &:active {\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px #b17d10,\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n  }\n`\n\nconst Nft = () => {\n  const TranslateString = useI18n()\n\n  const [NFTs, setNFTs] = useState(nfts)\n\n  const filterNFTs = (rarity: string) => {\n    const filteredNFTs = nfts.filter((nft) => nft.rarity === rarity)\n    setNFTs(filteredNFTs)\n  }\n\n  useEffect(() => {\n    filterNFTs('Base')\n  }, [])\n\n  return (\n    <NftProvider>\n      <Page>\n        <StyledHero>\n          <Heading as=\"h1\" size=\"xl\" color=\"#9f0d0d\" mb=\"24px\">\n            Base and Rare NFTs\n          </Heading>\n          <Heading as=\"h2\" size=\"lg\" color=\"#9f0d0d\">\n            {TranslateString(999, 'Trade in for ALIFE, or keep for your collection!')}\n          </Heading>\n          <CustomButton onClick={() => filterNFTs('Base')} mt=\"24px\">\n            Base NFTs\n          </CustomButton>\n          <CustomButton variant=\"success\" onClick={() => filterNFTs('Rare')} mt=\"24px\">\n            Rare NFTs\n          </CustomButton>\n          <CustomButton variant=\"subtle\" onClick={() => filterNFTs('Epic')} mt=\"24px\">\n            Epic NFTs\n          </CustomButton>\n          <GoldenButton onClick={() => filterNFTs('Legendary')} mt=\"24px\">\n            Legendary NFTs\n          </GoldenButton>\n        </StyledHero>\n\n        <NftInfo />\n        <NftList data={NFTs} />\n      </Page>\n    </NftProvider>\n  )\n}\n\nexport default Nft\n"],"sourceRoot":""}