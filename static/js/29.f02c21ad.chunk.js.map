{"version":3,"sources":["config/constants/newnfts.ts","views/NftArtist/components/InfoRow.tsx","views/NftArtist/components/Image.tsx","views/NftArtist/utils/contracts.ts","views/NftArtist/contexts/NftProvider.tsx","views/NftArtist/components/ClaimNftModal.tsx","views/NftArtist/components/BurnNftModal.tsx","views/NftArtist/components/TransferNftModal.tsx","views/NftArtist/components/NftCard/index.tsx","views/NftArtist/components/NftGrid.tsx","views/NftArtist/components/NftList.tsx","views/NftArtist/components/NftProgressSimple.tsx","views/NftArtist/components/NftInfo.tsx","views/NftArtist/index.tsx"],"names":["NftFarm","NFT","AMOUNT_TO_CLAIM","Nfts","name","metadata","description","previewImage","originalImage","fileType","blurImage","sortOrder","nftId","tokenAmount","tokenSupply","nftFarmContract","nftContract","rarity","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","href","target","rel","getNftContract","contractOptions","nftAbi","nft","getContract","getNewNftContract","nftFarm","getToFloat","v","array","t","length","i","push","parseInt","toString","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","useState","isInitialized","hasClaimed","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","myMints","isApproved","state","setState","account","useWallet","currentBlock","useBlock","useEffect","a","prevState","error","console","fetchContractData","multicall","nftFarmV2","address","params","getMinted","methods","call","isApprovedForAll","getTokenIdAndNftId","index","tokenOfOwnerByIndex","tokenId","getNftId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","fetchNonLoggedInContractData","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Value","Text","ModalContent","Actions","ClaimNftModal","onSuccess","onDismiss","isLoading","setIsLoading","pendingTx","setPendingTx","setError","TranslateString","useI18n","nftMintingContract","useNFTFarmV2Contract","contraToken","useERC20","getLifeAddress","allowance","useNftAllowance","onApprove","useNftApprove","cakeBalance","useTokenBalance","cakeInWallet","getBalanceNumber","handleConfirm","mint","send","from","on","title","color","mb","fullWidth","disabled","onClick","BurnNftModal","tokenIds","accepted","setAccepted","useRabbitMintingFarm","burnNFT","style","alignItems","display","checked","scale","onChange","ml","cursor","variant","Label","label","text","TransferNftModal","values","setValues","NFTFarmV2Contract","Web3","utils","isAddress","getTradeIdByNftId","tradeId","transfer","htmlFor","id","type","placeholder","evt","inputValue","isWarning","Header","DetailsButton","Button","attrs","InfoBlock","ViewNft","NftCard","isOpen","nftCount","nftBurnCount","minted","setMinted","maxMint","setMaxMint","BigNumber","price","setPrice","useContext","history","useHistory","setRequestedApproval","firstCharOfAccount","slice","lastCharOfAccount","loggedIn","nftIndex","indexOf","MINTS","MINTED","walletCanClaim","undefined","newFarmContract","nftInfoState","mintedValue","maxMintValue","priceValue","pow","getNftInfoState","isSupplyAvailable","walletOwnsNft","Icon","ChevronUpIcon","ChevronDownIcon","fetchDetails","useCallback","isDataFetched","handleClick","usePancakeRabbits","handleApprove","setApprovalForAll","log","handleSuccess","useModal","onPresentClaimModal","onPresentTransferModal","isActive","outline","mt","p","endIcon","width","as","textAlign","NftGrid","BaseLayout","mediaQueries","sm","NftList","props","nfts","data","orderBy","map","NftProgressSimple","NftInfo","StyledHero","textSubtle","CustomButton","Nft","NFTs","setNFTs","artists","setArtists","getArtists","nftNewContract","getAllAuthors","artistData","getNftIdByArtist","artist","getNftIdByAuthor","nftIds","filterNFTs","filteredNFTs","filter","includes","Page","size"],"mappings":"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","file":"static/js/29.f02c21ad.chunk.js","sourcesContent":["import { Nft } from './types'\r\n\r\nexport const NftFarm = '0xE9582C3d1aaAb7b7E3061575d4B956f5d13e789F'\r\nexport const NFT = '0xa81ab2d03b9e3a62bdbb837d417a5e221f754e14'\r\nexport const AMOUNT_TO_CLAIM = '10'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Count Pepes Chocula',\r\n    metadata: 'tier-NFT-base-dark-chocolate.json',\r\n    description: 'Dipped in chocolate and ready for a bite. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-dark-chocolate.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmX9UuF41nfhnESX3DnVHhC4XwuYAcLEReGyN4CtE8P7Bg?filename=NFT-base-dark-chocolate.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 0,\r\n    nftId: 100,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Base',\r\n  },\r\n  {\r\n    name: 'Vlad Pepes Drakul',\r\n    metadata: 'tier-NFT-base-main-nopaint.json',\r\n    description: 'The legend behind the meme in all his original glory. Part of the base tier of Vlad NFTs',\r\n    previewImage: 'preview-base-main-nopaint.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWckPrzbjvf8jqUpdQ7jKLzdaSBTyPSV6x6obSUHHipqc?filename=NFT-base-main-nopaint.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 1,\r\n    nftId: 101,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Base',\r\n  },\r\n  {\r\n    name: 'Pepes in Stone',\r\n    metadata: 'tier-NFT-base-marble.json',\r\n    description:\r\n      'The count has turned into a marble statue ready for display in the halls of Vladhalla. Part of the base tier of Vlad NFTs.',\r\n    previewImage: 'preview-base-marble.jpg',\r\n    originalImage: 'https://ipfs.io/ipfs/QmSnz85drLjCD4qNgaMwHFC6PFEkGrmYhM1LpHwZWpEWaQ?filename=NFT-base-marble.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 2,\r\n    nftId: 102,\r\n    tokenAmount: 10,\r\n    tokenSupply: 2222,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Base',\r\n  },\r\n  {\r\n    name: 'The path to Vladhalla',\r\n    metadata: '',\r\n    description: 'All who seek to find the path to Vladhalla must have strong hands along the way to immortality.',\r\n    previewImage: 'preview-path-to-vladhalla.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmQWAeV3aAWD2Kbvxmtt4H874AEf7M7N5FcBos4iZbkRcj?filename=NFT-rare-path-to-vladhalla.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 3,\r\n    nftId: 103,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Rare',\r\n  },\r\n  {\r\n    name: 'Painted Pepe',\r\n    metadata: '',\r\n    description:\r\n      'As an homage to the original Vlad Pepes Drakul this retains his painted face hang him in your gallery for eternal viewing.',\r\n    previewImage: 'preview-painted-pepes.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmRqe92vpppkNS2aihmdvswHstAiHAF4jC2KUAiec5LKKk?filename=NFT-rare-painted-pepes.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 4,\r\n    nftId: 104,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Rare',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 105,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Rare',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 106,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Epic',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 107,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Epic',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 108,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Epic',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 109,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Legendary',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 110,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Legendary',\r\n  },\r\n  {\r\n    name: 'All Hail VLAD',\r\n    metadata: '',\r\n    description: 'A coin like no other. It grants the holder eternal life when stored in their wallet.',\r\n    previewImage: 'preview-all-hail-vlad.jpg',\r\n    originalImage:\r\n      'https://ipfs.io/ipfs/QmWmdegkuvXShBs47G4GPqxfwnVbtKY5pYeAoAN3Xy37KV?filename=NFT-rare-all-hail-vlad.mp4',\r\n    fileType: 'mp4',\r\n    blurImage: '',\r\n    sortOrder: 5,\r\n    nftId: 111,\r\n    tokenAmount: 100,\r\n    tokenSupply: 666,\r\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\r\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\r\n    rarity: 'Legendary',\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import styled from 'styled-components'\r\n\r\nconst InfoRow = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport default InfoRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface ImageProps {\r\n  src: string\r\n  alt: string\r\n  originalLink?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  position: relative;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  padding-bottom: 100%;\r\n`\r\n\r\nconst StyledImage = styled.img`\r\n  position: absolute;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  transition: opacity 1s linear;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  border-radius: 32px 32px 0 0;\r\n`\r\n\r\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\r\n  const previewImage = <StyledImage src={src} alt={alt} />\r\n\r\n  return (\r\n    <Container>\r\n      {originalLink ? (\r\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\r\n          {previewImage}\r\n        </a>\r\n      ) : (\r\n        previewImage\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Image\r\n","import { AbiItem, fromWei } from 'web3-utils'\r\nimport { getContract } from 'utils/web3'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport nftFarm from 'config/abi/NftFarmV2.json'\r\nimport nft from 'config/abi/NFT.json'\r\nimport { NftFarm, NFT } from 'config/constants/newnfts'\r\nimport BigNumber from 'bignumber.js'\r\n// TODO: Figure out how to add current account to contracts to write methods can be used\r\n\r\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\r\n  const nftMintingFarmAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nft as unknown as AbiItem\r\n  return getContract(nftAbi, NFT, contractOptions)\r\n}\r\n\r\nexport const getNewNftContract = (contractOptions?: ContractOptions) => {\r\n  const nftAbi = nftFarm as unknown as AbiItem\r\n  return getContract(nftAbi, NftFarm, contractOptions)\r\n}\r\n\r\nexport const getFromWei = (v: any) => {\r\n  if (!v) return 0\r\n  return parseFloat(fromWei(v.toString(), 'ether'))\r\n}\r\n\r\nexport const getFromWayArray = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(fromWei(v[i].toString(), 'ether'))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToFloat = (v: any) => {\r\n  if (!v) return []\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseInt(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport const getToInt = (v: any) => {\r\n  const array = []\r\n  if (!v) return []\r\n  const t = v.length\r\n  for (let i = 0; i < t; i++) {\r\n    if (!v[i]) {\r\n      array.push(0)\r\n    } else {\r\n      array.push(parseFloat(v[i].toString()))\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nexport default getNftMintingContract\r\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useBlock from 'hooks/useBlock'\r\nimport nftFarmV2 from 'config/abi/NftFarmV2.json'\r\nimport { NftFarm } from 'config/constants/newnfts'\r\nimport multicall from 'utils/multicall'\r\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\r\n\r\ninterface NftProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\ntype NftMap = {\r\n  [key: number]: number[]\r\n}\r\n\r\ntype State = {\r\n  isInitialized: boolean\r\n  hasClaimed: number[]\r\n  amounts: number[]\r\n  myMints: number[]\r\n  countBurnt: number\r\n  endBlockNumber: number\r\n  startBlockNumber: number\r\n  totalSupplyDistributed: number\r\n  currentDistributedSupply: number\r\n  balanceOf: number\r\n  nftMap: NftMap\r\n\r\n  allowMultipleClaims: boolean\r\n  rarity: string\r\n  priceMultiplier: number\r\n  maxMintPerNft: number\r\n  tokenPerBurn: number\r\n  isApproved: boolean\r\n}\r\n\r\ntype Context = {\r\n  canBurnNft: boolean\r\n  getTokenIds: (nftId: number) => number[]\r\n  reInitialize: () => void\r\n} & State\r\n\r\nexport const NftProviderContext = createContext<Context | null>(null)\r\n\r\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\r\n  const isMounted = useRef(true)\r\n  const [state, setState] = useState<State>({\r\n    isInitialized: false,\r\n    hasClaimed: [],\r\n    countBurnt: 0,\r\n    startBlockNumber: 0,\r\n    endBlockNumber: 0,\r\n    totalSupplyDistributed: 0,\r\n    currentDistributedSupply: 0,\r\n    balanceOf: 0,\r\n    nftMap: {},\r\n\r\n    allowMultipleClaims: true,\r\n    rarity: '',\r\n    priceMultiplier: 0,\r\n    maxMintPerNft: 0,\r\n    tokenPerBurn: 0,\r\n\r\n    amounts: [],\r\n    myMints: [],\r\n    isApproved: false,\r\n  })\r\n  const { account } = useWallet()\r\n  const currentBlock = useBlock()\r\n\r\n  const { isInitialized } = state\r\n\r\n  // Static data\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        // const [\r\n        //   // startBlockNumberArr,\r\n        //   // endBlockNumberArr,\r\n        //   // countBurntArr,\r\n        //   // totalSupplyDistributedArr,\r\n        //   // currentDistributedSupplyArr,\r\n\r\n        //   // allowMultipleClaimsArr,\r\n        //   // rarityArr,\r\n        //   // priceMultiplierArr,\r\n        //   // maxMintPerNftArr,\r\n        //   // tokenPerBurnArr,\r\n        // ] = await multicall(nftFarm, [\r\n        //   // { address: NftFarm, name: 'startBlockNumber' },\r\n        //   // { address: NftFarm, name: 'endBlockNumber' },\r\n        //   // { address: NftFarm, name: 'countBurnt' },\r\n        //   // { address: NftFarm, name: 'totalSupplyDistributed' },\r\n        //   // { address: NftFarm, name: 'currentDistributedSupply' },\r\n        //   // { address: NftFarm, name: 'allowMultipleClaims' },\r\n        //   // { address: NftFarm, name: 'rarity' },\r\n        //   // { address: NftFarm, name: 'priceMultiplier' },\r\n        //   // { address: NftFarm, name: 'maxMintPerNft' },\r\n        //   // { address: NftFarm, name: 'tokenPerBurn' },\r\n        // ])\r\n\r\n        // TODO: Figure out why these are coming back as arrays\r\n        // const [startBlockNumber]: [BigNumber] = startBlockNumberArr\r\n        // const [endBlockNumber]: [BigNumber] = endBlockNumberArr\r\n        // const [countBurnt]: [BigNumber] = countBurntArr\r\n        // const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n        // const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          // countBurnt: countBurnt.toNumber(),\r\n          // startBlockNumber: startBlockNumber.toNumber(),\r\n          // endBlockNumber: endBlockNumber.toNumber(),\r\n          // currentDistributedSupply: currentDistributedSupply.toNumber(),\r\n          // totalSupplyDistributed: totalSupplyDistributed.toNumber(),\r\n          // allowMultipleClaims: allowMultipleClaimsArr[0],\r\n          // rarity: rarityArr[0].toString(),\r\n          // priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\r\n          // maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\r\n          // tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    fetchContractData()\r\n  }, [isInitialized, setState])\r\n\r\n  // Data from the contract that needs an account\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const nftContract = getNftContract()\r\n\r\n        const getMinted = await multicall(nftFarmV2, [{ address: NftFarm, name: 'getMinted', params: [account] }])\r\n\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n        const myMints = getToInt(getMinted[0][2])\r\n\r\n        // console.log('hasClaimed', hasClaimed)\r\n        // console.log('amounts', amounts)\r\n        // console.log('myMints', myMints)\r\n\r\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\r\n\r\n        let nftMap: NftMap = {}\r\n\r\n        const isApproved = await nftContract.methods.isApprovedForAll(account, NftFarm).call()\r\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\r\n        // owned by the wallet, then the nftId's associated with the tokenIds\r\n        if (balanceOf > 0) {\r\n          const getTokenIdAndNftId = async (index: number) => {\r\n            try {\r\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\r\n              const nftId = await nftContract.methods.getNftId(tokenId).call()\r\n\r\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\r\n            } catch (error) {\r\n              return null\r\n            }\r\n          }\r\n\r\n          const tokenIdPromises = []\r\n\r\n          for (let i = 0; i < balanceOf; i++) {\r\n            tokenIdPromises.push(getTokenIdAndNftId(i))\r\n          }\r\n\r\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\r\n\r\n          // While improbable a wallet can own more than one of the same nft so the format is:\r\n          // { [nftId]: [array of tokenIds] }\r\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\r\n            if (!association) {\r\n              return accum\r\n            }\r\n\r\n            const [nftId, tokenId] = association\r\n\r\n            return {\r\n              ...accum,\r\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\r\n            }\r\n          }, {})\r\n        }\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          balanceOf,\r\n          nftMap,\r\n\r\n          amounts,\r\n          myMints,\r\n          isApproved,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    const fetchNonLoggedInContractData = async () => {\r\n      try {\r\n        const getMinted = await multicall(nftFarmV2, [\r\n          { address: NftFarm, name: 'getMinted', params: ['0x0000000000000000000000000000000000000000'] },\r\n        ])\r\n        const hasClaimed = getMinted[0][0]\r\n        const amounts = getToFloat(getMinted[0][1])\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          amounts,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchContractData()\r\n    } else {\r\n      fetchNonLoggedInContractData()\r\n    }\r\n  }, [isInitialized, account, setState])\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false\r\n    }\r\n  }, [isMounted])\r\n\r\n  const canBurnNft = currentBlock <= state.endBlockNumber\r\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\r\n\r\n  /**\r\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\r\n   * For example when a transaction has been completed\r\n   */\r\n  const reInitialize = () => {\r\n    // Only attempt to re-initialize if the component is still mounted\r\n    // Transactions can take awhile so it is likely some users will navigate to another page\r\n    // before the transaction is finished\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\r\n      {children}\r\n    </NftProviderContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NftProvider\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/newnfts'\r\nimport { getLifeAddress } from 'utils/addressHelpers'\r\nimport { Nft } from 'config/constants/types'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useERC20, useNFTFarmV2Contract } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\nimport { useNftAllowance } from '../../../hooks/useAllowance'\r\nimport { useNftApprove } from '../../../hooks/useApprove'\r\n\r\ninterface ClaimNftModalProps {\r\n  nft: Nft\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const nftMintingContract = useNFTFarmV2Contract(NftFarm)\r\n  const contraToken = useERC20(getLifeAddress())\r\n  const allowance = useNftAllowance(contraToken, NftFarm, pendingTx)\r\n  const onApprove = useNftApprove(contraToken, NftFarm)\r\n  const cakeBalance = useTokenBalance(getLifeAddress())\r\n  const cakeInWallet = getBalanceNumber(cakeBalance)\r\n\r\n  // console.log('getLifeAddress', getLifeAddress(), NftFarm, allowance)\r\n  // console.log('allowance', allowance)\r\n\r\n  const handleConfirm = async () => {\r\n    if (allowance === null) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      await nftMintingContract.methods\r\n        .mint(nft.nftId)\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          onDismiss()\r\n          onSuccess()\r\n        })\r\n        .on('error', () => {\r\n          console.error(error)\r\n          setError('Unable to claim NFT')\r\n          setIsLoading(false)\r\n        })\r\n    } catch (err) {\r\n      console.error('Unable to mint NFT:', err)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (cakeInWallet === 0) {\r\n      setError(`You must have ALIFE balance to claim NFT`)\r\n    }\r\n  }, [cakeInWallet, setError])\r\n\r\n  return (\r\n    <Modal title={`Claim NFT for ${nft.tokenAmount} ALIFE`} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button\r\n          fullWidth\r\n          disabled={!account || pendingTx || isLoading || allowance > 0}\r\n          onClick={async () => {\r\n            try {\r\n              setPendingTx(true)\r\n              await onApprove()\r\n              setPendingTx(false)\r\n            } catch (e) {\r\n              setPendingTx(false)\r\n              console.error(e)\r\n            }\r\n          }}\r\n        >\r\n          Approve\r\n        </Button>\r\n\r\n        <Button\r\n          fullWidth\r\n          onClick={handleConfirm}\r\n          disabled={!account || isLoading || cakeInWallet <= 0 || allowance <= 0}\r\n        >\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimNftModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Nft } from 'config/constants/types'\r\nimport { NftFarm, AMOUNT_TO_CLAIM } from 'config/constants/newnfts'\r\nimport { useRabbitMintingFarm } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface BurnNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const [accepted, setAccepted] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const nftMintingContract = useRabbitMintingFarm(NftFarm)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const [tokenId] = tokenIds\r\n\r\n      await nftMintingContract.methods\r\n        .burnNFT(tokenId)\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          onDismiss()\r\n          onSuccess()\r\n        })\r\n        .on('error', () => {\r\n          console.error(error)\r\n          setError('Unable to burn NFT')\r\n          setIsLoading(false)\r\n        })\r\n    } catch (err) {\r\n      console.error('Unable to burn NFT:', err)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\r\n          <Value>${AMOUNT_TO_CLAIM} ALIFE</Value>\r\n        </InfoRow>\r\n      </ModalContent>\r\n      <ModalContent>\r\n        <Text color=\"failure\">\r\n          {TranslateString(999, 'When you trade in this NFT to receive ALIFE, you will lose access to it forever!')}\r\n        </Text>\r\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\r\n      </ModalContent>\r\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\r\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\r\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\r\n          {TranslateString(999, 'I understand')}\r\n        </Text>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default BurnNftModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Web3 from 'web3'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport { NFT, NftFarm } from 'config/constants/newnfts'\r\nimport { Nft } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useNFTFarmV2Contract } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface TransferNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst Label = styled.label`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  margin-top: 24px;\r\n`\r\n// tokenIds is retrieved dynamically from contracts.\r\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [values, setValues] = useState({\r\n    address: '',\r\n    tokenId: tokenIds[0],\r\n  })\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  const NFTFarmV2Contract = useNFTFarmV2Contract(NftFarm)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const isValidAddress = Web3.utils.isAddress(values.address)\r\n\r\n      if (!isValidAddress) {\r\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\r\n      } else {\r\n        const tradeId = await NFTFarmV2Contract.methods.getTradeIdByNftId(account, nft.nftId).call()\r\n        await NFTFarmV2Contract.methods\r\n          .transfer(tradeId, values.address)\r\n          .send({ from: account })\r\n          .on('sending', () => {\r\n            setIsLoading(true)\r\n          })\r\n          .on('receipt', () => {\r\n            onDismiss()\r\n            onSuccess()\r\n          })\r\n          .on('error', () => {\r\n            console.error(error)\r\n            setError('Unable to transfer NFT')\r\n            setIsLoading(false)\r\n          })\r\n      }\r\n    } catch (err) {\r\n      console.error('Unable to transfer NFT:', err)\r\n    }\r\n  }\r\n\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value: inputValue, name } = evt.target\r\n    setValues({ ...values, [name]: inputValue })\r\n  }\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\r\n        <Input\r\n          id=\"transferAddress\"\r\n          name=\"address\"\r\n          type=\"text\"\r\n          placeholder={TranslateString(999, 'Paste address')}\r\n          value={values.address}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        />\r\n        {/* <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Token ID')}:</Label>\r\n        <Input\r\n          id=\"tokenId\"\r\n          name=\"tokenId\"\r\n          type=\"number\"\r\n          placeholder={TranslateString(999, 'Enter tokenId')}\r\n          value={values.tokenId}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        /> */}\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          fullWidth\r\n          onClick={handleConfirm}\r\n          disabled={!account || isLoading || !values.address || !values.tokenId}\r\n        >\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default TransferNftModal\r\n","import React, { useState, useContext, useCallback, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Tag,\r\n  Button,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n  Text,\r\n  CardFooter,\r\n  useModal,\r\n} from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Nft } from 'config/constants/types'\r\nimport { AMOUNT_TO_CLAIM, NftFarm, NFT } from 'config/constants/newnfts'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { usePancakeRabbits } from 'hooks/useContract'\r\nimport InfoRow from '../InfoRow'\r\nimport Image from '../Image'\r\nimport { NftProviderContext } from '../../contexts/NftProvider'\r\nimport { getNewNftContract } from '../../utils/contracts'\r\nimport ClaimNftModal from '../ClaimNftModal'\r\nimport BurnNftModal from '../BurnNftModal'\r\nimport TransferNftModal from '../TransferNftModal'\r\n\r\ninterface NftCardProps {\r\n  nft: Nft\r\n}\r\n\r\nconst Header = styled(InfoRow)`\r\n  min-height: 44px;\r\n`\r\n\r\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\r\n  height: auto;\r\n  padding: 16px 24px;\r\n\r\n  &:hover:not(:disabled):not(:active) {\r\n    background-color: transparent;\r\n  }\r\n\r\n  &:focus:not(:active) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\nconst InfoBlock = styled.div`\r\n  padding: 0 24px 24px;\r\n`\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ViewNft = styled(Text)`\r\n  @media (max-width: 1300px) {\r\n    font-size: 11px;\r\n  }\r\n`\r\n\r\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\r\n  const [state, setState] = useState({\r\n    isLoading: false,\r\n    isOpen: false,\r\n    nftCount: 0,\r\n    nftBurnCount: 0,\r\n  })\r\n  const [minted, setMinted] = useState(0)\r\n  const [maxMint, setMaxMint] = useState(0)\r\n  const [price, setPrice] = useState(new BigNumber(0))\r\n  const TranslateString = useI18n()\r\n  const {\r\n    isInitialized,\r\n    hasClaimed,\r\n    canBurnNft,\r\n    totalSupplyDistributed,\r\n    currentDistributedSupply,\r\n    getTokenIds,\r\n    reInitialize,\r\n    allowMultipleClaims,\r\n    rarity,\r\n    priceMultiplier,\r\n    maxMintPerNft,\r\n    tokenPerBurn,\r\n    amounts,\r\n    myMints,\r\n    isApproved,\r\n  } = useContext(NftProviderContext)\r\n  const { account } = useWallet()\r\n  const history = useHistory()\r\n\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const [error, setError] = useState(null)\r\n  // maxMintPerNft limit max amount that a nft can be minted\r\n  // maxMintByNft array containing individual amount of mint per nft index\r\n  // prices array containing individual prices of a mint per nft index\r\n  // tokenPerBurn global price\r\n\r\n  const { nftId, name, previewImage, originalImage, description, tokenAmount, tokenSupply } = nft\r\n\r\n  const firstCharOfAccount = account != null && account.slice(0, 4)\r\n  const lastCharOfAccount = account != null && account.slice(-4)\r\n\r\n  const accountName = account != null && `${firstCharOfAccount}...${lastCharOfAccount}`\r\n\r\n  const loggedIn = account !== null\r\n\r\n  // console.log('?hasClaimed', hasClaimed)\r\n  // console.log('?ownerById', ownerById)\r\n\r\n  const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\r\n\r\n  const MINTS = myMints[nftIndex] || 0\r\n\r\n  // not sure about this, you need to check if this oser own this nft in the view nft page.\r\n  // const youAreTheLastOwner = ownerById && ownerById[nftIndex] && ownerById[nftIndex].toString() === account.toString()\r\n\r\n  const MINTED = amounts[nftIndex] ? parseInt(amounts[nftIndex].toString()) : 0\r\n  const walletCanClaim = maxMintPerNft === 0 || MINTED === undefined || MINTED < maxMint\r\n\r\n  // console.log('CONTRACT/GALLERY INFO:', totalSupplyDistributed, rarity, priceMultiplier, maxMintPerNft, tokenPerBurn)\r\n  // console.log('LIMITS BY NFT:', tokenPerBurn, amounts, maxMintByNft, prices)\r\n  // console.log(nftId, 'walletCanClaim', walletCanClaim, maxMintPerNft, MINTED, MAX_MINT)\r\n\r\n  const tokenIds = getTokenIds(nftId)\r\n  // const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\r\n\r\n  useEffect(() => {\r\n    const getNftInfoState = async () => {\r\n      const newFarmContract = getNewNftContract()\r\n      const nftInfoState = await newFarmContract.methods.nftInfoState(nftId).call()\r\n      const { minted: mintedValue, maxMint: maxMintValue, price: priceValue } = nftInfoState\r\n      setMinted(parseInt(mintedValue))\r\n      setMaxMint(parseInt(maxMintValue))\r\n      setPrice(new BigNumber(priceValue).div(new BigNumber(10).pow(18)))\r\n    }\r\n    getNftInfoState()\r\n  }, [nftId, isInitialized])\r\n\r\n  const isSupplyAvailable = minted < maxMint\r\n  // const walletOwnsNft = tokenIds && tokenIds.length > 0\r\n  const walletOwnsNft = MINTS > 0\r\n\r\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\r\n\r\n  const fetchDetails = useCallback(async () => {\r\n    setState((prevState) => ({ ...prevState, isLoading: true }))\r\n    try {\r\n      const { methods } = getNewNftContract()\r\n      const nftCount = await methods.nftCount(nftId).call()\r\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: false,\r\n        isDataFetched: true,\r\n        nftCount: parseInt(nftCount, 10),\r\n        nftBurnCount: parseInt(nftBurnCount, 10),\r\n      }))\r\n    } catch (err) {\r\n      console.error(err)\r\n    }\r\n  }, [nftId])\r\n\r\n  const handleClick = async () => {\r\n    if (state.isOpen) {\r\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\r\n    } else {\r\n      try {\r\n        await fetchDetails()\r\n      } catch (err) {\r\n        console.error(err)\r\n      } finally {\r\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\r\n      }\r\n    }\r\n  }\r\n\r\n  const nftContract = usePancakeRabbits(NFT)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setState((prevState) => ({ ...prevState, isLoading: true }))\r\n      setRequestedApproval(true)\r\n      await nftContract.methods\r\n        .setApprovalForAll(NftFarm, 'true')\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          console.log('receipt')\r\n        })\r\n        .on('error', () => {\r\n          setError('Unable to transfer NFT')\r\n          setIsLoading(false)\r\n        })\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: false,\r\n        isDataFetched: true,\r\n      }))\r\n\r\n      fetchDetails()\r\n      reInitialize()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [account, nftContract, reInitialize, fetchDetails])\r\n\r\n  const handleSuccess = () => {\r\n    fetchDetails()\r\n    reInitialize()\r\n  }\r\n\r\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\r\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\r\n  const [onPresentTransferModal] = useModal(\r\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\r\n  )\r\n\r\n  return (\r\n    <Card isActive={walletOwnsNft}>\r\n      <Image src={`/images/nfts/${previewImage}`} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\r\n      <CardBody>\r\n        <Header>\r\n          <Heading>{name}</Heading>\r\n          {isInitialized && walletCanClaim && (\r\n            <Tag outline variant=\"success\">\r\n              {TranslateString(526, 'Available')}\r\n            </Tag>\r\n          )}\r\n          {isInitialized && !walletCanClaim && (\r\n            <Tag outline variant=\"failure\">\r\n              Sold Out\r\n            </Tag>\r\n          )}\r\n          {isInitialized && walletOwnsNft && (\r\n            <Tag outline variant=\"secondary\">\r\n              {TranslateString(999, 'In Wallet')}\r\n            </Tag>\r\n          )}\r\n        </Header>\r\n        {isInitialized && walletOwnsNft && !isApproved && (\r\n          <Button\r\n            fullWidth\r\n            variant=\"primary\"\r\n            mt=\"24px\"\r\n            onClick={() => {\r\n              handleApprove()\r\n            }}\r\n          >\r\n            Approve Transfer\r\n          </Button>\r\n        )}\r\n        {isInitialized && walletOwnsNft && isApproved && (\r\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\r\n            {TranslateString(999, 'Transfer')}\r\n          </Button>\r\n        )}\r\n        {isInitialized && loggedIn && walletCanClaim && isSupplyAvailable && (\r\n          <Button fullWidth onClick={onPresentClaimModal} mt=\"24px\">\r\n            {TranslateString(999, 'Claim this NFT')} for {price.toString()} ALIFE\r\n          </Button>\r\n        )}\r\n        {isInitialized && (\r\n          <Button fullWidth onClick={() => history.push(`new-detail/${nftId}`)} mt=\"24px\">\r\n            <ViewNft>\r\n              View NFT ({MINTED}/{maxMint} MINTED)\r\n            </ViewNft>\r\n          </Button>\r\n        )}\r\n        {/* {isInitialized && canBurnNft && walletOwnsNft && (\r\n          <Button variant=\"danger\" fullWidth onClick={onPresentBurnModal} mt=\"24px\">\r\n            {TranslateString(999, 'Trade in for ALIFE')}\r\n          </Button>\r\n        )} */}\r\n      </CardBody>\r\n      <CardFooter p=\"0\">\r\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\r\n          {state.isLoading ? TranslateString(999, 'Loading...') : TranslateString(999, 'Details')}\r\n        </DetailsButton>\r\n        {state.isOpen && (\r\n          <InfoBlock>\r\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\r\n              {description}\r\n            </Text>\r\n            <InfoRow>\r\n              <Text>{TranslateString(999, 'Number minted')}:</Text>\r\n              <Value>\r\n                {MINTED}/{maxMint}\r\n              </Value>\r\n            </InfoRow>\r\n            <InfoRow>\r\n              <Text>Owned By Me:</Text>\r\n              <Value>{MINTS}</Value>\r\n            </InfoRow>\r\n          </InfoBlock>\r\n        )}\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NftCard\r\n","import styled from 'styled-components'\r\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\r\n\r\nconst NftGrid = styled(BaseLayout)`\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n\r\n  & > div {\r\n    grid-column: 2 / 6;\r\n\r\n    ${({ theme }) => theme.mediaQueries.sm} {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nexport default NftGrid\r\n","import React from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport NftCard from './NftCard'\r\nimport NftGrid from './NftGrid'\r\n\r\nconst NftList = (props) => {\r\n  const { data: nfts } = props\r\n  return (\r\n    <NftGrid>\r\n      {orderBy(nfts, 'sortOrder').map((nft) => (\r\n        <div key={nft.nftId}>\r\n          <NftCard nft={nft} />\r\n        </div>\r\n      ))}\r\n    </NftGrid>\r\n  )\r\n}\r\n\r\nexport default NftList\r\n","import React, { useContext } from 'react'\r\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { NftProviderContext } from '../contexts/NftProvider'\r\nimport InfoRow from './InfoRow'\r\n\r\nconst NftProgressSimple = () => {\r\n  const TranslateString = useI18n()\r\n  const { isInitialized, currentDistributedSupply, totalSupplyDistributed, countBurnt } = useContext(NftProviderContext)\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody>\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Total Base and Rare NFTs Claimed')}:</Text>\r\n          <Text>\r\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\r\n          </Text>\r\n        </InfoRow>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NftProgressSimple\r\n","import React, { useContext } from 'react'\r\nimport styled from 'styled-components'\r\nimport { NftProviderContext } from '../contexts/NftProvider'\r\nimport NftProgress from './NftProgress'\r\nimport NftProgressSimple from './NftProgressSimple'\r\nimport StatusCard from './StatusCard'\r\n\r\nconst StyledNtfInfo = styled.div`\r\n  align-items: start;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-gap: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n`\r\n\r\nconst NftInfo = () => {\r\n  const { canBurnNft } = useContext(NftProviderContext)\r\n\r\n  return <NftProgressSimple />\r\n}\r\n\r\nexport default NftInfo\r\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport { Link } from 'react-router-dom'\r\nimport nfts from 'config/constants/newnfts'\r\nimport NftList from './components/NftList'\r\nimport NftProvider from './contexts/NftProvider'\r\nimport NftInfo from './components/NftInfo'\r\nimport { getNewNftContract } from './utils/contracts'\r\n\r\nconst StyledHero = styled.div`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\r\n  margin-bottom: 24px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst CustomButton = styled(Button)`\r\n  margin-right: 20px;\r\n`\r\n\r\nconst GoldenButton = styled(Button)`\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px rgba(139, 66, 8, 1),\r\n    inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n  background-image: linear-gradient(160deg, #a54e07, #b47e11, #fef1a2, #bc881b, #a54e07);\r\n  border: 1px solid #a55d07;\r\n  color: rgb(120, 50, 5);\r\n  text-shadow: 0 2px 2px rgba(250, 227, 133, 1);\r\n  cursor: pointer;\r\n  transition: all 0.2s ease-in-out;\r\n  background-size: 100% 100%;\r\n  background-position: center;\r\n\r\n  &:focus,\r\n  &:hover {\r\n    background-size: 150% 150%;\r\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23), inset 0 -2px 5px 1px #b17d10,\r\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n    border: 1px solid rgba(165, 93, 7, 0.6);\r\n    color: rgba(120, 50, 5, 0.8);\r\n  }\r\n  &:active {\r\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px #b17d10,\r\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\r\n  }\r\n`\r\n\r\nconst Nft = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [NFTs, setNFTs] = useState(nfts)\r\n  const [artists, setArtists] = useState([])\r\n\r\n  const getArtists = useCallback(async () => {\r\n    const nftNewContract = getNewNftContract()\r\n    const artistData = await nftNewContract.methods.getAllAuthors().call()\r\n    if(artistData) {\r\n      setArtists(artistData);\r\n    }\r\n  }, [])\r\n\r\n  const getNftIdByArtist = async (artist: string) => {\r\n    const nftNewContract = getNewNftContract()\r\n    const nftIds = await nftNewContract.methods.getNftIdByAuthor(artist).call()\r\n    return nftIds;\r\n  }\r\n\r\n  const filterNFTs = useCallback(async (artist: string) => {\r\n    const nftIds = await getNftIdByArtist(artist);\r\n    if(nftIds.length > 0) {\r\n      const filteredNFTs = nfts.filter((nft) => nftIds.includes((nft.nftId).toString()))\r\n      setNFTs(filteredNFTs)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    getArtists();\r\n    filterNFTs('shri')\r\n  }, [filterNFTs, getArtists])\r\n\r\n  const getArtistButtons = () => {\r\n    return artists.map((artist) => {\r\n      return (\r\n        <CustomButton onClick={() => filterNFTs(artist)} mt=\"24px\">\r\n          {artist}\r\n        </CustomButton>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <NftProvider>\r\n      <Page>\r\n        <StyledHero>\r\n          <Heading as=\"h1\" size=\"xl\" color=\"#9f0d0d\" mb=\"24px\">\r\n            NFTs by Artist\r\n          </Heading>\r\n          <Heading as=\"h2\" size=\"lg\" color=\"#9f0d0d\">\r\n            {TranslateString(999, 'Trade in for ALIFE, or keep for your collection!')}\r\n          </Heading>\r\n          {\r\n            getArtistButtons()\r\n          }\r\n          \r\n        </StyledHero>\r\n\r\n        <NftInfo />\r\n        <NftList data={NFTs} />\r\n      </Page>\r\n    </NftProvider>\r\n  )\r\n}\r\n\r\nexport default Nft\r\n"],"sourceRoot":""}